<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git指令</title>
    <url>/2023/02/27/Git%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git指令"><a href="#Git指令" class="headerlink" title="Git指令"></a>Git指令</h1><h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git config –global user.name 用户名</td>
<td>设置用户签名</td>
</tr>
<tr>
<td>git config –global user.email 邮箱</td>
<td>设置用户签名</td>
</tr>
<tr>
<td>git init</td>
<td>初始化本地库</td>
</tr>
<tr>
<td>git status</td>
<td>查看本地库状态</td>
</tr>
<tr>
<td>git add 文件名</td>
<td>添加到暂存区</td>
</tr>
<tr>
<td>git commit -m “日志信总” 文件名</td>
<td>提交到本地库</td>
</tr>
<tr>
<td>git reflog</td>
<td>查看历史记录</td>
</tr>
<tr>
<td>git reset –hard 版本号</td>
<td>版本穿梭</td>
</tr>
</tbody></table>
<h2 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git branch 分支名</td>
<td>创建分支</td>
</tr>
<tr>
<td>git branch -v</td>
<td>查看分支</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换分支</td>
</tr>
<tr>
<td>git merge 分支名</td>
<td>把指定的分支合并到当前分支上</td>
</tr>
</tbody></table>
<h3 id="产生冲突"><a href="#产生冲突" class="headerlink" title="产生冲突"></a>产生冲突</h3><p>冲突产生的表现：后面状态为MERGING</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="/../%E8%B5%84%E6%BA%90%E6%95%B0%E6%8D%AE/%E6%88%91%E7%9A%84%E6%96%87%E4%BB%B6/Typora%E5%9B%BE%E5%83%8F/Snipaste_2022-09-20_17-05-24.jpg"
                      alt="Snipaste_2022-09-20_17-05-24"
                >冲突产生的原因：<br>合并分支时，两个分支在<strong>同一个文件的同一个位置</strong>有两套完全不同的修改。Git无法替<br>我们决定使用哪一个。必须<strong>人为决定</strong>新代码内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line"> (fix conflicts and run &quot;git</span><br><span class="line"> (use &quot;git merge abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line"> (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line">    </span><br><span class="line">  	both modified: hello.txt</span><br><span class="line">no changes added to commit (use &quot;git add&quot; 	  and/or &quot;git commit  -a&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>编辑有冲突的文件，删除特殊符号，决定要使用的内容</p>
<p>特殊符号：<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 当前分支的代码 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 合并过来的代码 &gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</p>
<h2 id="GitHub操作"><a href="#GitHub操作" class="headerlink" title="GitHub操作"></a>GitHub操作</h2><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git remote -v</td>
<td>查看当前所有远程地址别名</td>
</tr>
<tr>
<td>git remote add 别名 远程地址</td>
<td>起别名</td>
</tr>
<tr>
<td>git push 远程库地址&#x2F;别名 分支</td>
<td>推送本地分支上的内容到远程仓库</td>
</tr>
<tr>
<td>git clone 远程地址</td>
<td>将远程仓库的内容克隆到本地</td>
</tr>
<tr>
<td>git pull 远程库地址&#x2F;别名 远程分支名</td>
<td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Blog</title>
    <url>/2022/11/17/FirstBlog/</url>
    <content><![CDATA[<p>这是我的第一条博客<br>哈喽，博客</p>
]]></content>
      <tags>
        <tag>撰写博客的的那些事</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA之面向对象下</title>
    <url>/2022/11/17/JAVA%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8B/</url>
    <content><![CDATA[<h3 id="关键字：static静态的"><a href="#关键字：static静态的" class="headerlink" title="关键字：static静态的"></a>关键字：static静态的</h3><span id="more"></span>
<h4 id="可以用来修饰的结构：主要用来修饰类的内部结构"><a href="#可以用来修饰的结构：主要用来修饰类的内部结构" class="headerlink" title="可以用来修饰的结构：主要用来修饰类的内部结构"></a>可以用来修饰的结构：主要用来修饰类的内部结构</h4><p>属性、方法、代码块、内部类</p>
<h4 id="static修饰属性：静态变量（或类变量）"><a href="#static修饰属性：静态变量（或类变量）" class="headerlink" title="static修饰属性：静态变量（或类变量）"></a>static修饰属性：<i style="color: aqua;">静态变量（或类变量）</i></h4><h5 id="属性，是否使用static修饰，又分为：静态属性-vs-非静态属性-实例变量"><a href="#属性，是否使用static修饰，又分为：静态属性-vs-非静态属性-实例变量" class="headerlink" title="属性，是否使用static修饰，又分为：静态属性  vs 非静态属性(实例变量)"></a>属性，是否使用static修饰，又分为：静态属性  vs 非静态属性(实例变量)</h5><ol>
<li>实例变量：我们创建了类的多个对象，每个对象都独立的拥一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。</li>
<li>静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</li>
</ol>
<h6 id="static修饰属性的其他说明："><a href="#static修饰属性的其他说明：" class="headerlink" title="static修饰属性的其他说明："></a>static修饰属性的其他说明：</h6><ol>
<li>静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用</li>
<li>静态变量的加载要早于对象的创建。</li>
<li>由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。</li>
<li></li>
<li>​		类变量	实例变量</li>
<li>类		yes		no</li>
<li>对象	yes		yes</li>
</ol>
<h6 id="静态属性举例：System-out-Math-PI"><a href="#静态属性举例：System-out-Math-PI" class="headerlink" title="静态属性举例：System.out; Math.PI;"></a>静态属性举例：System.out; Math.PI;</h6><h4 id="静态变量内存解析："><a href="#静态变量内存解析：" class="headerlink" title="静态变量内存解析："></a>静态变量内存解析：</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javazhong/master/1.png"
                     
                ></p>
<h4 id="static修饰方法：静态方法、类方法"><a href="#static修饰方法：静态方法、类方法" class="headerlink" title="static修饰方法：静态方法、类方法"></a>static修饰方法：<i style="color: aqua;">静态方法、类方法</i></h4><ol>
<li><p>随着类的加载而加载，可以通过”类.静态方法”的方式进行调用<br>              静态方法	非静态方法<br>​		类		    yes			no</p>
<p>​		对象		yes			yes</p>
</li>
<li><p>静态方法中，只能调用静态的方法或属性<br>非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</p>
</li>
</ol>
<h4 id="static的注意点："><a href="#static的注意点：" class="headerlink" title="static的注意点："></a>static的注意点：</h4><ul>
<li>在静态的方法内，不能使用this关键字、super关键字</li>
<li>关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。</li>
</ul>
<h4 id="如何判定属性和方法应该使用static关键字："><a href="#如何判定属性和方法应该使用static关键字：" class="headerlink" title="如何判定属性和方法应该使用static关键字："></a>如何判定属性和方法应该使用static关键字：</h4><h5 id="关于属性"><a href="#关于属性" class="headerlink" title="关于属性"></a>关于属性</h5><ul>
<li>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。</li>
<li>类中的常量也常常声明为static</li>
</ul>
<h5 id="关于方法"><a href="#关于方法" class="headerlink" title="关于方法"></a>关于方法</h5><ul>
<li>操作静态属性的方法，通常设置为static的</li>
<li>工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections</li>
</ul>
<h4 id="使用举例："><a href="#使用举例：" class="headerlink" title="使用举例："></a>使用举例：</h4><ol>
<li><p>举例一：Arrays、Math、Collections等工具类</p>
</li>
<li><p>举例二：单例模式</p>
</li>
<li><p>举例三：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;<span class="comment">//自动赋值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;</span><br><span class="line">		id = init++;</span><br><span class="line">		total++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>();</span><br><span class="line"><span class="comment">//		id = init++;</span></span><br><span class="line"><span class="comment">//		total++;</span></span><br><span class="line">		<span class="built_in">this</span>.radius = radius;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> total;<span class="comment">//记录创建的圆的个数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">init</span> <span class="operator">=</span> <span class="number">1001</span>;<span class="comment">//static声明的属性被所对象所共享</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> radius;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.radius = radius;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> total;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="设计模式的说明"><a href="#设计模式的说明" class="headerlink" title="设计模式的说明"></a>设计模式的说明</h4><h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><p><strong>设计模式</strong><i style="color: red;">是在大量的实践中总结和理论化之后优的代码结构、编程风格、以及解决问题的思考方式。</i></p>
<h5 id="常用设计模式-—-23种经典的设计模式-GOF"><a href="#常用设计模式-—-23种经典的设计模式-GOF" class="headerlink" title="常用设计模式  — 23种经典的设计模式  GOF"></a>常用设计模式  — 23种经典的设计模式  GOF</h5><ul>
<li>创建型模式，共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。 </li>
<li>结构型模式，共7种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。 </li>
<li>行为型模式，共11种：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li>
</ul>
<h4 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h4><h5 id="要解决的问题："><a href="#要解决的问题：" class="headerlink" title="要解决的问题："></a>要解决的问题：</h5><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。</p>
<h5 id="具体代码的实现："><a href="#具体代码的实现：" class="headerlink" title="具体代码的实现："></a>具体代码的实现：</h5><h6 id="饿汉式1："><a href="#饿汉式1：" class="headerlink" title="饿汉式1："></a>饿汉式1：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span>&#123;</span><br><span class="line">	<span class="comment">//1.私化类的构造器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2.内部创建类的对象</span></span><br><span class="line">	<span class="comment">//4.要求此对象也必须声明为静态的</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.提供公共的静态的方法，返回类的对象</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="饿汉式2：使用了静态代码块"><a href="#饿汉式2：使用了静态代码块" class="headerlink" title="饿汉式2：使用了静态代码块"></a>饿汉式2：使用了静态代码块</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">	<span class="comment">//1.私化类的构造器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Order</span><span class="params">()</span>&#123;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2.声明当前类对象，没初始化</span></span><br><span class="line">	<span class="comment">//4.此对象也必须声明为static的</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Order</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		instance = <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line"> &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.声明public、static的返回当前类对象的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="懒汉式："><a href="#懒汉式：" class="headerlink" title="懒汉式："></a>懒汉式：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line">	<span class="comment">//1.私化类的构造器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Order</span><span class="params">()</span>&#123;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2.声明当前类对象，没初始化</span></span><br><span class="line">	<span class="comment">//4.此对象也必须声明为static的</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Order</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3.声明public、static的返回当前类对象的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;	</span><br><span class="line">			instance = <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="两种方式的对比："><a href="#两种方式的对比：" class="headerlink" title="两种方式的对比："></a>两种方式的对比：</h5><h6 id="饿汉式："><a href="#饿汉式：" class="headerlink" title="饿汉式："></a>饿汉式：</h6><ul>
<li>坏处：对象加载时间过长。</li>
<li>好处：饿汉式是线程安全的</li>
</ul>
<h6 id="懒汉式：-1"><a href="#懒汉式：-1" class="headerlink" title="懒汉式："></a>懒汉式：</h6><ul>
<li>好处：延迟对象的创建。</li>
<li>目前的写法坏处：线程不安全。—&gt;到多线程内容时，再修改</li>
</ul>
<h3 id="main-的使用说明"><a href="#main-的使用说明" class="headerlink" title="main()的使用说明"></a>main()的使用说明</h3><ol>
<li>main()方法作为程序的入口</li>
<li>main()方法也是一个普通的静态方法</li>
<li>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner）</li>
</ol>
<h4 id="如何将控制台获取的数据传给形参：String-args"><a href="#如何将控制台获取的数据传给形参：String-args" class="headerlink" title="如何将控制台获取的数据传给形参：String[] args?"></a>如何将控制台获取的数据传给形参：String[] args?</h4><p> 运行时：java 类名 “Tom” “Jerry” “123” “true”</p>
<p>sysout(args[0]);&#x2F;&#x2F;“Tom”</p>
<p>sysout(args[3]);&#x2F;&#x2F;“true”  –&gt;Boolean.parseBoolean(args[3]);</p>
<p>sysout(args[4]);&#x2F;&#x2F;报异常</p>
<p>小结：一叶知秋</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;<span class="comment">//方法体&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>权限修饰符：private 缺省 protected pubilc —-&gt;封装性</li>
<li>修饰符：static \ final \ abstract \native 可以用来修饰方法</li>
<li>返回值类型： 无返回值 &#x2F; 有返回值 –&gt;return</li>
<li>方法名：需要满足标识符命名的规则、规范；”见名知意”</li>
<li>形参列表：重载 vs 重写；参数的值传递机制；体现对象的多态性</li>
<li>方法体：来体现方法的功能</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">p.eat();</span><br><span class="line"><span class="comment">//p.earnMoney();</span></span><br><span class="line"></span><br><span class="line"><span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">man.eat();</span><br><span class="line">man.earnMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="类的结构：代码块（重要性较属性、方法、构造器差一些）"><a href="#类的结构：代码块（重要性较属性、方法、构造器差一些）" class="headerlink" title="类的结构：代码块（重要性较属性、方法、构造器差一些）"></a>类的结构：代码块（重要性较属性、方法、构造器差一些）</h3><h4 id="代码块的作用：用来初始化类、对象的信息"><a href="#代码块的作用：用来初始化类、对象的信息" class="headerlink" title="代码块的作用：用来初始化类、对象的信息"></a>代码块的作用：用来初始化类、对象的信息</h4><h4 id="分类：代码块要是使用修饰符，只能使用static"><a href="#分类：代码块要是使用修饰符，只能使用static" class="headerlink" title="分类：代码块要是使用修饰符，只能使用static"></a>分类：代码块要是使用修饰符，只能使用static</h4><h4 id="静态代码块-vs-非静态代码块"><a href="#静态代码块-vs-非静态代码块" class="headerlink" title="静态代码块  vs 非静态代码块"></a>静态代码块  vs 非静态代码块</h4><h5 id="静态代码块："><a href="#静态代码块：" class="headerlink" title="静态代码块："></a>静态代码块：</h5><ul>
<li>内部可以输出语句</li>
<li>随着类的加载而<i style="color: yellow;">执行</i>,而且只执行一次</li>
<li>作用：初始化类的信息</li>
<li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</li>
<li>静态代码块的执行要优先于非静态代码块的执行</li>
<li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li>
</ul>
<h5 id="非静态代码块："><a href="#非静态代码块：" class="headerlink" title="非静态代码块："></a>非静态代码块：</h5><ul>
<li>内部可以输出语句</li>
<li>随着对象的创建而<i style="color: yellow;">执行</i></li>
<li>每创建一个对象，就执行一次非静态代码块</li>
<li>作用：可以在创建对象时，对对象的属性等进行初始化</li>
<li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li>
<li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li>
</ul>
<h4 id="实例化子类对象时，涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序："><a href="#实例化子类对象时，涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序：" class="headerlink" title="实例化子类对象时，涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序："></a>实例化子类对象时，涉及到父类、子类中静态代码块、非静态代码块、构造器的加载顺序：</h4><p><i style="color: red;">由父及子，静态先行。</i></p>
<h4 id="属性的赋值顺序"><a href="#属性的赋值顺序" class="headerlink" title="属性的赋值顺序"></a>属性的赋值顺序</h4><p>①默认初始化</p>
<p>②显式初始化&#x2F;⑤在代码块中赋值</p>
<p>③构造器中初始化</p>
<p>④有了对象以后，可以通过”对象.属性”或”对象.方法”的方式，进行赋值</p>
<p>执行的先后顺序：① - ② &#x2F; ⑤ - ③ - ④</p>
<h3 id="关键字：final最终的"><a href="#关键字：final最终的" class="headerlink" title="关键字：final最终的"></a>关键字：final最终的</h3><h4 id="可以用来修饰：类、方法、变量"><a href="#可以用来修饰：类、方法、变量" class="headerlink" title="可以用来修饰：类、方法、变量"></a>可以用来修饰：类、方法、变量</h4><h4 id="具体的："><a href="#具体的：" class="headerlink" title="具体的："></a>具体的：</h4><ul>
<li><p>final 用来修饰一个类:此类不能被其他类所继承。<br>比如：String类、System类、StringBuffer类</p>
</li>
<li><p>final 用来修饰方法：表明此方法不可以被重写<br>比如：Object类中getClass();</p>
</li>
<li><p>final 用来修饰变量：此时的”变量”就称为是一个常量</p>
<p>final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化final修饰局部变量：</p>
<p>尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</p>
</li>
</ul>
<h4 id="static-final-用来修饰属性：全局常量"><a href="#static-final-用来修饰属性：全局常量" class="headerlink" title="static final 用来修饰属性：全局常量"></a>static final 用来修饰属性：全局常量</h4><h3 id="关键字：abstract"><a href="#关键字：abstract" class="headerlink" title="关键字：abstract"></a>关键字：abstract</h3><h4 id="可以用来修饰：类、方法"><a href="#可以用来修饰：类、方法" class="headerlink" title="可以用来修饰：类、方法"></a>可以用来修饰：类、方法</h4><h4 id="具体的：-1"><a href="#具体的：-1" class="headerlink" title="具体的："></a>具体的：</h4><h5 id="abstract修饰类：抽象类"><a href="#abstract修饰类：抽象类" class="headerlink" title="abstract修饰类：抽象类"></a>abstract修饰类：抽象类</h5><ul>
<li>此类不能实例化</li>
<li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</li>
<li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;抽象的使用前提：继承性</li>
</ul>
<h5 id="abstract修饰方法：抽象方法"><a href="#abstract修饰方法：抽象方法" class="headerlink" title="abstract修饰方法：抽象方法"></a>abstract修饰方法：抽象方法</h5><ul>
<li>抽象方法只方法的声明，没方法体</li>
<li>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。</li>
<li>若子类重写了父类中的所的抽象方法后，此子类方可实例化<br>若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰</li>
</ul>
<h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><ul>
<li>abstract不能用来修饰：属性、构造器等结构</li>
<li>abstract不能用来修饰私方法、静态方法、final的方法、final的类</li>
</ul>
<h4 id="abstract的应用举例："><a href="#abstract的应用举例：" class="headerlink" title="abstract的应用举例："></a>abstract的应用举例：</h4><h5 id="举例一："><a href="#举例一：" class="headerlink" title="举例一："></a>举例一：</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javaxia/master/1.bmp"
                     
                ></p>
<h5 id="举例二："><a href="#举例二：" class="headerlink" title="举例二："></a>举例二：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GeometricObject</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">GeometricObject</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="举例三："><a href="#举例三：" class="headerlink" title="举例三："></a>举例三：</h5><p>IO流中设计到的抽象类：InputStream&#x2F;OutputStream &#x2F; Reader &#x2F;Writer。在其内部<br>定义了抽象的read()、write()方法。</p>
<h4 id="模板方法的设计模式"><a href="#模板方法的设计模式" class="headerlink" title="模板方法的设计模式"></a>模板方法的设计模式</h4><h5 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h5><p><i style="color: red;">在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变<br>部分可以抽象出来，供不同子类实现。这就是一种模板模式。</i></p>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Template</span>&#123;</span><br><span class="line">	<span class="comment">//计算某段代码执行所需要花费的时间</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spendTime</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">		<span class="built_in">this</span>.code();<span class="comment">//不确定的部分、易变的部分</span></span><br><span class="line">		<span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">		System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubTemplate</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;i &lt;= <span class="number">1000</span>;i++)&#123;</span><br><span class="line">			<span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;j &lt;= Math.sqrt(i);j++)&#123;	</span><br><span class="line">				<span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">					isFlag = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">				System.out.println(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javaxia/master/1(1).bmp"
                     
                ></p>
<h3 id="关键字：interface接口"><a href="#关键字：interface接口" class="headerlink" title="关键字：interface接口"></a>关键字：interface接口</h3><h4 id="使用说明："><a href="#使用说明：" class="headerlink" title="使用说明："></a>使用说明：</h4><ol>
<li>接口使用interface来定义</li>
<li>Java中，接口和类是并列的两个结构</li>
<li>如何定义接口：定义接口中的成员<br>JDK7及以前：只能定义全局常量和抽象方法<br>    全局常量：public static final的.但是书写时，可以省略不写<br>    抽象方法：public abstract的<br>JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略</li>
<li>接口中不能定义构造器的！意味着接口不可以实例化</li>
<li>Java开发中，接口通过让类去实现(implements)的方式来使用.</li>
<li>如果实现类覆盖了接口中的所抽象方法，则此实现类就可以实例化</li>
<li>如果实现类没覆盖接口中所的抽象方法，则此实现类仍为一个抽象类</li>
<li>Java类可以实现多个接口   —&gt;弥补了Java单继承性的局限性</li>
<li>格式：class AA extends BB implements CC,DD,EE</li>
<li>接口与接口之间可以继承，而且可以多继承</li>
<li>接口的具体使用，体现多态性</li>
<li>接口，实际上可以看做是一种规范</li>
</ol>
<h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javaxia/master/1(2).bmp"
                     
                ></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferData</span><span class="params">(USB usb)</span>&#123;<span class="comment">//USB usb = new Flash();</span></span><br><span class="line">		usb.start();</span><br><span class="line">		System.out.println(<span class="string">&quot;具体传输数据的细节&quot;</span>);</span><br><span class="line">		usb.stop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">	<span class="comment">//常量：定义了长、宽、最大最小的传输速度等</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flash</span> <span class="keyword">implements</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;U盘开启工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;U盘结束工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Printer</span> <span class="keyword">implements</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;打印机开启工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;打印机结束工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="体会："><a href="#体会：" class="headerlink" title="体会："></a>体会：</h5><ul>
<li>接口使用上也满足多态性</li>
<li>接口，实际上就是定义了一种规范</li>
<li>开发中，体会面向接口编程！</li>
</ul>
<h4 id="体会面向接口编程的思想"><a href="#体会面向接口编程的思想" class="headerlink" title="体会面向接口编程的思想"></a>体会面向接口编程的思想</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javaxia/master/2.bmp"
                     
                ></p>
<h4 id="Java8中关于接口的新规范"><a href="#Java8中关于接口的新规范" class="headerlink" title="Java8中关于接口的新规范"></a>Java8中关于接口的新规范</h4><ol>
<li><p>接口中定义的静态方法，只能通过接口来调用。</p>
</li>
<li><p>通过实现类的对象，可以调用接口中的默认方法。<br>如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</p>
</li>
<li><p>如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。–&gt;类优先原</p>
</li>
<li><p>如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没重写此方法的情况下，报错。–&gt;接口冲突。这就需要我们必须在实现类中重写此方法</p>
</li>
<li><p>如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>&#123;</span><br><span class="line">		method3();<span class="comment">//调用自己定义的重写的方法</span></span><br><span class="line">		<span class="built_in">super</span>.method3();<span class="comment">//调用的是父类中声明的</span></span><br><span class="line">		<span class="comment">//调用接口中的默认方法</span></span><br><span class="line">		CompareA.<span class="built_in">super</span>.method3();</span><br><span class="line">		CompareB.<span class="built_in">super</span>.method3();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h4><h5 id="抽象类和接口的异同？"><a href="#抽象类和接口的异同？" class="headerlink" title="抽象类和接口的异同？"></a>抽象类和接口的异同？</h5><ul>
<li>相同点：不能实例化；都可以包含抽象方法的。</li>
<li>不同点：<br>1）把抽象类和接口(java7,java8,java9)的定义、内部结构解释说明<br>2）类：单继承性    接口：多继承</li>
</ul>
<h5 id="类与接口：多实现"><a href="#类与接口：多实现" class="headerlink" title="类与接口：多实现"></a>类与接口：多实现</h5><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><h5 id="解决的问题-1"><a href="#解决的问题-1" class="headerlink" title="解决的问题"></a>解决的问题</h5><p>代理模式是Java开发中使用较多的一种设计模式。代理设计就是为其他对象提供一种代理以控制对这个对象的访问。 </p>
<h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span> <span class="keyword">implements</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;真实的服务器访问网络&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyServer</span> <span class="keyword">implements</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> NetWork work;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ProxyServer</span><span class="params">(NetWork work)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.work = work;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;联网之前的检查工作&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">		check();</span><br><span class="line">		work.browse();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javaxia/master/1(3).bmp"
                     
                ></p>
<h4 id="工厂的设计模式"><a href="#工厂的设计模式" class="headerlink" title="工厂的设计模式"></a>工厂的设计模式</h4><h5 id="解决的问题-2"><a href="#解决的问题-2" class="headerlink" title="解决的问题"></a>解决的问题</h5><p>实现了创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p>
<h5 id="具体模式"><a href="#具体模式" class="headerlink" title="具体模式"></a>具体模式</h5><ul>
<li>简单工厂模式：用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码）</li>
<li>工厂方法模式：用来生产同一等级结构中的固定产品。（支持增加任意产品)</li>
<li>抽象工厂模式：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族)</li>
</ul>
<h3 id="类的结构：内部类类的第五个成员"><a href="#类的结构：内部类类的第五个成员" class="headerlink" title="类的结构：内部类类的第五个成员"></a>类的结构：内部类<i style="color: aquamarine;">类的第五个成员</i></h3><h4 id="定义：Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类"><a href="#定义：Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类" class="headerlink" title="定义：Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类."></a>定义：Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类.</h4><h4 id="内部类的分类："><a href="#内部类的分类：" class="headerlink" title="内部类的分类："></a>内部类的分类：</h4><p>成员内部类（静态、非静态 ） vs 局部内部类(方法内、代码块内、构造器内)</p>
<h4 id="成员内部类的理解："><a href="#成员内部类的理解：" class="headerlink" title="成员内部类的理解："></a>成员内部类的理解：</h4><ul>
<li>一方面，作为外部类的成员：</li>
</ul>
<blockquote>
<p>调用外部类的结构</p>
</blockquote>
<blockquote>
<p>可以被static修饰</p>
</blockquote>
<blockquote>
<p>可以被4种不同的权限修饰</p>
</blockquote>
<ul>
<li>另一方面，作为一个类：</li>
</ul>
<blockquote>
<p>类内可以定义属性、方法、构造器等</p>
</blockquote>
<blockquote>
<p>可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承</p>
</blockquote>
<blockquote>
<p>可以被abstract修饰</p>
</blockquote>
<h4 id="成员内部类："><a href="#成员内部类：" class="headerlink" title="成员内部类："></a>成员内部类：</h4><h5 id="如何创建成员内部类的对象？-静态的，非静态的"><a href="#如何创建成员内部类的对象？-静态的，非静态的" class="headerlink" title="如何创建成员内部类的对象？(静态的，非静态的)"></a>如何创建成员内部类的对象？(静态的，非静态的)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建静态的Dog内部类的实例(静态的成员内部类):</span></span><br><span class="line">Person.<span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>.Dog();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建非静态的Bird内部类的实例(非静态的成员内部类):</span></span><br><span class="line"><span class="comment">//Person.Bird bird = new Person.Bird();//错误的</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">Person.<span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> p.<span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br></pre></td></tr></table></figure>



<h5 id="如何在成员内部类中调用外部类的结构？"><a href="#如何在成员内部类中调用外部类的结构？" class="headerlink" title="如何在成员内部类中调用外部类的结构？"></a>如何在成员内部类中调用外部类的结构？</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小明&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非静态成员内部类</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">Bird</span>&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;杜鹃&quot;</span>;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(String name)</span>&#123;</span><br><span class="line">			System.out.println(name);<span class="comment">//方法的形参</span></span><br><span class="line">			System.out.println(<span class="built_in">this</span>.name);<span class="comment">//内部类的属性</span></span><br><span class="line">			System.out.println(Person.<span class="built_in">this</span>.name);<span class="comment">//外部类的属性</span></span><br><span class="line">		<span class="comment">//Person.this.eat();</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="局部内部类的使用："><a href="#局部内部类的使用：" class="headerlink" title="局部内部类的使用："></a>局部内部类的使用：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回一个实现了Comparable接口的类的对象</span></span><br><span class="line">	<span class="keyword">public</span> Comparable <span class="title function_">getComparable</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">//创建一个实现了Comparable接口的类:局部内部类</span></span><br><span class="line">		<span class="comment">//方式一：</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">MyComparable</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyComparable</span>();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//方式二：</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Comparable</span>()&#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="注意点：-1"><a href="#注意点：-1" class="headerlink" title="注意点："></a>注意点：</h5><ul>
<li>在局部内部类的方法中（比如：show如果调用局部内部类所声明的方法(比如：method)中的局部变量(比如：num)的话,要求此局部变量声明为final的。</li>
<li>jdk 7及之前版本：要求此局部变量显式的声明为final的</li>
<li>jdk 8及之后的版本：可以省略final的声明</li>
</ul>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>成员内部类和局部内部类，在编译以后，都会生成字节码文件。</p>
<h5 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h5><ul>
<li>成员内部类：外部类$内部类名.class</li>
<li>局部内部类：外部类$数字 内部类名.class</li>
</ul>
]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>后端学习的记录</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA之面向对象上</title>
    <url>/2022/11/17/JAVA%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8A/</url>
    <content><![CDATA[<h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><span id="more"></span>
<h4 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h4><p>编译完源程序以后，生成一个或多个字节码文件。<br>我们使用JVM中的类的加载器和解释器对生成的字节码文件进行解释运行。意味着，需要将字节码文件对应的类加载到内存中，涉及到内存解析。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/screenshot/master/1.bmp"
                     
                ></p>
<p>虚拟机栈，即为平时提到的栈结构。<i style="color: red;">我们将局部变量存储在栈结构中堆，我们将new出来的结构（比如：数组、对象）加载在对空间中。补充：对象的属性（非static的）加载在堆空间中。方法区：类的加载信息、常量池、静态域</i></p>
<h3 id="类的结构之一：属性"><a href="#类的结构之一：属性" class="headerlink" title="类的结构之一：属性"></a>类的结构之一：属性</h3><h4 id="对比：属性-vs-局部变量"><a href="#对比：属性-vs-局部变量" class="headerlink" title="对比：属性  vs  局部变量"></a>对比：属性  vs  局部变量</h4><h5 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h5><ul>
<li>定义变量的格式：数据类型  变量名 &#x3D; 变量值</li>
<li>先声明，后使用</li>
<li>1.3 变量都其对应的作用域</li>
</ul>
<h5 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h5><h6 id="在类中声明的位置的不同"><a href="#在类中声明的位置的不同" class="headerlink" title="在类中声明的位置的不同"></a>在类中声明的位置的不同</h6><ul>
<li>属性：直接定义在类的一对{}内</li>
<li>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</li>
</ul>
<h6 id="关于权限修饰符的不同"><a href="#关于权限修饰符的不同" class="headerlink" title="关于权限修饰符的不同"></a>关于权限修饰符的不同</h6><ul>
<li>属性：可以在声明属性时，指明其权限，使用权限修饰符。</li>
<li>常用的权限修饰符：private、public、缺省、protected  —&gt;封装性</li>
<li>目前，大家声明属性时，都使用缺省就可以了。</li>
<li>局部变量：不可以使用权限修饰符。</li>
</ul>
<h6 id="默认初始化值的情况："><a href="#默认初始化值的情况：" class="headerlink" title="默认初始化值的情况："></a>默认初始化值的情况：</h6><p>属性：类的属性，根据其类型，都默认初始化值。</p>
<ul>
<li><p>整型（byte、short、int、long：0）</p>
</li>
<li><p>浮点型（float、double：0.0）</p>
</li>
<li><p>字符型（char：0  （或’\u0000’））</p>
</li>
<li><p>布尔型（boolean：false）</p>
</li>
<li><p>引用数据类型（类、数组、接口：null）</p>
</li>
</ul>
<p>局部变量：没默认初始化值。</p>
<p>意味着，我们在调用局部变量之前，一定要显式赋值。</p>
<p>特别地：形参在调用时，我们赋值即可。</p>
<h6 id="在内存中加载的位置："><a href="#在内存中加载的位置：" class="headerlink" title="在内存中加载的位置："></a>在内存中加载的位置：</h6><p>属性：加载到堆空间中   （非static）</p>
<p>局部变量：加载到栈空间</p>
<h6 id="补充：回顾变量的分类："><a href="#补充：回顾变量的分类：" class="headerlink" title="补充：回顾变量的分类："></a>补充：回顾变量的分类：</h6><p>方式一：按照数据类型：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/screenshot/master/1(1).bmp"
                     
                ></p>
<p>方式二：按照在类中声明的位置：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/screenshot/master/2.bmp"
                     
                ></p>
<h3 id="类的结构之二：方法"><a href="#类的结构之二：方法" class="headerlink" title="类的结构之二：方法"></a>类的结构之二：方法</h3><h4 id="方法：描述类应该具的功能。"><a href="#方法：描述类应该具的功能。" class="headerlink" title="方法：描述类应该具的功能。"></a>方法：描述类应该具的功能。</h4><p>比如：Math类：sqrt()\random() ...</p>
<p>​			Scanner类：nextXxx() …</p>
<p>​			Arrays类：sort() \ binarySearch() \ toString() \ equals() \ …</p>
<h5 id="1-举例："><a href="#1-举例：" class="headerlink" title="1.举例："></a>1.举例：</h5><ul>
<li>public void eat(){}</li>
<li>public void sleep(int hour){}</li>
<li>public String getName(){}</li>
<li>public String getNation(String nation){}</li>
</ul>
<h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><h6 id="关于权限修饰符：默认方法的权限修饰符先都使用public"><a href="#关于权限修饰符：默认方法的权限修饰符先都使用public" class="headerlink" title="关于权限修饰符：默认方法的权限修饰符先都使用public"></a>关于权限修饰符：默认方法的权限修饰符先都使用public</h6><p>Java规定的4种权限修饰符：private、public、缺省、protected  –&gt;封装性再细说</p>
<h6 id="返回值类型：-返回值-vs-没返回值"><a href="#返回值类型：-返回值-vs-没返回值" class="headerlink" title="返回值类型： 返回值  vs 没返回值"></a>返回值类型： 返回值  vs 没返回值</h6><p>如果方法返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用return关键字来返回指定类型的变量或常量：“return 数据”。</p>
<p>如果方法没返回值，则方法声明时，使用void来表示。通常，没返回值的方法中，就不需要使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。</p>
<h6 id="我们定义方法该不该返回值？"><a href="#我们定义方法该不该返回值？" class="headerlink" title="我们定义方法该不该返回值？"></a>我们定义方法该不该返回值？</h6><ul>
<li>题目要求</li>
<li>凭经验：具体问题具体分析</li>
</ul>
<h6 id="方法名：属于标识符，遵循标识符的规则和规范，“见名知意”"><a href="#方法名：属于标识符，遵循标识符的规则和规范，“见名知意”" class="headerlink" title="方法名：属于标识符，遵循标识符的规则和规范，“见名知意”"></a>方法名：属于标识符，遵循标识符的规则和规范，“见名知意”</h6><h6 id="形参列表：-方法可以声明0个，1个，或多个形参。"><a href="#形参列表：-方法可以声明0个，1个，或多个形参。" class="headerlink" title="形参列表： 方法可以声明0个，1个，或多个形参。"></a>形参列表： 方法可以声明0个，1个，或多个形参。</h6><p>格式：数据类型1 形参1,数据类型2 形参2,…</p>
<p>我们定义方法时，该不该定义形参？<br>① 题目要求② 凭经验：具体问题具体分析</p>
<p>方法体：方法功能的体现。 	</p>
<h5 id="方法的使用中，可以调用当前类的属性或方法"><a href="#方法的使用中，可以调用当前类的属性或方法" class="headerlink" title="方法的使用中，可以调用当前类的属性或方法"></a>方法的使用中，可以调用当前类的属性或方法</h5><p>特殊的：方法A中又调用了方法A:递归方法。</p>
<p>方法中，不可以定义方法。</p>
<h4 id="关键字：return"><a href="#关键字：return" class="headerlink" title="关键字：return"></a>关键字：return</h4><ol>
<li><p>使用范围：使用在方法体中</p>
</li>
<li><p>作用：① 结束方法</p>
<p>​		    ② 针对于返回值类型的方法，使用”return 数据”方法返回所要的数据。</p>
</li>
<li><p>3.注意点：return关键字后面不可以声明执行语句。</p>
</li>
</ol>
<h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>略</p>
<h4 id="可变个数形参的方法"><a href="#可变个数形参的方法" class="headerlink" title="可变个数形参的方法"></a>可变个数形参的方法</h4><h5 id="1-使用说明："><a href="#1-使用说明：" class="headerlink" title="1.使用说明："></a>1.使用说明：</h5><h6 id="jdk-5-0新增的内容"><a href="#jdk-5-0新增的内容" class="headerlink" title="jdk 5.0新增的内容"></a>jdk 5.0新增的内容</h6><p>具体使用：</p>
<ul>
<li>可变个数形参的格式：数据类型 … 变量名</li>
<li>当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个,2个，。。。</li>
<li>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载</li>
<li>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存。</li>
<li>可变个数形参在方法的形参中，必须声明在末尾</li>
<li>可变个数形参在方法的形参中,最多只能声明一个可变形参。</li>
</ul>
<h5 id="2-举例说明："><a href="#2-举例说明：" class="headerlink" title="2.举例说明："></a>2.举例说明：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String s)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;show(String)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String ... strs)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;show(String ... strs)&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; strs.length;i++)&#123;</span><br><span class="line">		System.out.println(strs[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不能与上一个方法同时存在</span></span><br><span class="line"><span class="comment">//	public void show(String[] strs)&#123;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br></pre></td></tr></table></figure>
<h6 id="调用时："><a href="#调用时：" class="headerlink" title="调用时："></a>调用时：</h6><p>​		<br>​		</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">test.show(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">test.show(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">test.show();</span><br><span class="line">test.show(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="java的值传递机制"><a href="#java的值传递机制" class="headerlink" title="java的值传递机制"></a>java的值传递机制</h4><h5 id="1-针对于方法内变量的赋值举例："><a href="#1-针对于方法内变量的赋值举例：" class="headerlink" title="1.针对于方法内变量的赋值举例："></a>1.针对于方法内变量的赋值举例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;***********基本数据类型：****************&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> m;</span><br><span class="line">System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);	</span><br><span class="line">n = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">System.out.println(<span class="string">&quot;***********引用数据类型：****************&quot;</span>);</span><br><span class="line"><span class="type">Order</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">o1.orderId = <span class="number">1001</span>;</span><br><span class="line"><span class="type">Order</span> <span class="variable">o2</span> <span class="operator">=</span> o1;<span class="comment">//赋值以后，o1和o2的地址值相同，都指向了堆空间中同一个对象实体。</span></span><br><span class="line">System.out.println(<span class="string">&quot;o1.orderId = &quot;</span> + o1.orderId + <span class="string">&quot;,o2.orderId = &quot;</span> +o2.orderId);</span><br><span class="line">o2.orderId = <span class="number">1002</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;o1.orderId = &quot;</span> + o1.orderId + <span class="string">&quot;,o2.orderId = &quot;</span> +o2.orderId);</span><br></pre></td></tr></table></figure>

<h6 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h6><ul>
<li>如果变量是基本数据类型，此时赋值的是变量所保存的数据值。</li>
<li>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</li>
</ul>
<h4 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h4><h5 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h5><p>递归方法：一个方法体内调用它自身。</p>
<h5 id="2-如何理解递归方法？"><a href="#2-如何理解递归方法？" class="headerlink" title="2.如何理解递归方法？"></a>2.如何理解递归方法？</h5><ul>
<li>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</li>
<li>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</li>
</ul>
<p>3.举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例1：计算1-n之间所自然数的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;<span class="comment">// 3</span></span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> n + getSum(n - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例2：计算1-n之间所自然数的乘积:n!</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> n * getSum1(n - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例3：已知一个数列：f(0) = 1,f(1) = 4,f(n+2)=2*f(n+1) + f(n),</span></span><br><span class="line"><span class="comment">//其中n是大于0的整数，求f(10)的值。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//return f(n + 2) - 2 * f(n + 1);</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>*f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//例4：斐波那契数列</span></span><br><span class="line"><span class="comment">//例5：汉诺塔问题</span></span><br><span class="line"><span class="comment">//例6：快排</span></span><br></pre></td></tr></table></figure>
<h3 id="面向对象的特征一：封装性"><a href="#面向对象的特征一：封装性" class="headerlink" title="面向对象的特征一：封装性"></a>面向对象的特征一：封装性</h3><h4 id="1-为什么要引入封装性？"><a href="#1-为什么要引入封装性？" class="headerlink" title="1.为什么要引入封装性？"></a>1.为什么要引入封装性？</h4><h5 id="我们程序设计追求“高内聚，低耦合”。"><a href="#我们程序设计追求“高内聚，低耦合”。" class="headerlink" title="我们程序设计追求“高内聚，低耦合”。"></a>我们程序设计追求“高内聚，低耦合”。</h5><ul>
<li>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；</li>
<li>低耦合 ：仅对外暴露少量的方法用于使用。</li>
</ul>
<h5 id="隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。"><a href="#隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。" class="headerlink" title="隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。"></a>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</h5><h4 id="2-问题引入："><a href="#2-问题引入：" class="headerlink" title="2.问题引入："></a>2.问题引入：</h4><p>当我们创建一个类的对象以后，我们可以通过”对象.属性”的方式，对对象的属性进行赋值。这里，赋值操作要受到属性的数据类型和存储范围的制约。除此之外，没其他制约条件。但是，在实际问题中，我们往往需要给属性赋值加入额外的限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行限制条件的添加。（比如：setLegs()同时，我们需要避免用户再使用”对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的(private).<br>  –&gt;此时，针对于属性就体现了封装性。</p>
<h4 id="3-封装性思想具体的代码体现："><a href="#3-封装性思想具体的代码体现：" class="headerlink" title="3.封装性思想具体的代码体现："></a>3.封装性思想具体的代码体现：</h4><ul>
<li>将类的属性xxx私化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>体现二：不对外暴露的私有的方法</li>
<li>体现三：单例模式（将构造器私有化）</li>
<li>体现四：如果不希望类在包外被调用，可以将类设置为缺省的。</li>
</ul>
<h4 id="4-Java规定的四种权限修饰符"><a href="#4-Java规定的四种权限修饰符" class="headerlink" title="4.Java规定的四种权限修饰符"></a>4.Java规定的四种权限修饰符</h4><h5 id="4-1-权限从小到大顺序为：private-lt-缺省-lt-protected-lt-public"><a href="#4-1-权限从小到大顺序为：private-lt-缺省-lt-protected-lt-public" class="headerlink" title="4.1 权限从小到大顺序为：private &lt;  缺省 &lt; protected &lt; public"></a>4.1 权限从小到大顺序为：private &lt;  缺省 &lt; protected &lt; public</h5><h5 id="4-2-具体的修饰范围："><a href="#4-2-具体的修饰范围：" class="headerlink" title="4.2 具体的修饰范围："></a>4.2 具体的修饰范围：</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/screenshot/master/1(2).bmp"
                     
                ></p>
<h5 id="4-3-权限修饰符可用来修饰的结构说明："><a href="#4-3-权限修饰符可用来修饰的结构说明：" class="headerlink" title="4.3 权限修饰符可用来修饰的结构说明："></a>4.3 权限修饰符可用来修饰的结构说明：</h5><p>4种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类<br>修饰类的话，只能使用：缺省、public</p>
<h3 id="类的结构之三：构造器"><a href="#类的结构之三：构造器" class="headerlink" title="类的结构之三：构造器"></a>类的结构之三：构造器</h3><h4 id="属性赋值的顺序"><a href="#属性赋值的顺序" class="headerlink" title="属性赋值的顺序"></a>属性赋值的顺序</h4><p>① 默认初始化</p>
<p>② 显式初始化</p>
<p>③ 构造器中初始化</p>
<p>④ 通过”对象.方法” 或 “对象.属性”的方式，赋值</p>
<p>以上操作的先后顺序：① - ② - ③ - ④ </p>
<h4 id="JavaBean的概念"><a href="#JavaBean的概念" class="headerlink" title="JavaBean的概念"></a>JavaBean的概念</h4><h5 id="所谓JavaBean，是指符合如下标准的Java类："><a href="#所谓JavaBean，是指符合如下标准的Java类：" class="headerlink" title="所谓JavaBean，是指符合如下标准的Java类："></a>所谓JavaBean，是指符合如下标准的Java类：</h5><ul>
<li>类是公共的</li>
<li>一个无参的公共的构造器</li>
<li>属性，且对应的get、set方法</li>
</ul>
<h3 id="关键字：this"><a href="#关键字：this" class="headerlink" title="关键字：this"></a>关键字：this</h3><h4 id="1-可以调用的结构：属性、方法；构造器"><a href="#1-可以调用的结构：属性、方法；构造器" class="headerlink" title="1.可以调用的结构：属性、方法；构造器"></a>1.可以调用的结构：属性、方法；构造器</h4><h4 id="2-this调用属性、方法："><a href="#2-this调用属性、方法：" class="headerlink" title="2.this调用属性、方法："></a>2.this调用属性、方法：</h4><p>this理解为：当前对象  或 当前正在创建的对象</p>
<ul>
<li><p>2.1在类的方法中，我们可以使用”this.属性”或”this.方法”的方式，调用当前对象属性或方法。但是，通常情况下，我们都择省略”this.”。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</p>
</li>
<li><p>2.2 在类的构造器中，我们可以使用”this.属性”或”this.方法”的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都择省略”this.”。</p>
</li>
<li><p>特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</p>
</li>
</ul>
<h4 id="3-this调用构造器："><a href="#3-this调用构造器：" class="headerlink" title="3.this调用构造器："></a>3.this调用构造器：</h4><ul>
<li>我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器</li>
<li>构造器中不能通过”this(形参列表)”方式调用自己</li>
<li>如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”</li>
<li>规定：”this(形参列表)”必须声明在当前构造器的首行</li>
<li>构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</li>
</ul>
<h3 id="关键字：package-x2F-import"><a href="#关键字：package-x2F-import" class="headerlink" title="关键字：package&#x2F;import"></a>关键字：package&#x2F;import</h3><h4 id="package的使用"><a href="#package的使用" class="headerlink" title="package的使用"></a>package的使用</h4><h5 id="使用说明："><a href="#使用说明：" class="headerlink" title="使用说明："></a>使用说明：</h5><ul>
<li>1.为了更好的实现项目中类的管理，提供包的概念</li>
<li>2.使用package声明类或接口所属的包，声明在源文件的首行</li>
<li>3.包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</li>
<li>4.每”.”一次，就代表一层文件目录。</li>
</ul>
<h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><h6 id="举例一：某航运软件系统包括：一组域对象、GUI和reports子系统"><a href="#举例一：某航运软件系统包括：一组域对象、GUI和reports子系统" class="headerlink" title="举例一：某航运软件系统包括：一组域对象、GUI和reports子系统"></a>举例一：某航运软件系统包括：一组域对象、GUI和reports子系统</h6><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/screenshot/master/1(3).bmp"
                     
                ></p>
<h6 id="举例二：MVC设计模式"><a href="#举例二：MVC设计模式" class="headerlink" title="举例二：MVC设计模式"></a>举例二：MVC设计模式</h6><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/screenshot/master/2(1).bmp"
                     
                ></p>
<h5 id="1-3-JDK中的主要包介绍："><a href="#1-3-JDK中的主要包介绍：" class="headerlink" title="1.3 JDK中的主要包介绍："></a>1.3 JDK中的主要包介绍：</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/screenshot/master/3.bmp"
                     
                ></p>
<h4 id="import的使用："><a href="#import的使用：" class="headerlink" title="import的使用："></a>import的使用：</h4><h5 id="import-导入"><a href="#import-导入" class="headerlink" title="import:导入"></a>import:导入</h5><ul>
<li>在源文件中显式的使用import结构导入指定包下的类、接口</li>
<li>声明在包的声明和类的声明之间</li>
<li>如果需要导入多个结构，则并列写出即可</li>
<li>可以使用”xxx.*”的方式，表示可以导入xxx包下的所结构</li>
<li>如果使用的类或接口是java.lang包下定义的，则可以省略import结构</li>
<li>如果使用的类或接口是本包下定义的，则可以省略import结构</li>
<li>如果在源文件中，使用了不同包下的同名的类，则必须至少一个类需要以全类名的方式显示。</li>
<li>使用”xxx.*”方式表明可以调用xxx包下的所结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入</li>
<li>import static:导入指定类或接口中的静态结构:属性或方法。</li>
</ul>
]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>后端学习的记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux指令的学习</title>
    <url>/2022/12/03/Linux%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Linux指令"><a href="#Linux指令" class="headerlink" title="Linux指令"></a>Linux指令</h1><h2 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h2><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a</td>
<td align="center">在光标所在字符后插入</td>
</tr>
<tr>
<td align="center">A</td>
<td align="center">在光标所在行尾插入</td>
</tr>
<tr>
<td align="center">i</td>
<td align="center">在光标所在字符前插入</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">在光标所在行首插入</td>
</tr>
<tr>
<td align="center">o</td>
<td align="center">在光标下插入新行</td>
</tr>
<tr>
<td align="center">O</td>
<td align="center">在光标上插入新行</td>
</tr>
</tbody></table>
<h6 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h6><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">gg</td>
<td align="center">移动到文件头</td>
</tr>
<tr>
<td align="center">G &#x2F; Shift+g</td>
<td align="center">移动到文件尾</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">移动到行首</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">移动到行尾</td>
</tr>
<tr>
<td align="center">:n</td>
<td align="center">移动到第几行</td>
</tr>
</tbody></table>
<h6 id="删除-x2F-剪贴-x2F-撤销-x2F-替换-x2F-查找"><a href="#删除-x2F-剪贴-x2F-撤销-x2F-替换-x2F-查找" class="headerlink" title="删除&#x2F;剪贴&#x2F;撤销&#x2F;替换&#x2F;查找"></a>删除&#x2F;剪贴&#x2F;撤销&#x2F;替换&#x2F;查找</h6><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x</td>
<td align="center">删除单个字母</td>
</tr>
<tr>
<td align="center">nx</td>
<td align="center">删除n个字母</td>
</tr>
<tr>
<td align="center">dd</td>
<td align="center">删除单行</td>
</tr>
<tr>
<td align="center">ndd</td>
<td align="center">删除多行</td>
</tr>
<tr>
<td align="center">:n1,n2d</td>
<td align="center">删除指定范围的行</td>
</tr>
<tr>
<td align="center">p<!--小写--></td>
<td align="center">粘贴到光标后</td>
</tr>
<tr>
<td align="center">P<!--大写--></td>
<td align="center">粘贴到光标前</td>
</tr>
<tr>
<td align="center">dG</td>
<td align="center">从光标所在行删除到文件尾</td>
</tr>
<tr>
<td align="center">yy</td>
<td align="center">复制单行</td>
</tr>
<tr>
<td align="center">nyy</td>
<td align="center">复制多行</td>
</tr>
<tr>
<td align="center">u</td>
<td align="center">撤销</td>
</tr>
<tr>
<td align="center">Ctrl + r</td>
<td align="center">反撤销</td>
</tr>
<tr>
<td align="center">r</td>
<td align="center">替换光标所在处的字符</td>
</tr>
<tr>
<td align="center">R</td>
<td align="center">从光标所在处开始替换字符，按Esc结束</td>
</tr>
<tr>
<td align="center">&#x2F;查找内容</td>
<td align="center">从光标所在行向下查找</td>
</tr>
<tr>
<td align="center">?查找内容</td>
<td align="center">从光标所在行向上搜索</td>
</tr>
<tr>
<td align="center">n</td>
<td align="center">下一个</td>
</tr>
<tr>
<td align="center">N</td>
<td align="center">上一个</td>
</tr>
<tr>
<td align="center">:1,10s&#x2F;old&#x2F;new&#x2F;g</td>
<td align="center">替换1到10行的所有old为new</td>
</tr>
<tr>
<td align="center">:%s&#x2F;old&#x2F;new&#x2F;g</td>
<td align="center">替换整个文件的old为new</td>
</tr>
<tr>
<td align="center">:1,10s&#x2F;^&#x2F;#&#x2F;g</td>
<td align="center">注释1到10行</td>
</tr>
<tr>
<td align="center">:1,10s&#x2F;^#&#x2F;&#x2F;g</td>
<td align="center">取消注释</td>
</tr>
<tr>
<td align="center">:1,10s&#x2F;^&#x2F;//&#x2F;g</td>
<td align="center">1到10行，行首加入&#x2F;&#x2F;</td>
</tr>
<tr>
<td align="center">:1,10s&#x2F;^&#x2F;//&#x2F;&#x2F;g</td>
<td align="center">取消1到10行行首的&#x2F;&#x2F;</td>
</tr>
</tbody></table>
<h5 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h5><p>类似记事本</p>
<h5 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h5><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">:w</td>
<td align="center">保存不退出</td>
</tr>
<tr>
<td align="center">:w 新文件名</td>
<td align="center">把文件另存为新文件</td>
</tr>
<tr>
<td align="center">:q</td>
<td align="center">不保存退出</td>
</tr>
<tr>
<td align="center">:wq</td>
<td align="center">保存退出</td>
</tr>
<tr>
<td align="center">:!</td>
<td align="center">强制</td>
</tr>
<tr>
<td align="center">:q</td>
<td align="center">强制不保存退出</td>
</tr>
<tr>
<td align="center">:wq!</td>
<td align="center">强制保存退出（非root对root用户文件）</td>
</tr>
</tbody></table>
<h2 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync				功能描述：将数据由内存同步到硬盘中</span><br><span class="line">halt				功能描述：停机，关闭系统，但不断电</span><br><span class="line">poweroff			功能描述：关机，断电</span><br><span class="line">reboot				功能描述：就是重启，等同于shutdown 											-r now</span><br><span class="line">shutdown [选项] 时间</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-H</td>
<td align="center">相当于 –halt，停机</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">-r &#x3D; reboot 重启</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">now</td>
<td align="center">立刻关机</td>
</tr>
<tr>
<td align="center">时间</td>
<td align="center">等待多久后关机（时间单位时分钟）</td>
</tr>
</tbody></table>
<h2 id="shell整体及帮助"><a href="#shell整体及帮助" class="headerlink" title="shell整体及帮助"></a>shell整体及帮助</h2><h5 id="man-x2F-help-获得帮助信息"><a href="#man-x2F-help-获得帮助信息" class="headerlink" title="man&#x2F;help 获得帮助信息"></a>man&#x2F;help 获得帮助信息</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man [命令或配置文件]		功能描述：获得帮助信息</span><br><span class="line">help 命令			功能描述：获得shell内置命令的帮助信息</span><br></pre></td></tr></table></figure>

<h2 id="文件类"><a href="#文件类" class="headerlink" title="文件类"></a>文件类</h2><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><h5 id="pwd-显示当前工作目录的绝对路径"><a href="#pwd-显示当前工作目录的绝对路径" class="headerlink" title="pwd 显示当前工作目录的绝对路径"></a>pwd 显示当前工作目录的绝对路径<!--prit working directory--></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd 功能描述：显示当前工作目录的绝对路径</span><br></pre></td></tr></table></figure>

<h5 id="ls-列出目录的内容"><a href="#ls-列出目录的内容" class="headerlink" title="ls 列出目录的内容"></a>ls 列出目录的内容<!--list--></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls [选项][目录或是文件]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-a</td>
<td align="center">全部的文件，连同隐藏档（开头为 . 的文件）一起列出来（常用）</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="center">长数据串列出，包含文件的属性与权限等；（常用）等价于”ll“</td>
</tr>
<tr>
<td align="center">-lh</td>
<td align="center">大小更人性</td>
</tr>
</tbody></table>
<p>说明每行列出的信息依次时：<strong>文件类型与权限 连接数 文件属主 文件属组 文件大小用byte来表示 建立或最近修改的时间 名字</strong></p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h2 id="mkdir-文件-创建新文件夹"><a href="#mkdir-文件-创建新文件夹" class="headerlink" title="mkdir 文件 创建新文件夹"></a>mkdir 文件 创建新文件夹</h2><h5 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch 创建文件"></a>touch 创建文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch 文件名称		touch &#123;1..100&#125;.txt 建一百个文件</span><br><span class="line">mkdir 文件夹名称   -p 依次</span><br></pre></td></tr></table></figure>

<h5 id="cp-复制文件夹或目录"><a href="#cp-复制文件夹或目录" class="headerlink" title="cp 复制文件夹或目录"></a>cp 复制文件夹或目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp [选项] source desk</span><br><span class="line">/*强制不提示：cp [选项] source desk*/</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-r</td>
<td align="center">递归复制整个文件夹</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">source</td>
<td align="center">源文件</td>
</tr>
<tr>
<td align="center">dest</td>
<td align="center">目标文件</td>
</tr>
</tbody></table>
<h5 id="rm-删除文件或目录"><a href="#rm-删除文件或目录" class="headerlink" title="rm 删除文件或目录"></a>rm 删除文件或目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm [选项] deleteFile</span><br><span class="line">/*功能描述：递归删除目录中所有内容*/</span><br><span class="line">著名代码：</span><br><span class="line">rm -rf /*</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-r</td>
<td align="center">递归删除目录中所有内容</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">强制执行删除操作，而不提示用于进行确认。</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">显示指令的详细执行过程</td>
</tr>
</tbody></table>
<h5 id="mv-移动-x2F-重命名文件与目录"><a href="#mv-移动-x2F-重命名文件与目录" class="headerlink" title="mv 移动&#x2F;重命名文件与目录"></a>mv 移动&#x2F;重命名文件与目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv oldNameFile NewNameFile		功能描述：重命名</span><br><span class="line">mv/temp/movefile/targetFolder	功能描述：移动文件</span><br></pre></td></tr></table></figure>

<h5 id="cat-查看文件内容（查看比较小的文件）"><a href="#cat-查看文件内容（查看比较小的文件）" class="headerlink" title="cat 查看文件内容（查看比较小的文件）"></a>cat 查看文件内容（查看比较小的文件）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat [选项] 要查看的文件     --&gt; 一般查看比较小的文件</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>显示所有行的行号，包括空行</td>
</tr>
</tbody></table>
<h5 id="more-文件内容分屏查看器"><a href="#more-文件内容分屏查看器" class="headerlink" title="more 文件内容分屏查看器"></a>more 文件内容分屏查看器</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">more 要查看的文件</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">space</td>
<td align="center">向下翻一页</td>
</tr>
<tr>
<td align="center">Enter</td>
<td align="center">向下翻一行</td>
</tr>
<tr>
<td align="center">q</td>
<td align="center">离开more，不再显示该文件内容</td>
</tr>
<tr>
<td align="center">Ctrl+f</td>
<td align="center">向下滚动一屏</td>
</tr>
<tr>
<td align="center">Ctrl+b</td>
<td align="center">返回上一屏</td>
</tr>
<tr>
<td align="center">&#x3D;</td>
<td align="center">输出当前行的行号</td>
</tr>
<tr>
<td align="center">:f</td>
<td align="center">输出文件名和当前行的行号</td>
</tr>
</tbody></table>
<h5 id="less-分屏显示文件内容（more加强版）"><a href="#less-分屏显示文件内容（more加强版）" class="headerlink" title="less 分屏显示文件内容（more加强版）"></a>less 分屏显示文件内容（more加强版）</h5><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">space</td>
<td align="center">向下翻动一页</td>
</tr>
<tr>
<td align="center">pagedown</td>
<td align="center">向下翻动一页</td>
</tr>
<tr>
<td align="center">pageup</td>
<td align="center">向上翻动一页</td>
</tr>
<tr>
<td align="center">&#x2F;字串</td>
<td align="center">向下搜寻‘字串’  n:向下查找 N:向上查找</td>
</tr>
<tr>
<td align="center">q</td>
<td align="center">离开less这个程序</td>
</tr>
<tr>
<td align="center">Shift+g</td>
<td align="center">到行末</td>
</tr>
</tbody></table>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h5 id="echo-输出内容到控制台"><a href="#echo-输出内容到控制台" class="headerlink" title="echo 输出内容到控制台"></a>echo 输出内容到控制台</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo [选项] [输出内容]     echo $ 看环境变量</span><br></pre></td></tr></table></figure>

<p>echo “Hello World” &gt;&gt; 1.txt		追加</p>
<p>echo “Hello World” &gt; 1.txt			覆盖</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-e</td>
<td align="center">支持反斜线控制的字符转换</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">控制字符</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\\</td>
<td align="center">输出\本身</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">换行福</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">制表符，也就是Tab</td>
</tr>
</tbody></table>
<h5 id="head-显示文件头部内容"><a href="#head-显示文件头部内容" class="headerlink" title="head 显示文件头部内容"></a>head 显示文件头部内容</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head 文件      功能描述：查看文件头10行内容</span><br><span class="line">head -n 5文件		 功能描述查看文件头5行内容</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n&lt;行数&gt;</td>
<td align="center">置顶显示头部内容的行数</td>
</tr>
</tbody></table>
<h5 id="tail-输出文件尾部内容"><a href="#tail-输出文件尾部内容" class="headerlink" title="tail 输出文件尾部内容"></a>tail 输出文件尾部内容</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail 文件			功能描述：查看文件尾部10行内容</span><br><span class="line">tail -n 5 文件	功能描述：查看尾部5行内容</span><br><span class="line">tail -f 文件		功能描述：实时追踪该文档的所有更新</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n &lt;行数&gt;</td>
<td align="center">置顶显示头部内容的行数</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">显示文件最新追加的内容，监视文件变化</td>
</tr>
<tr>
<td align="center">Ctrl+s</td>
<td align="center">暂停监视</td>
</tr>
<tr>
<td align="center">Ctrl+q</td>
<td align="center">继续监视</td>
</tr>
</tbody></table>
<h5 id="ln-软链接（win的快捷方式）"><a href="#ln-软链接（win的快捷方式）" class="headerlink" title="ln 软链接（win的快捷方式）"></a>ln 软链接（win的快捷方式）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s[原文件或目录] [软链接名]	功能描述：给原文件创建一									   个软链接</span><br><span class="line"></span><br><span class="line">用绝对路径！！！</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">rm -rf 软链接名</td>
<td align="center">删除软链接</td>
</tr>
<tr>
<td align="center">rm -rf 软链接名&#x2F;</td>
<td align="center">删除软链接和其对应的真实目录下的内容删掉</td>
</tr>
<tr>
<td align="center">cd -P 软链接名</td>
<td align="center">进入软链接实际物理路径</td>
</tr>
</tbody></table>
<h5 id="history-查看已经执行过的历史命令"><a href="#history-查看已经执行过的历史命令" class="headerlink" title="history 查看已经执行过的历史命令"></a>history 查看已经执行过的历史命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history -c		清除历史命令</span><br></pre></td></tr></table></figure>

<h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><h3 id="date-显示当前时间"><a href="#date-显示当前时间" class="headerlink" title="date 显示当前时间"></a>date 显示当前时间</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">date</td>
<td align="center">当前时间</td>
</tr>
<tr>
<td align="center">date +%Y</td>
<td align="center">当前年份</td>
</tr>
<tr>
<td align="center">date +%y</td>
<td align="center">年份后两位</td>
</tr>
<tr>
<td align="center">date +%m</td>
<td align="center">当前月份</td>
</tr>
<tr>
<td align="center">date +%d</td>
<td align="center">当前是哪一天</td>
</tr>
<tr>
<td align="center">date +%s</td>
<td align="center">时间戳</td>
</tr>
<tr>
<td align="center">date “+%Y-%m-%d%H:%M:%S”</td>
<td align="center">年月日时分秒</td>
</tr>
</tbody></table>
<h3 id="date-显示非当前时间"><a href="#date-显示非当前时间" class="headerlink" title="date 显示非当前时间"></a>date 显示非当前时间</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">date -d ‘1 days ago’</td>
<td align="center">前一天</td>
</tr>
<tr>
<td align="center">date -d ‘-1 days ago’</td>
<td align="center">明天</td>
</tr>
</tbody></table>
<h3 id="date设置系统时间"><a href="#date设置系统时间" class="headerlink" title="date设置系统时间"></a>date设置系统时间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date -s &quot;字符串时间&quot;</span><br><span class="line">date -s &quot;2022-08-26 17:18:00&quot;</span><br></pre></td></tr></table></figure>

<h3 id="cal-查看日历"><a href="#cal-查看日历" class="headerlink" title="cal 查看日历"></a>cal 查看日历</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cal [选项]</span><br><span class="line">	选项：具体某一年 功能：显示这一年的日历</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>具体某一年eg：2000</td>
<td>显示2000年的日历</td>
</tr>
<tr>
<td>-y</td>
<td>显示今年的日历</td>
</tr>
<tr>
<td>-数字</td>
<td>几个月的日历</td>
</tr>
<tr>
<td>-m</td>
<td>周一在前</td>
</tr>
</tbody></table>
<h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><h3 id="useradd-添加新用户"><a href="#useradd-添加新用户" class="headerlink" title="useradd 添加新用户"></a>useradd 添加新用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd 用户名				功能：添加新用户</span><br><span class="line">useradd -g 组名 用户名	   功能添加用户到某个组</span><br><span class="line">useradd -d /home/用户名 用户文件夹名		更改文件夹名但用户名不该</span><br></pre></td></tr></table></figure>

<h3 id="passwd-设置用户密码"><a href="#passwd-设置用户密码" class="headerlink" title="passwd 设置用户密码"></a>passwd 设置用户密码</h3><h3 id="id-查看用户是否存在"><a href="#id-查看用户是否存在" class="headerlink" title="id 查看用户是否存在"></a>id 查看用户是否存在</h3><h3 id="cat-x2F-etc-x2F-passwd-查看创建了哪些用户"><a href="#cat-x2F-etc-x2F-passwd-查看创建了哪些用户" class="headerlink" title="cat &#x2F;etc&#x2F;passwd 查看创建了哪些用户"></a>cat &#x2F;etc&#x2F;passwd 查看创建了哪些用户</h3><h3 id="su-切换用户"><a href="#su-切换用户" class="headerlink" title="su 切换用户"></a>su 切换用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su [用户名]			功能：切换用户</span><br><span class="line">exit 				  功能：退出当前用户到上一个用户	</span><br></pre></td></tr></table></figure>

<h3 id="who-查看登录信息"><a href="#who-查看登录信息" class="headerlink" title="who 查看登录信息"></a>who 查看登录信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">who am i		功能：详细信息登录用户信息</span><br><span class="line">whoami			功能：当前用户信息</span><br><span class="line">/etc/passsd</span><br><span class="line">/etc/shadow</span><br></pre></td></tr></table></figure>

<h3 id="sudo-设置普通用户具有root权限"><a href="#sudo-设置普通用户具有root权限" class="headerlink" title="sudo 设置普通用户具有root权限"></a>sudo 设置普通用户具有root权限</h3><h4 id="添加tom的root权限"><a href="#添加tom的root权限" class="headerlink" title="添加tom的root权限"></a>添加tom的root权限</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">修改配置文件</span><br><span class="line">vim /etc/sudoers</span><br><span class="line">复制root行插入其下改为tom</span><br><span class="line">:wq!保存</span><br></pre></td></tr></table></figure>

<h3 id="usermod-修改用户"><a href="#usermod-修改用户" class="headerlink" title="usermod 修改用户"></a>usermod 修改用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod -g 用户组用户名</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-g</td>
<td>修改用户的初始登录组，给定的组必须存在。默认组id为1</td>
</tr>
</tbody></table>
<h3 id="userdel-删除用户"><a href="#userdel-删除用户" class="headerlink" title="userdel 删除用户"></a>userdel 删除用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel 用户名				（此用户的文件夹并没被删除）</span><br><span class="line">userdel -r 用户名				（用户文件夹同时删除）</span><br></pre></td></tr></table></figure>

<h2 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h2><h3 id="groupadd-新增组"><a href="#groupadd-新增组" class="headerlink" title="groupadd 新增组"></a>groupadd 新增组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd 组名</span><br></pre></td></tr></table></figure>



<h3 id="groupdel-删除组"><a href="#groupdel-删除组" class="headerlink" title="groupdel 删除组"></a>groupdel 删除组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupdel 删除组</span><br></pre></td></tr></table></figure>



<h3 id="groupmod-修改组"><a href="#groupmod-修改组" class="headerlink" title="groupmod 修改组"></a>groupmod 修改组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupmod -n 新组名 原组名</span><br></pre></td></tr></table></figure>



<h3 id="cat-x2F-etc-x2F-group-查看创建了哪些组"><a href="#cat-x2F-etc-x2F-group-查看创建了哪些组" class="headerlink" title="cat &#x2F;etc&#x2F;group 查看创建了哪些组"></a>cat &#x2F;etc&#x2F;group 查看创建了哪些组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group</span><br><span class="line">cat /etc/gshadow</span><br></pre></td></tr></table></figure>

<h2 id="文件权限类"><a href="#文件权限类" class="headerlink" title="文件权限类"></a>文件权限类</h2><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><table>
<thead>
<tr>
<th align="center">文件类型</th>
<th align="center">属主权限</th>
<th align="center">属组权限</th>
<th align="center">其他用户权限</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">1 2 3</td>
<td align="center">4 5 6</td>
<td align="center">7 8 9</td>
</tr>
<tr>
<td align="center"><strong>d</strong></td>
<td align="center"><strong>r w x</strong></td>
<td align="center"><strong>r - x</strong></td>
<td align="center"><strong>r  - x</strong></td>
</tr>
<tr>
<td align="center">目录文件</td>
<td align="center">读 写 执行</td>
<td align="center">读 写 执行</td>
<td align="center">读 写 执行</td>
</tr>
<tr>
<td align="center">- 代表文件<br />d 代表目录<br /> l 链接文件</td>
<td align="center">User</td>
<td align="center">Group</td>
<td align="center">Other</td>
</tr>
</tbody></table>
<p>如果没有权限，就会出现减号[ - ]而已。从左到右用0-9表示</p>
<table>
<thead>
<tr>
<th>作用到文件</th>
</tr>
</thead>
<tbody><tr>
<td>r：可读取</td>
</tr>
<tr>
<td>w：可修改，但不代表可删除；若想删除，须有改该文件所在目录的w权限</td>
</tr>
<tr>
<td>x：可被系统执行</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>作用到目录</th>
</tr>
</thead>
<tbody><tr>
<td>r：可读取 ls</td>
</tr>
<tr>
<td>w：可修改，目录内创建+删除+重命名目录</td>
</tr>
<tr>
<td>x：可进入改目录</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x.  7 root root   197 8月  31 09:02 blog</span><br><span class="line">文件类型与权限 链接数(</span><br><span class="line">如果查看到是文件：链接数指的是硬链接个数。</span><br><span class="line">如果查看的是文件夹：链接数指的是子文件夹个数。) 文件属主 文件属组 文件大小 建立或最近修改时间 文件名称</span><br></pre></td></tr></table></figure>

<h3 id="chmod-改变权限"><a href="#chmod-改变权限" class="headerlink" title="chmod 改变权限"></a>chmod 改变权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">第一种方式变更权限</span><br><span class="line">	chmod [&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] 文件或目录</span><br><span class="line">	&lt;!--</span><br><span class="line">		ugoa ---&gt; user group other all</span><br><span class="line"><span class="meta prompt_">	--&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">第一种方式变更权限</span></span><br><span class="line">	chmod [mode=421] [文件或目录]</span><br><span class="line">	eg：chmod 777 文件名</span><br><span class="line">	&lt;!--</span><br><span class="line">			421三个数字分别代表ugo用户</span><br><span class="line">		r=4 w=2 x=1 rwx=4+2+1=7</span><br><span class="line">		3 wx</span><br><span class="line">		5 rx</span><br><span class="line">		6 rw</span><br><span class="line"><span class="meta prompt_">	--&gt;</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">	<span class="built_in">chmod</span> -R [mode=421] 目录 &lt;!--所有的子目录都赋予了相应的权限--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="chown-改变所有者"><a href="#chown-改变所有者" class="headerlink" title="chown 改变所有者"></a>chown 改变所有者</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown  [-R] [选项][最终用户][文件或目录]		改变文件或目录的所有者 </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">-R</th>
<th>递归操作</th>
</tr>
</thead>
</table>
<h3 id="chgrp-改变所属组"><a href="#chgrp-改变所属组" class="headerlink" title="chgrp 改变所属组"></a>chgrp 改变所属组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chgrp [最终用户组][文件或目录]		改变文件或目录的所									有者 </span><br></pre></td></tr></table></figure>

<h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><h3 id="find-查找文件或目录"><a href="#find-查找文件或目录" class="headerlink" title="find 查找文件或目录"></a>find 查找文件或目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find [搜索范围] [选项]		默认查找所在目录</span><br><span class="line"></span><br><span class="line">默认深度优先</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-name&lt;查询方式&gt;</td>
<td align="center">按照指定的文件名查找模式查找文件</td>
</tr>
<tr>
<td align="center">-user&lt;用户名&gt;</td>
<td align="center">查找属于指定用户名所有文件</td>
</tr>
<tr>
<td align="center">-size&lt;文件大小&gt;<br />大于用+，小于用-</td>
<td align="center">按照指定的文件大小查找文件，单位为：<br />b-块(512字节)<br />c-字节<br />w-字(2字节)<br />k-千字节<br />M-兆字节<br />G-吉字节</td>
</tr>
</tbody></table>
<h3 id="locate-快速定位文件路径"><a href="#locate-快速定位文件路径" class="headerlink" title="locate 快速定位文件路径"></a>locate 快速定位文件路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locate 搜索文件</span><br><span class="line">updatedb			更新</span><br></pre></td></tr></table></figure>

<!--locate相当于数据库，默认一天一更新，若新建修改了文件需手动更新同步-->

<h3 id="grep-过滤查找及“-”管道符"><a href="#grep-过滤查找及“-”管道符" class="headerlink" title="grep 过滤查找及“|”管道符"></a>grep 过滤查找及“|”管道符</h3><!--管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理-->

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep 选项 查找内容 源文件</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>显示匹配行及行号</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wc					 统计</span><br></pre></td></tr></table></figure>

<h2 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h2><h3 id="gzip-x2F-gunzip-压缩"><a href="#gzip-x2F-gunzip-压缩" class="headerlink" title="gzip&#x2F;gunzip 压缩"></a>gzip&#x2F;gunzip 压缩</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gzip 文件			功能：压缩为*.gz文件</span><br><span class="line">gunzip 文件.gz	功能：解压缩</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>注意</th>
</tr>
</thead>
<tbody><tr>
<td>只能压缩文件不能压缩目录</td>
</tr>
<tr>
<td>不能保留原来的文件</td>
</tr>
<tr>
<td>同时多个文件会产生多个压缩包</td>
</tr>
</tbody></table>
<h3 id="zip-x2F-unzip-压缩"><a href="#zip-x2F-unzip-压缩" class="headerlink" title="zip&#x2F;unzip 压缩"></a>zip&#x2F;unzip 压缩</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip [选项] XXX.zip 将要压缩的内容   功能：压缩文件或目录</span><br><span class="line">unzip [选项] XXX.zip				功能：解压缩</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>zip选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>压缩目录</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>unzip选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-d&lt;目录&gt;</td>
<td>指定解压后的文件的存放目录</td>
</tr>
</tbody></table>
<h3 id="tar-打包"><a href="#tar-打包" class="headerlink" title="tar 打包"></a>tar 打包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar [选项] XXX.tar.gz 将要打包进去的内容</span><br><span class="line">	功能：打包目录，压缩后的文件格式.tar.gz</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-c</td>
<td align="center">产生.tar打包文件</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">显示详细信息</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">指定压缩后的文件名</td>
</tr>
<tr>
<td align="center">-z</td>
<td align="center">打包同时压缩</td>
</tr>
<tr>
<td align="center">-x</td>
<td align="center">解包tar文件</td>
</tr>
<tr>
<td align="center">-C</td>
<td align="center">解压到指定目录</td>
</tr>
</tbody></table>
<!-- c-x -->

<h2 id="磁盘查看和分区类"><a href="#磁盘查看和分区类" class="headerlink" title="磁盘查看和分区类"></a>磁盘查看和分区类</h2><h3 id="du-查看文件和目录占用的磁盘空间"><a href="#du-查看文件和目录占用的磁盘空间" class="headerlink" title="du 查看文件和目录占用的磁盘空间"></a>du 查看文件和目录占用的磁盘空间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du 目录/文件		显示目录下每个子目录的磁盘使用情况</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-h</td>
<td>以较易阅读的GBytes,MBytes,KBytes等格式自行显示</td>
</tr>
<tr>
<td>-a</td>
<td>不仅查看子目录大小，还要包括文件</td>
</tr>
<tr>
<td>-c</td>
<td>显示所有的文件和子目录大小后，显示总和</td>
</tr>
<tr>
<td>-s</td>
<td>只显示总和</td>
</tr>
<tr>
<td>–max-depth&#x3D;n</td>
<td>指定统计子目录的深度为第n层</td>
</tr>
</tbody></table>
<h3 id="df-查看磁盘空间使用情况"><a href="#df-查看磁盘空间使用情况" class="headerlink" title="df 查看磁盘空间使用情况"></a>df 查看磁盘空间使用情况</h3><p>df:disk free 空余磁盘</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df 选项		功能描述：列出文件系统的整体磁盘使用量，检查文件系统的磁盘空间占用情况</span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-h</td>
<td align="center">同上</td>
</tr>
</tbody></table>
<h3 id="free-查看内存使用"><a href="#free-查看内存使用" class="headerlink" title="free 查看内存使用"></a>free 查看内存使用</h3><p>用法同df</p>
<h3 id="lsblk-查看设备挂载情况"><a href="#lsblk-查看设备挂载情况" class="headerlink" title="lsblk 查看设备挂载情况"></a>lsblk 查看设备挂载情况</h3><table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-h</td>
<td>同上</td>
</tr>
</tbody></table>
<h3 id="fdisk-分区"><a href="#fdisk-分区" class="headerlink" title="fdisk 分区"></a>fdisk 分区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l			功能描述：查看磁盘分区情况</span><br><span class="line">fdisk 硬盘设备名		 功能描述：对新增的硬盘进行分区操作</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>显示所有硬盘的分区列表</td>
</tr>
</tbody></table>
<h3 id="mkfs-格式化硬盘分区"><a href="#mkfs-格式化硬盘分区" class="headerlink" title="mkfs 格式化硬盘分区"></a>mkfs 格式化硬盘分区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs -t ext2 /dev/sdb号</span><br></pre></td></tr></table></figure>

<h3 id="mount-x2F-umount-挂载-x2F-卸载"><a href="#mount-x2F-umount-挂载-x2F-卸载" class="headerlink" title="mount&#x2F;umount 挂载&#x2F;卸载"></a>mount&#x2F;umount 挂载&#x2F;卸载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount [-t vfstype] [-o options] device dir	挂载设备</span><br><span class="line">umount 设备文件名或挂载点					  卸载设备</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-t vfstype</td>
<td>指定文件系统的类型，通常不必指定。mout会自动选择正确的类型。常用类型有：<br/>光盘或光盘镜像：1so96604<br/>DOS fat16 文件系统：msdos<br/>Windows 9x fat32 文件系统：vfat<br/>Windows NT ntfs 文件系统：ntfs<br/>Mount Windows 文件网络共享：smbfs<br/>UNIX(LINUX) 文件网络共享：nfs</td>
</tr>
<tr>
<td>-o options</td>
<td>主要用来描述设备或档案的挂接方式。常用的参数有：<br/>loop:用来把一个文件当成硬盘分区挂接上系统：<br/>ro:采用只读方式挂接设备<br/>rw:采用读写方式挂接设备<br/>iocharset:指定访问文件系统所用字符集</td>
</tr>
<tr>
<td>device</td>
<td>要挂载(mount)的设备</td>
</tr>
<tr>
<td>dir</td>
<td>设备在系统上的挂接点(mount point)</td>
</tr>
</tbody></table>
<h3 id="设置开机自动挂载"><a href="#设置开机自动挂载" class="headerlink" title="设置开机自动挂载"></a>设置开机自动挂载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line"></span><br><span class="line">dev/cdrom	/mnt/cdrom	iso9660		defaults	0 0</span><br></pre></td></tr></table></figure>

<h2 id="进程管理类"><a href="#进程管理类" class="headerlink" title="进程管理类"></a>进程管理类</h2><h3 id="ps-查看当前系统进程状态"><a href="#ps-查看当前系统进程状态" class="headerlink" title="ps 查看当前系统进程状态"></a>ps 查看当前系统进程状态</h3><p>ps：process status</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep xxx		查看系统中所有进程</span><br><span class="line">ps-ef | grep xxx		可以查看子父进程之间的关系</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a</td>
<td align="center">列出带有终端的所有用户的进程</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">列出当前用户的所有进程，包括没有终端的进程</td>
</tr>
<tr>
<td align="center">u</td>
<td align="center">面向用户友好的显示风格</td>
</tr>
<tr>
<td align="center">-e</td>
<td align="center">列出所有进程</td>
</tr>
<tr>
<td align="center">-u</td>
<td align="center">列出某个用户关联的所有进程</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">显示完整格式的进程列表</td>
</tr>
</tbody></table>
<h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><h3 id="RPM查询（rpm-qa）"><a href="#RPM查询（rpm-qa）" class="headerlink" title="RPM查询（rpm -qa）"></a>RPM查询（rpm -qa）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep 软件名	功能描述：可以管道也可以不管道</span><br><span class="line">rpm -qi 软件名			功能描述：详细信息</span><br></pre></td></tr></table></figure>

<h3 id="RPM卸载（rpm-e）"><a href="#RPM卸载（rpm-e）" class="headerlink" title="RPM卸载（rpm -e）"></a>RPM卸载（rpm -e）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -e RPM软件包</span><br><span class="line">rpm -e --nodeps 软件包</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-e</td>
<td align="left">卸载软件包</td>
</tr>
<tr>
<td align="left">–nodeps</td>
<td align="left">卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</td>
</tr>
</tbody></table>
<h3 id="RPM安装（rpm-ivh）"><a href="#RPM安装（rpm-ivh）" class="headerlink" title="RPM安装（rpm -ivh）"></a>RPM安装（rpm -ivh）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh RPM包全名</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>install，安装</td>
</tr>
<tr>
<td>-v</td>
<td>–verbose，显示详细信息</td>
</tr>
<tr>
<td>-h</td>
<td>–hash，进度条</td>
</tr>
<tr>
<td>-nodeps</td>
<td>安装前不检查依赖</td>
</tr>
</tbody></table>
<h2 id="YUM仓库配置"><a href="#YUM仓库配置" class="headerlink" title="YUM仓库配置"></a>YUM仓库配置</h2><h3 id="YUM的常用命令"><a href="#YUM的常用命令" class="headerlink" title="YUM的常用命令"></a>YUM的常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum [选项][参数]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>选项</strong></th>
<th><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td>-y</td>
<td>对所有的提问都回答yes</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>参数</strong></td>
<td><strong>功能</strong></td>
</tr>
<tr>
<td>install</td>
<td>安装rpm软件包</td>
</tr>
<tr>
<td>update</td>
<td>更新rpm软件包</td>
</tr>
<tr>
<td>check-update</td>
<td>检查是否有可用的更新rpm软件包</td>
</tr>
<tr>
<td>remove</td>
<td>删除指定的rpm软件包</td>
</tr>
<tr>
<td>list</td>
<td>显示软件包信息</td>
</tr>
<tr>
<td>clean</td>
<td>清理yum过期的缓存</td>
</tr>
<tr>
<td>deplist</td>
<td>显示yum软件包的所有依赖关系</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Linux学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus学习笔记</title>
    <url>/2023/03/02/MyBatis-Plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MyBatis-Plus学习笔记"><a href="#MyBatis-Plus学习笔记" class="headerlink" title="MyBatis-Plus学习笔记"></a>MyBatis-Plus学习笔记</h1><h2 id="关于MyBatisPlus中的注解"><a href="#关于MyBatisPlus中的注解" class="headerlink" title="关于MyBatisPlus中的注解"></a>关于MyBatisPlus中的注解</h2><h3 id="实体类中"><a href="#实体类中" class="headerlink" title="实体类中"></a>实体类中</h3><h4 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h4><h5 id="为什么要使用此注解？"><a href="#为什么要使用此注解？" class="headerlink" title="为什么要使用此注解？"></a>为什么要使用此注解？</h5><p>MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决定。默认操作的表名&#x3D;实体类型的<strong>类名首字母变为小写</strong></p>
<h5 id="用法及作用位置"><a href="#用法及作用位置" class="headerlink" title="用法及作用位置"></a>用法及作用位置</h5><h6 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h6><p>@TableName(“数据库中的表名”)</p>
<h6 id="作用位置"><a href="#作用位置" class="headerlink" title="作用位置"></a>作用位置</h6><p>实体类上面</p>
<h4 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h4><h5 id="为什么要使用此注解？-1"><a href="#为什么要使用此注解？-1" class="headerlink" title="为什么要使用此注解？"></a>为什么要使用此注解？</h5><p>MyBatis-Plus在实现CRUD时，会<strong>默认将id作为主键列</strong>，并在插入数据时，默认基于雪花算法的策略生成id。如果没有找到数据库表中的id就会报错</p>
<h5 id="用法及作用位置-1"><a href="#用法及作用位置-1" class="headerlink" title="用法及作用位置"></a>用法及作用位置</h5><h6 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h6><p>@TableId(value&#x3D;”数据库表中id主键对应实体类中的属性”,type&#x3D;IdType.主键策略)</p>
<p>@TableId(“数据库表中id主键对应实体类中的属性”)</p>
<h6 id="作用位置-1"><a href="#作用位置-1" class="headerlink" title="作用位置"></a>作用位置</h6><p>数据库表中id主键对应实体类中的属性上面<span style="color:red">只要对数据的id进行了相关操作该对象在java层面就附上了id即可调用</span></p>
<h5 id="主键策略"><a href="#主键策略" class="headerlink" title="主键策略"></a>主键策略</h5><table>
<thead>
<tr>
<th>主键策略</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IdType.ASSIGN_ID</td>
<td>基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td>
</tr>
<tr>
<td>IdType.AUTO</td>
<td>数据库ID自增</td>
</tr>
<tr>
<td>其他</td>
<td>其他</td>
</tr>
</tbody></table>
<h4 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h4><h5 id="为什么使用此注解？"><a href="#为什么使用此注解？" class="headerlink" title="为什么使用此注解？"></a>为什么使用此注解？</h5><ol>
<li>默认情况数据库表字段与实体类属性相同，如：age、id。无需使用</li>
<li>第二种情况实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格，如：实体类属性userName，表中字段user_name。此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格<br>相当于在MyBatis中配置</li>
<li><strong>实体类属性name，表中字段username这种情况就需要使用注解</strong></li>
</ol>
<h5 id="用法及作用位置-2"><a href="#用法及作用位置-2" class="headerlink" title="用法及作用位置"></a>用法及作用位置</h5><h6 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h6><p>@TableField(“数据库字段名”) </p>
<h6 id="作用位置-2"><a href="#作用位置-2" class="headerlink" title="作用位置"></a>作用位置</h6><p>对应实体类属性的上面</p>
<h4 id="Version"><a href="#Version" class="headerlink" title="@Version"></a>@Version</h4><h5 id="为什么要使用此注解？-2"><a href="#为什么要使用此注解？-2" class="headerlink" title="为什么要使用此注解？"></a>为什么要使用此注解？</h5><blockquote>
<p>场景：一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太高，可能会影响销量。又通知小王，你把商品价格降低30元。此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50&#x3D;150元存入了数据库；小王将商品减了30元，并将100-30&#x3D;70元存入了数据库。是的，如果没有锁，小李的操作就完全被小王的覆盖了。现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</p>
</blockquote>
<p>该注解主要针对于数据表操作，防止数据出错</p>
<h5 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.sxx.mybatisplus.mapper&quot;)</span><span class="comment">//扫描mapper接口所在的包，原本写在主配置类上</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//标识为配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//只要是返回实体类都要添加Bean注解</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">//添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="TableLogic"><a href="#TableLogic" class="headerlink" title="@TableLogic"></a>@TableLogic</h4><h5 id="为什么要使用此注解"><a href="#为什么要使用此注解" class="headerlink" title="为什么要使用此注解"></a>为什么要使用此注解</h5><p>此注解为逻辑删除，使用此注解可以进行数据恢复</p>
<ul>
<li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</li>
<li>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</li>
</ul>
<h5 id="用法及作用位置-3"><a href="#用法及作用位置-3" class="headerlink" title="用法及作用位置"></a>用法及作用位置</h5><h6 id="用法-4"><a href="#用法-4" class="headerlink" title="用法"></a>用法</h6><p>在数据库表中添加一个<strong>数据类型为int</strong>逻辑删除字段，同时默认<strong>0为未删除，1为删除</strong>此配置可以在配置文件中更改</p>
<h6 id="作用位置-3"><a href="#作用位置-3" class="headerlink" title="作用位置"></a>作用位置</h6><p>在对应的实体类属性上面添加@TableLogic注解</p>
<h3 id="枚举类中"><a href="#枚举类中" class="headerlink" title="枚举类中"></a>枚举类中</h3><h4 id="EnumValue"><a href="#EnumValue" class="headerlink" title="@EnumValue"></a>@EnumValue</h4><h5 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h5><p>用在枚举类中对应数据库表字段的上面@EnumValue </p>
<p>同时该属性可以与数据库中的字段一样或者可以互相转化</p>
<h4 id="上面的部分注解可以在application-yml中配置"><a href="#上面的部分注解可以在application-yml中配置" class="headerlink" title="上面的部分注解可以在application.yml中配置"></a>上面的部分注解可以在application.yml中配置</h4><h5 id="TableName-1"><a href="#TableName-1" class="headerlink" title="@TableName"></a>@TableName</h5><p>在配置文件中针对的是数据库表名称 都有统一的前缀，例如tb_</p>
<p>在配置文件中</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure>

<h5 id="TableId-1"><a href="#TableId-1" class="headerlink" title="@TableId"></a>@TableId</h5><p>在配置文件中针对主键自增策略</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>

<h5 id="TableLogic-1"><a href="#TableLogic-1" class="headerlink" title="@TableLogic"></a>@TableLogic</h5><p>在配置文件中针对<strong>哪个值代表删除哪个代表存在</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logic-delete-value:</span> <span class="number">1</span>	<span class="comment">#删除</span></span><br><span class="line"><span class="attr">logic-not-delete-value:</span> <span class="number">0</span>	<span class="comment">#保留</span></span><br></pre></td></tr></table></figure>

<h5 id="EnumValue-1"><a href="#EnumValue-1" class="headerlink" title="@EnumValue"></a>@EnumValue</h5><p>在配置文件中主要是描述枚举类的位置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">type-enums-package:</span> <span class="string">com.sxx.mybatisplus.enums</span></span><br></pre></td></tr></table></figure>

<p>java中的一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sxx.mybatisplus.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> com.sxx.mybatisplus.enums.SexEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;uid&quot;,type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;user_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> SexEnum sex;</span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment"># 配置连接数据库的各个信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Sxx15963559164</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="comment"># 法二，法一：@TabName</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="comment"># 逻辑删除</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 配置类型别名所对应的包</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.sxx.mybatisplus.pojo</span></span><br><span class="line">  <span class="comment"># 配置扫描通用枚举</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.sxx.mybatisplus.enums</span></span><br></pre></td></tr></table></figure>



<h2 id="Wapper"><a href="#Wapper" class="headerlink" title="Wapper"></a>Wapper</h2><ul>
<li>Wrapper ： 条件构造抽象类，最顶端父类<ul>
<li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<ul>
<li>QueryWrapper ： 查询条件封装（使用）</li>
<li>UpdateWrapper ： Update 条件封装（使用）</li>
<li>AbstractLambdaWrapper ： 使用Lambda 语法<ul>
<li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper（使用）</li>
<li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper（使用）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>使用哪个就new哪个，例如QueryWrapper </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;实体类的泛型&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.like(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;a&quot;</span>).between(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;20&quot;</span>, <span class="string">&quot;30&quot;</span>).or().isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>方法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>like(column,val)</td>
<td>模糊查询</td>
</tr>
<tr>
<td>between(column,val)</td>
<td>between</td>
</tr>
<tr>
<td>orderByDesc(column)</td>
<td>降序</td>
</tr>
<tr>
<td>orderByAsc(column)</td>
<td>升序</td>
</tr>
<tr>
<td>gt(column,val)</td>
<td>大于</td>
</tr>
<tr>
<td>lt(column,val)</td>
<td>小于</td>
</tr>
<tr>
<td>ge(column,val)</td>
<td>大于等于</td>
</tr>
<tr>
<td>le(column,val)</td>
<td>小于等于</td>
</tr>
<tr>
<td>or()</td>
<td>如果使用或语句必须.or()</td>
</tr>
<tr>
<td>isNotNull(column)</td>
<td>不为null</td>
</tr>
<tr>
<td>isNull(column)</td>
<td>为null</td>
</tr>
</tbody></table>
<h5 id="条件优先级"><a href="#条件优先级" class="headerlink" title="条件优先级"></a>条件优先级</h5><ul>
<li><p>将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改</p>
</li>
<li><p>将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</p>
</li>
</ul>
<p>上述两个修改条件优先级是不同的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE t_user SET age=?, email=? WHERE (username LIKE ? AND age &gt; ? OR</span><br><span class="line">email IS NULL)</span><br><span class="line"></span><br><span class="line">UPDATE t_user SET age=?, email=? WHERE (username LIKE ? AND (age &gt; ? OR</span><br><span class="line">email IS NULL))</span><br></pre></td></tr></table></figure>

<p>如果使用简单的条件拼接就会按照书写顺序进行优先级，所以要使用条件优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).like(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">                .or()</span><br><span class="line">                .isNull(<span class="string">&quot;email&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">queryWrapper.like(&quot;user_name&quot;,&quot;a&quot;)</span><br><span class="line">                .and(i-&gt;i.gt(&quot;age&quot;,20).or().isNull(&quot;email&quot;));</span><br></pre></td></tr></table></figure>

<h5 id="组装select语句"><a href="#组装select语句" class="headerlink" title="组装select语句"></a>组装select语句</h5><p>默认查询结果包含了数据库表中所有的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.select(<span class="string">&quot;user_name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;email&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>即使用queryWrapper.select(“想要查询的字段”);</p>
<h5 id="inSql-子查询"><a href="#inSql-子查询" class="headerlink" title="inSql()子查询"></a>inSql()子查询</h5><p>queryWrapper.inSql(“where条件”,”子查询语句”);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryWrapper.inSql(<span class="string">&quot;uid&quot;</span>,<span class="string">&quot;select uid from t_user where uid &lt;= 100&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (uid IN (select uid from t_user where uid &lt;= 100))</span><br></pre></td></tr></table></figure>

<h3 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a>UpdateWrapper</h3><table>
<thead>
<tr>
<th>方法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>set(“column”,”val”)</td>
<td>设置某个字段&#x3D;val</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UpdateWrapper&lt;User&gt; userUpdateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">userUpdateWrapper.like(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;a&quot;</span>).and(i-&gt;i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">userUpdateWrapper.set(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;小黑&quot;</span>).set(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;abc@atguigu.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE t_user SET user_name=?,email=? WHERE is_deleted=0 AND (user_name LIKE ? AND (age &gt; ? OR email IS NULL))</span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>条件语句和查询语句要分开</p>
<h4 id="condition"><a href="#condition" class="headerlink" title="condition"></a>condition</h4><p>在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p>
<p>condition</p>
<h5 id="原生"><a href="#原生" class="headerlink" title="原生"></a>原生</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">//SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (user_name LIKE ? AND age &lt;= ?)</span></span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isNotBlank(username))&#123;</span><br><span class="line">	<span class="comment">//isNotBlank判断某个字符创是否不为空字符串、不为null、不为空白符</span></span><br><span class="line">    queryWrapper.like(<span class="string">&quot;user_name&quot;</span>, username);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ageBegin != <span class="literal">null</span>)&#123;</span><br><span class="line">  	queryWrapper.ge(<span class="string">&quot;age&quot;</span>, ageBegin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ageEnd != <span class="literal">null</span>)&#123;</span><br><span class="line">	queryWrapper.le(<span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>繁琐！</p>
<h5 id="使用condition"><a href="#使用condition" class="headerlink" title="使用condition"></a>使用condition</h5><p>like(condition,column,val)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.like(StringUtils.isNotBlank(username),<span class="string">&quot;user_name&quot;</span>, username)</span><br><span class="line">        .ge(ageBegin != <span class="literal">null</span>,<span class="string">&quot;age&quot;</span>, ageBegin)</span><br><span class="line">        .le(ageEnd != <span class="literal">null</span>, <span class="string">&quot;age&quot;</span>, ageEnd);</span><br></pre></td></tr></table></figure>

<h3 id="LambdaQueryWrapper和LambdaUpdateWrapper"><a href="#LambdaQueryWrapper和LambdaUpdateWrapper" class="headerlink" title="LambdaQueryWrapper和LambdaUpdateWrapper"></a>LambdaQueryWrapper和LambdaUpdateWrapper</h3><p>防止开发者手动输入错column可以使用实体类::get属性名()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.like(StringUtils.isNotBlank(username), User::getName,username)</span><br><span class="line">                .ge(ageBegin != <span class="literal">null</span>,User::getAge, ageBegin)</span><br><span class="line">                .le(ageEnd != <span class="literal">null</span>,User::getAge, ageEnd);</span><br></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><h4 id="Page类的一些方法"><a href="#Page类的一些方法" class="headerlink" title="Page类的一些方法"></a>Page类的一些方法</h4><p>Page<User> page &#x3D; new Page&lt;&gt;(2,3);</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>page</td>
<td>Page这个对象</td>
</tr>
<tr>
<td>page.getRecords()</td>
<td>当前页数据</td>
</tr>
<tr>
<td>page.getSize()</td>
<td>每页显示的条数</td>
</tr>
<tr>
<td>page.getCurrent()</td>
<td>获取当前页的页码</td>
</tr>
<tr>
<td>page.getPages()</td>
<td>总页数</td>
</tr>
<tr>
<td>page.getTotal()</td>
<td>总记录数</td>
</tr>
<tr>
<td>page.hasPrevious()</td>
<td>是否有上一页</td>
</tr>
<tr>
<td>page.hasNext()</td>
<td>是否有下一页</td>
</tr>
</tbody></table>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><h5 id="1-添加配置项"><a href="#1-添加配置项" class="headerlink" title="1. 添加配置项"></a>1. 添加配置项</h5><p>创建配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.sxx.mybatisplus.mapper&quot;)</span><span class="comment">//扫描mapper接口所在的包，原本写在主配置类上</span></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//标识为配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//只要是返回实体类都要添加Bean注解</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">userMapper.selectPage(page,<span class="literal">null</span>);<span class="comment">//第二个为QueryWrapper查询条件</span></span><br><span class="line"><span class="comment">//最后直接输出page对象</span></span><br></pre></td></tr></table></figure>

<h3 id="乐观锁插件"><a href="#乐观锁插件" class="headerlink" title="乐观锁插件"></a>乐观锁插件</h3><p>@Version部分</p>
<h2 id="通用枚举类"><a href="#通用枚举类" class="headerlink" title="通用枚举类"></a>通用枚举类</h2><blockquote>
<p>表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举<br>来实现</p>
</blockquote>
<h3 id="创建枚举类"><a href="#创建枚举类" class="headerlink" title="创建枚举类"></a>创建枚举类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sxx.mybatisplus.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SHIXINXI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023-03-01-18:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> &#123;</span><br><span class="line">    MAIL(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMAIL(<span class="number">2</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> String sexName;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sexName = sexName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码生成器依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="快速生成"><a href="#快速生成" class="headerlink" title="快速生成"></a>快速生成</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis_plus&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;Sxx15963559164&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="string">&quot;sxx&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                            <span class="comment">//.enableSwagger() // 开启 swagger 模式</span></span><br><span class="line">                            .fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">                            .outputDir(<span class="string">&quot;E://mybatis_plus&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;com.sxx&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .moduleName(<span class="string">&quot;mybatisplus&quot;</span>) <span class="comment">// 设置父包模块名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;E://mybatis_plus&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(<span class="string">&quot;t_user&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                            .addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MyBatis-Plus学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA之面向对象中</title>
    <url>/2022/11/17/JAVA%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD/</url>
    <content><![CDATA[<h3 id="面向对象的特征二：继承性"><a href="#面向对象的特征二：继承性" class="headerlink" title="面向对象的特征二：继承性"></a>面向对象的特征二：继承性</h3><span id="more"></span>
<h4 id="为什么要有类的继承性？-继承性的好处）"><a href="#为什么要有类的继承性？-继承性的好处）" class="headerlink" title="为什么要有类的继承性？(继承性的好处）"></a>为什么要有类的继承性？(继承性的好处）</h4><ul>
<li>减少了代码的冗余，提高了代码的复用性</li>
<li>便于功能的扩展</li>
<li>为之后多态性的使用，提供了前提</li>
</ul>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javazhong/master/1.bmp"
                     
                ></p>
<h4 id="继承性的格式："><a href="#继承性的格式：" class="headerlink" title="继承性的格式："></a>继承性的格式：</h4><h5 id="class-A-extends-B"><a href="#class-A-extends-B" class="headerlink" title="class A extends B{}"></a>class A extends B{}</h5><ul>
<li>A:子类、派生类、subclass</li>
<li>B:父类、超类、基类、superclass</li>
</ul>
<h4 id="子类继承父类以后有哪些不同？"><a href="#子类继承父类以后有哪些不同？" class="headerlink" title="子类继承父类以后有哪些不同？"></a>子类继承父类以后有哪些不同？</h4><ul>
<li>体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私的结构。只因为封装性的影响，使得子类不能直接调用父类的结构而已。</li>
<li>子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。子类和父类的关系，不同于子集和集合的关系。extends：延展、扩展</li>
</ul>
<h4 id="Java中继承性的说明"><a href="#Java中继承性的说明" class="headerlink" title="Java中继承性的说明"></a>Java中继承性的说明</h4><ul>
<li>一个类可以被多个子类继承。</li>
<li>Java中类的单继承性：一个类只能有一个父类。</li>
<li>子父类是相对的概念。</li>
<li>子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类。</li>
<li>子类继承父类以后，就获取了直接父类以及所间接父类中声明的属性和方法</li>
</ul>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javazhong/master/2.bmp"
                     
                ></p>
<h4 id="java-lang-Object类的理解"><a href="#java-lang-Object类的理解" class="headerlink" title="java.lang.Object类的理解"></a>java.lang.Object类的理解</h4><ul>
<li>如果我们没显式的声明一个类的父类的话，则此类继承于java.lang.Object类</li>
<li>所的java类（除java.lang.Object类之外都直接或间接的继承于java.lang.Object类</li>
<li>意味着，所的java类具有java.lang.Object类声明的功能。</li>
</ul>
<h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>什么是方法的重写(override 或 overwrite)？<br>子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作.</p>
<p>应用：</p>
<p>重写以后，当创建子类对象以后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;&#125;<span class="comment">//求面积</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span> <span class="keyword">extends</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;&#125;<span class="comment">//求表面积</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//==============</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amt)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CheckAccount</span> <span class="keyword">extends</span> <span class="title class_">Account</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amt)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>重写的规则：</p>
<p>方法的声明： 权限修饰符  返回值类型  方法名(形参列表) throws 异常的类型{</p>
<p>​		&#x2F;&#x2F;方法体</p>
<p>}</p>
<p>约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法</p>
<ol>
<li>子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</li>
<li>子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</li>
<li>特殊情况：子类不能重写父类中声明为private权限的方法</li>
<li>返回值类型：父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)</li>
<li>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</li>
</ol>
<p>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写，要么都声明为static的（不是重写)。	</p>
<p><i style="color: red;">面试题：区分方法的重写和重载？</i></p>
<ol>
<li>二者的概念：</li>
<li>重载和重写的具体规则</li>
<li>重载：不表现为多态性。<br>重写：表现为多态性。</li>
</ol>
<blockquote>
<p>重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。<br>所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；</p>
</blockquote>
<blockquote>
<p>而对于多态，只等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。 </p>
</blockquote>
<blockquote>
<p>引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚绑定，它就不是多态。”</p>
</blockquote>
<h3 id="关键字：super"><a href="#关键字：super" class="headerlink" title="关键字：super"></a>关键字：super</h3><h4 id="super-关键字可以理解为：父类的"><a href="#super-关键字可以理解为：父类的" class="headerlink" title="super 关键字可以理解为：父类的"></a>super 关键字可以理解为：父类的</h4><h4 id="可以用来调用的结构："><a href="#可以用来调用的结构：" class="headerlink" title="可以用来调用的结构："></a>可以用来调用的结构：</h4><p>属性、方法、构造器</p>
<h4 id="super调用属性、方法："><a href="#super调用属性、方法：" class="headerlink" title="super调用属性、方法："></a>super调用属性、方法：</h4><ol>
<li>我们可以在子类的方法或构造器中。通过使用”super.属性”或”super.方法”的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”</li>
<li>特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。</li>
<li>特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法。</li>
</ol>
<h4 id="super调用构造器："><a href="#super调用构造器：" class="headerlink" title="super调用构造器："></a>super调用构造器：</h4><ol>
<li>我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</li>
<li>“super(形参列表)”的使用，必须声明在子类构造器的首行！</li>
<li>我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二一，不能同时出现</li>
<li>在构造器的首行，没显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()</li>
<li>在类的多个构造器中，至少一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器</li>
</ol>
<h3 id="子类对象实例化全过程"><a href="#子类对象实例化全过程" class="headerlink" title="子类对象实例化全过程"></a>子类对象实例化全过程</h3><h4 id="从结果上看：继承性"><a href="#从结果上看：继承性" class="headerlink" title="从结果上看：继承性"></a>从结果上看：继承性</h4><ul>
<li>子类继承父类以后，就获取了父类中声明的属性或方法。</li>
<li>创建子类的对象，在堆空间中，就会加载所父类中声明的属性。</li>
</ul>
<h4 id="从过程上看："><a href="#从过程上看：" class="headerlink" title="从过程上看："></a>从过程上看：</h4><p>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，…直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所的父类的结构，所以才可以看到内存中父类中的结构，子类对象才可以考虑进行调用。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javazhong/master/1(1).bmp"
                     
                ></p>
<h4 id="强调说明："><a href="#强调说明：" class="headerlink" title="强调说明："></a>强调说明：</h4><p>虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javazhong/master/2(1).bmp"
                     
                ></p>
<h3 id="面向对象的特征三：多态性"><a href="#面向对象的特征三：多态性" class="headerlink" title="面向对象的特征三：多态性"></a>面向对象的特征三：多态性</h3><h4 id="多态性的理解："><a href="#多态性的理解：" class="headerlink" title="多态性的理解："></a>多态性的理解：</h4><p>可以理解为一个事物的多种形态。</p>
<h4 id="何为多态性："><a href="#何为多态性：" class="headerlink" title="何为多态性："></a>何为多态性：</h4><p>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure>

<h4 id="多态性的使用：虚拟方法调用"><a href="#多态性的使用：虚拟方法调用" class="headerlink" title="多态性的使用：虚拟方法调用"></a>多态性的使用：虚拟方法调用</h4><ul>
<li>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</li>
<li>总结：编译，看左边；运行，看右边。</li>
</ul>
<h4 id="多态性的使用前提："><a href="#多态性的使用前提：" class="headerlink" title="多态性的使用前提："></a>多态性的使用前提：</h4><ul>
<li>类的继承关系</li>
<li>方法的重写</li>
</ul>
<h4 id="多态性的应用举例："><a href="#多态性的应用举例：" class="headerlink" title="多态性的应用举例："></a>多态性的应用举例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">举例一：</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(Animal animal)</span>&#123;<span class="comment">//Animal animal = new Dog();</span></span><br><span class="line">		animal.eat();</span><br><span class="line">		animal.shout();</span><br><span class="line">	&#125;</span><br><span class="line">举例二：</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">举例三：</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doData</span><span class="params">(Connection conn)</span>&#123;</span><br><span class="line">	<span class="comment">//conn = new MySQlConnection();</span></span><br><span class="line">	<span class="comment">//conn = new OracleConnection();</span></span><br><span class="line">		conn.method1();</span><br><span class="line">		conn.method2();</span><br><span class="line">		conn.method3();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="多态性使用的注意点："><a href="#多态性使用的注意点：" class="headerlink" title="多态性使用的注意点："></a>多态性使用的注意点：</h4><p><i style="color: red;">对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</i></p>
<h4 id="关于向上转型与向下转型："><a href="#关于向上转型与向下转型：" class="headerlink" title="关于向上转型与向下转型："></a>关于向上转型与向下转型：</h4><h5 id="向上转型：多态"><a href="#向上转型：多态" class="headerlink" title="向上转型：多态"></a>向上转型：多态</h5><h5 id="向下转型："><a href="#向下转型：" class="headerlink" title="向下转型："></a>向下转型：</h5><h6 id="为什么使用向下转型："><a href="#为什么使用向下转型：" class="headerlink" title="为什么使用向下转型："></a>为什么使用向下转型：</h6><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特的属性和方法？使用向下转型。</p>
<h6 id="如何实现向下转型："><a href="#如何实现向下转型：" class="headerlink" title="如何实现向下转型："></a>如何实现向下转型：</h6><p>使用强制类型转换符：()</p>
<h6 id="使用时的注意点："><a href="#使用时的注意点：" class="headerlink" title="使用时的注意点："></a>使用时的注意点：</h6><ol>
<li>使用强转时，可能出现ClassCastException的异常。</li>
<li>为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。</li>
</ol>
<h6 id="instanceof的使用："><a href="#instanceof的使用：" class="headerlink" title="instanceof的使用："></a>instanceof的使用：</h6><ol>
<li>a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。</li>
<li>如果 a instanceof A返回true,则 a instanceof B也返回true.其中，类B是类A的父类。</li>
<li>要求a所属的类与类A必须是子类和父类的关系，否则编译错误。</li>
</ol>
<h6 id="图示："><a href="#图示：" class="headerlink" title="图示："></a>图示：</h6><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javazhong/master/1(2).bmp"
                     
                ></p>
<h4 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h4><h5 id="谈谈你对多态性的理解？"><a href="#谈谈你对多态性的理解？" class="headerlink" title="谈谈你对多态性的理解？"></a>谈谈你对多态性的理解？</h5><ol>
<li>实现代码的通用性。</li>
<li>Object类中定义的public boolean equals(Object obj){  }</li>
<li>JDBC:使用java程序操作(获取数据库连接、CRUD)数据库(MySQL、Oracle、DB2、SQL Server)</li>
</ol>
<h5 id="多态是编译时行为还是运行时行为？"><a href="#多态是编译时行为还是运行时行为？" class="headerlink" title="多态是编译时行为还是运行时行为？"></a>多态是编译时行为还是运行时行为？</h5><p><i style="color: red;">运行时行为</i></p>
<h3 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h3><h4 id="java-lang-Object类的说明："><a href="#java-lang-Object类的说明：" class="headerlink" title="java.lang.Object类的说明："></a>java.lang.Object类的说明：</h4><ol>
<li>Object类是所Java类的根父类</li>
<li>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类 </li>
<li>Object类中的功能(属性、方法)就具通用性。<br>属性：无<br>方法：equals() &#x2F; toString() &#x2F; getClass() &#x2F;hashCode() &#x2F; clone() &#x2F; finalize() wait() 、 notify()、notifyAll()</li>
<li>Object类只声明了一个空参的构造器</li>
</ol>
<h4 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h4><h5 id="equals-的使用："><a href="#equals-的使用：" class="headerlink" title="equals()的使用："></a>equals()的使用：</h5><ol>
<li><p>是一个方法，而非运算符</p>
</li>
<li><p>只能适用于引用数据类型</p>
</li>
<li><p>Object类中equals()的定义：</p>
</li>
<li><p>&#96;&#96;&#96;java<br>public boolean equals(Object obj) {<br>    return (this &#x3D;&#x3D; obj);<br>  }<br>&#x2F;<em>说明：Object类中定义的equals()和&#x3D;&#x3D;的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</em>&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 像String、Date、File、包装类等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的&quot;实体内容&quot;是否相同。</span><br><span class="line"></span><br><span class="line">6. 通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的&quot;实体内容&quot;是否相同。那么，我们就需要对Object类中的equals()进行重写.</span><br><span class="line">   重写的原则：比较两个对象的实体内容是否相同.</span><br><span class="line"></span><br><span class="line">##### 如何重写equals()</span><br><span class="line"></span><br><span class="line">###### 手动重写举例：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">class User&#123;</span><br><span class="line">	String name;</span><br><span class="line">	int age;</span><br><span class="line">	//重写其equals()方法</span><br><span class="line">	public boolean equals(Object obj)&#123;</span><br><span class="line">		if(obj == this)&#123;</span><br><span class="line">			return true;</span><br><span class="line">		&#125;</span><br><span class="line">		if(obj instanceof User)&#123;</span><br><span class="line">			User u = (User)obj;</span><br><span class="line">			return this.age == u.age &amp;&amp; this.name.equals(u.name);</span><br><span class="line">		&#125;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h6 id="开发中如何实现：自动生成的"><a href="#开发中如何实现：自动生成的" class="headerlink" title="开发中如何实现：自动生成的"></a>开发中如何实现：自动生成的</h6><h5 id="回顾-x3D-x3D-运算符的使用："><a href="#回顾-x3D-x3D-运算符的使用：" class="headerlink" title="回顾 &#x3D;&#x3D; 运算符的使用："></a>回顾 &#x3D;&#x3D; 运算符的使用：</h5><p> &#x3D;&#x3D; ：运算符</p>
<ol>
<li>可以使用在基本数据类型变量和引用数据类型变量中</li>
<li>如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）<br>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</li>
<li>补充： &#x3D;&#x3D; 符号使用时，必须保证符号左右两边的变量类型一致。</li>
</ol>
<h4 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h4><h5 id="toString-的使用："><a href="#toString-的使用：" class="headerlink" title="toString()的使用："></a>toString()的使用：</h5><ol>
<li><p>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</p>
</li>
<li><p>Object类中toString()的定义：</p>
</li>
<li><p>&#96;&#96;&#96;java<br>public String toString() {<br>   return getClass().getName() + “@” + Integer.toHexString(hashCode());<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">4. 像String、Date、File、包装类等都重写了Object类中的toString()方法。</span><br><span class="line">   使得在调用对象的toString()时，返回&quot;实体内容&quot;信息</span><br><span class="line"></span><br><span class="line">5. 自定义类也可以重写toString()方法，当调用此方法时，返回对象的&quot;实体内容&quot;</span><br><span class="line">##### 如何重写toString()</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//自动实现</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">	return &quot;Customer [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="面试题：-1"><a href="#面试题：-1" class="headerlink" title="面试题："></a>面试题：</h4><ul>
<li>final、finally、finalize的区别？</li>
<li>&#x3D;&#x3D; 和 equals() 区别</li>
</ul>
<h3 id="单元测试方法"><a href="#单元测试方法" class="headerlink" title="单元测试方法"></a>单元测试方法</h3><p>略</p>
<h3 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h3><h4 id="1-为什么要有包装类-或封装类）"><a href="#1-为什么要有包装类-或封装类）" class="headerlink" title="1.为什么要有包装类(或封装类）"></a>1.为什么要有包装类(或封装类）</h4><p>为了使基本数据类型的变量具有类的特征，引入包装类。</p>
<h4 id="2-基本数据类型与对应的包装类："><a href="#2-基本数据类型与对应的包装类：" class="headerlink" title="2.基本数据类型与对应的包装类："></a>2.基本数据类型与对应的包装类：</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javazhong/master/1(3).bmp"
                     
                ></p>
<h4 id="3-需要掌握的类型间的转换：（基本数据类型、包装类、String）"><a href="#3-需要掌握的类型间的转换：（基本数据类型、包装类、String）" class="headerlink" title="3.需要掌握的类型间的转换：（基本数据类型、包装类、String）"></a>3.需要掌握的类型间的转换：（基本数据类型、包装类、String）</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/javazhong/master/2(2).bmp"
                     
                ></p>
<h5 id="简易版："><a href="#简易版：" class="headerlink" title="简易版："></a>简易版：</h5><ul>
<li>基本数据类型&lt;—&gt;包装类：JDK 5.0 新特性：自动装箱 与自动拆箱</li>
<li>基本数据类型、包装类—&gt;String:调用String重载的valueOf(Xxx xxx)</li>
<li>String—&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)</li>
</ul>
<p><i style="color: red;"> 注意：转换时，可能会报NumberFormatException</i></p>
<h6 id="应用场景举例："><a href="#应用场景举例：" class="headerlink" title="应用场景举例："></a>应用场景举例：</h6><p>Vector类中关于添加元素，只定义了形参为Object类型的方法：</p>
<p>v.addElement(Object obj);   &#x2F;&#x2F;基本数据类型 —&gt;包装类 —&gt;使用多态</p>
]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>后端学习的记录</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis中关于TableId的使用</title>
    <url>/2023/04/04/MyBatis%E4%B8%AD%E5%85%B3%E4%BA%8ETableId%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存菜品的基本信息到菜品表dish</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line">        <span class="comment">//菜品id 雪花算法自动生成只要经过id操作。即可马上赋值</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto2/master/Snipaste_2023-04-04_19-45-54.jpg"
                     
                ></p>
]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>后端学习的记录</tag>
        <tag>MyBaits</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习总结</title>
    <url>/2023/02/11/MyBatis%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="MyBatis学习总结"><a href="#MyBatis学习总结" class="headerlink" title="MyBatis学习总结"></a>MyBatis学习总结</h1><p>[TOC]</p>
<h2 id="MyBatis获取参数的方式"><a href="#MyBatis获取参数的方式" class="headerlink" title="MyBatis获取参数的方式"></a>MyBatis获取参数的方式</h2><h3 id="粗略划分"><a href="#粗略划分" class="headerlink" title="粗略划分"></a>粗略划分</h3><ul>
<li>通过**#{}或${}**进行传参</li>
</ul>
<table>
<thead>
<tr>
<th align="center">区</th>
<th align="center">别</th>
</tr>
</thead>
<tbody><tr>
<td align="center">#{}</td>
<td align="center">${}</td>
</tr>
<tr>
<td align="center">本质就是占位符赋值</td>
<td align="center">本质就是字符串拼接</td>
</tr>
<tr>
<td align="center">字符串类型或日期类型的字段进行赋值时，需要手动加单引号或双引号</td>
<td align="center">MyBatis自动添加</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--#&#123;&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;userName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--$&#123;&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = &quot;$&#123;userName&#125;&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过<strong>字面量或实体类</strong>传参</li>
</ul>
<h3 id="详细划分"><a href="#详细划分" class="headerlink" title="详细划分"></a>详细划分</h3><h4 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--#&#123;&#125;中的内容随便写，底层并不知道代表的是啥。仅限单字面量！！！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;userName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--#&#123;&#125;中的内容只能为arg0, arg1...或param1, param2...--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过报错信息得知，原报错信息：</p>
<p style="color: red">Cause: org.apache.ibatis.binding.BindingException: Parameter 'param0' not found. Available parameters are [arg1, arg0, param1, param2]</p>

<h4 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;userName&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">接口类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">User <span class="title function_">checkLoginByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br></pre></td></tr></table></figure>

<p>手动通过map集合传参与MyBatis底层原理相似都是封装为集合，只是手动通过map集合传参可以自定义key。在映射文件中也只能在#{}中用定义的key值。用其他如arg0, arg1…或param1不会报错，只会出现<strong>Parameters: null, null</strong>的日志文件。</p>
<h4 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--#&#123;&#125;中可以使用自己定义的key值，也可以使用同时param1,param2...,也可以混和使用Available parameters are [password, param1, username, param2]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过报错信息得知，原报错信息：</p>
<p style="color: red">Cause: org.apache.ibatis.binding.BindingException: Parameter 'userna' not found. Available parameters are [password, param1, username, param2]</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">接口类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用<span class="doctag">@Param</span>注解与定义map集合用法相似，<span class="doctag">@Param</span>(&quot;username&quot;) String userName为<span class="doctag">@Param</span>(&quot;key值&quot;) String value值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">User <span class="title function_">checkLoginByParam</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String userName, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>



<h4 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">接口类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">33</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@163.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.insertUser(user);</span><br></pre></td></tr></table></figure>

<p>原理是通过属性的get()set()方法实现的</p>
<h2 id="MyBatis的查询功能"><a href="#MyBatis的查询功能" class="headerlink" title="MyBatis的查询功能"></a>MyBatis的查询功能</h2><h3 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h3><p>与MyBatis获取参数的方式专题中的查询方式一样，略。</p>
<p style="color: red">注意使用@Param注解</p>

<blockquote>
<p>当查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.TooManyResultsException: Expected one <span class="title function_">result</span> <span class="params">(or <span class="literal">null</span>)</span> to be returned by <span class="title function_">selectOne</span><span class="params">()</span>, but found: </span><br></pre></td></tr></table></figure>

<p>但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p>
</blockquote>
<h3 id="查询一个list集合"><a href="#查询一个list集合" class="headerlink" title="查询一个list集合"></a>查询一个list集合</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>虽然查询的是list集合，但是resultType仍然是查询语句的返回结果数据类型而不是map类型</p>
<h3 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h3><p>例如查询数据的总条数，resultType直接写查询结果的数据类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">	select count(*) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">resultType别名</th>
<th align="center">数据类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">_byte</td>
<td align="center">byte</td>
</tr>
<tr>
<td align="center">_long</td>
<td align="center">long</td>
</tr>
<tr>
<td align="center">_short</td>
<td align="center">short</td>
</tr>
<tr>
<td align="center">_int</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">_integer</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">_double</td>
<td align="center">double</td>
</tr>
<tr>
<td align="center">_float</td>
<td align="center">flat</td>
</tr>
<tr>
<td align="center">_boolean</td>
<td align="center">boolean</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">String</td>
</tr>
<tr>
<td align="center">byte</td>
<td align="center">Byte</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">Long</td>
</tr>
<tr>
<td align="center">shout</td>
<td align="center">Short</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">Integer</td>
</tr>
<tr>
<td align="center">integer</td>
<td align="center">Integer</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">Double</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">Float</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">Boolean</td>
</tr>
<tr>
<td align="center">date</td>
<td align="center">Date</td>
</tr>
<tr>
<td align="center">decimal</td>
<td align="center">BigDecimal</td>
</tr>
<tr>
<td align="center">bigdecimal</td>
<td align="center">BigDecimal</td>
</tr>
<tr>
<td align="center">object</td>
<td align="center">Object</td>
</tr>
<tr>
<td align="center">map</td>
<td align="center">Map</td>
</tr>
<tr>
<td align="center">hashmap</td>
<td align="center">HashMap</td>
</tr>
<tr>
<td align="center">list</td>
<td align="center">List</td>
</tr>
<tr>
<td align="center">arraylist</td>
<td align="center">ArrayList</td>
</tr>
<tr>
<td align="center">collection</td>
<td align="center">Collection</td>
</tr>
<tr>
<td align="center">iterator</td>
<td align="center">lterator</td>
</tr>
</tbody></table>
<h3 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h3><p>此功能适合查询结果没有对应的实体类的方法使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByIdToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserByIdToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure>

<p>查询结果为：{password&#x3D;123456, gender&#x3D;男, id&#x3D;1, age&#x3D;23, email&#x3D;<a class="link"   href="mailto:&#49;&#x32;&#x33;&#x34;&#x35;&#54;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;" >&#49;&#x32;&#x33;&#x34;&#x35;&#54;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;<i class="fas fa-external-link-alt"></i></a>, username&#x3D;root}</p>
<h3 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h3><p>查询多条数据时有两种方式，第一种是将每一条map放到泛型为map的list集合中，第二种是使用@MapKey注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//结果：&#123;password=123456, gender=男, id=1, age=23, email=12345@qq.com, username=admin&#125;,&#123;password=123456, //gender=男, id=1, age=23, email=12345@qq.com, username=admin&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//结果：&#123;1=&#123;password=123456, gender=男, id=1, age=23, email=12345@qq.com, username=admin&#125;,2=&#123;password=123, gender=男, id=2, age=23, email=12345@qq.com, username=zhangsan&#125;,3=&#123;password=123456, gender=女, id=3, age=33, email=123@qq.com, username=root&#125;,4=&#123;password=123, id=4, username=lisi&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>@MapKey()中value的值可以为查询的某一个字段，注意该字段最好为非空</p>
<h2 id="特殊SQL"><a href="#特殊SQL" class="headerlink" title="特殊SQL"></a>特殊SQL</h2><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>两种方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二种方式一定为””双引号</p>
<h3 id="批量删除与动态设置表名"><a href="#批量删除与动态设置表名" class="headerlink" title="批量删除与动态设置表名"></a>批量删除与动态设置表名</h3><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreUser&quot;</span>&gt;</span></span><br><span class="line">	delete from t_user where id in($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from ￥&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这两种特殊SQL必须使用，因为使用#{}时MyBatis会自动添加单引号，如动态设置表名的报错</p>
<p style="color:red">Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''t_user'' at line 1</p>

<h4 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h4><blockquote>
<p>功能描述：主键id在数据库中是自增的，所以无法在添加数据时就知道该条数据的主键id。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;1234@qq.com&quot;</span>);</span><br><span class="line">mapper.insertUser(user);</span><br><span class="line">System.out.println(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原输出结果</span></span><br><span class="line">	User&#123;id=<span class="literal">null</span>, username=<span class="string">&#x27;lisi&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>, age=<span class="number">12</span>, gender=<span class="string">&#x27;男&#x27;</span>, email=<span class="string">&#x27;1234@qq.com&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);</span></span><br><span class="line"><span class="comment">	useGeneratedKeys:表示当前添加功能使用自增的主键</span></span><br><span class="line"><span class="comment">	keyProperty:将添加的数据的自增主键为实体类类型的参数的属性赋值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>改造后输出结果：User{id&#x3D;9, username&#x3D;’lisi’, password&#x3D;’123456’, age&#x3D;12, gender&#x3D;’男’, email&#x3D;‘<a class="link"   href="mailto:&#x31;&#x32;&#51;&#52;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;" >&#x31;&#x32;&#51;&#52;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;<i class="fas fa-external-link-alt"></i></a>‘}</p>
</blockquote>
<h2 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h2><h3 id="为什么要使用resultMap"><a href="#为什么要使用resultMap" class="headerlink" title="为什么要使用resultMap?"></a>为什么要使用resultMap?</h3><p>因为后端数据库中的字段与java中的pojo类的属性名不一样。例如在java中员工ID的表示方法为<strong>empId</strong>，而在数据库中表示为<strong>emp_id</strong>。</p>
<h3 id="字段名和属性名不一致时如何处理？"><a href="#字段名和属性名不一致时如何处理？" class="headerlink" title="字段名和属性名不一致时如何处理？"></a>字段名和属性名不一致时如何处理？</h3><h4 id="1、为查询的字段设置别名，和属性名保持一致"><a href="#1、为查询的字段设置别名，和属性名保持一致" class="headerlink" title="1、为查询的字段设置别名，和属性名保持一致"></a>1、为查询的字段设置别名，和属性名保持一致</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEmpId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select emp_id empId,emp_name empName,age,gender from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、当字段符合MySQL的要求使用-，而属性符合java的要求使用驼峰"><a href="#2、当字段符合MySQL的要求使用-，而属性符合java的要求使用驼峰" class="headerlink" title="2、当字段符合MySQL的要求使用_，而属性符合java的要求使用驼峰"></a>2、当字段符合MySQL的要求使用_，而属性符合java的要求使用驼峰</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--将下划线映射为驼峰--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3、使用resultMap自定义映射处理"><a href="#3、使用resultMap自定义映射处理" class="headerlink" title="3、使用resultMap自定义映射处理"></a>3、使用resultMap自定义映射处理</h4><h5 id="resultMap的相关使用"><a href="#resultMap的相关使用" class="headerlink" title="resultMap的相关使用"></a>resultMap的相关使用</h5><table>
<thead>
<tr>
<th align="center">标签名</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">resultMap</td>
<td align="center">设置自定义的映射关系</td>
</tr>
<tr>
<td align="center">id</td>
<td align="center">resultMap的唯一标识</td>
</tr>
<tr>
<td align="center">type</td>
<td align="center">处理映射关系的实体类的类型</td>
</tr>
<tr>
<td align="center">id</td>
<td align="center">处理主键和实体类中属性的映射关系</td>
</tr>
<tr>
<td align="center">result</td>
<td align="center">处理普通字段和实体类中属性的映射关系</td>
</tr>
<tr>
<td align="center">association</td>
<td align="center">处理多对一的映射关系（处理实体类类型的属性）</td>
</tr>
<tr>
<td align="center">collection</td>
<td align="center">处理一对多的映射关系（处理集合类型的属性）</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">设置映射关系中的字段名，必须是sql查询出的某个字段</td>
</tr>
<tr>
<td align="center">property</td>
<td align="center">设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名</td>
</tr>
</tbody></table>
<h5 id="处理普通映射即字段与属性名不一致"><a href="#处理普通映射即字段与属性名不一致" class="headerlink" title="处理普通映射即字段与属性名不一致"></a>处理普通映射即字段与属性名不一致</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEmpId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--字段名和属性名相同的可以不用写--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="处理多对一的映射关系"><a href="#处理多对一的映射关系" class="headerlink" title="处理多对一的映射关系"></a>处理多对一的映射关系</h5><h6 id="1、级联方式处理"><a href="#1、级联方式处理" class="headerlink" title="1、级联方式处理"></a>1、级联方式处理</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMap&quot;</span>&gt;</span></span><br><span class="line">	select t_emp.*,t_dept.* from t_emp left join t_dept on t_emp.dept_id = t_dept.dept_id where t_emp.emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dept表示Emp类中的Dept属性--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptId&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    <span class="comment">//构造方法getset方法省略。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2、association"><a href="#2、association" class="headerlink" title="2、association"></a>2、association</h6><p><strong>association相关使用</strong></p>
<table>
<thead>
<tr>
<th>标签名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>association</td>
<td>处理多对一的映射关系（处理实体类类型的属性）</td>
</tr>
<tr>
<td>property</td>
<td>设置需要处理映射关系的属性的属性名</td>
</tr>
<tr>
<td>javaType</td>
<td>设置要处理的属性的类型</td>
</tr>
<tr>
<td>fetchType</td>
<td>在开启了延迟加载的环境中，通过该属性设置当前的分步查询是否使用延迟加载</td>
</tr>
<tr>
<td></td>
<td>fetchType&#x3D;”eager(立即加载)</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="3、分步查询"><a href="#3、分步查询" class="headerlink" title="3、分步查询"></a>3、分步查询</h6><p>简单来讲就是通过第一步查询的结果中的外键属性作为第二步查询的where条件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where emp_id = #&#123;empId&#125;<span class="comment">&lt;!--查询结果中有一个字段为dept_id--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第一步查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span>&lt;!<span class="attr">--dept仍然表示Emp类中的Dept属性--</span>&gt;</span></span><br><span class="line">				 select=&quot;com.sxx.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;<span class="comment">&lt;!--第二步sql语句的id位置--&gt;</span></span><br><span class="line">			 	 column=&quot;dept_id&quot; /&gt;<span class="comment">&lt;!--对应查询结果中字段dept_id--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二步查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sxx.mybatis.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--接口方法：Dept getEmpAndDeptByStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span><span class="comment">&lt;!--接口方法返回值为Dept所以resultType=&quot;Dept&quot;--&gt;</span></span><br><span class="line">		select * from t_dept where dept_id = #&#123;deptId&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>延时加载：如分布查询虽然查到了员工的完整信息但是我只想查看一下员工的姓名，而姓名在第一步查询中，所以没必要进行第二步查询造成资源浪费所以就需要延时加载。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置方式:延时和按需相配合才能实现延时加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--延时加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--按需加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="处理一对多的映射关系"><a href="#处理一对多的映射关系" class="headerlink" title="处理一对多的映射关系"></a>处理一对多的映射关系</h5><h6 id="1、collection"><a href="#1、collection" class="headerlink" title="1、collection"></a>1、collection</h6><p><strong>collection相关使用</strong></p>
<table>
<thead>
<tr>
<th>标签</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>collection</td>
<td>处理一对多的映射关系（处理集合类型的属性）</td>
</tr>
<tr>
<td>ofType</td>
<td>设置集合类型的属性中存储的数据的类型</td>
</tr>
<tr>
<td>fetchType</td>
<td>在开启了延迟加载的环境中，通过该属性设置当前的分步查询是否使用延迟加载</td>
</tr>
<tr>
<td></td>
<td>fetchType&#x3D;”eager(立即加载)</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dept <span class="title function_">getDeptAndEmpByDeptId</span><span class="params">(<span class="meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByDeptId(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByDeptId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">	SELECT * FROM t_dept LEFT JOIN t_emp ON t_dept.dept_id = t_emp.dept_id WHERE t_dept.dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> /&gt;</span></span><br><span class="line">   	    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2、分布查询"><a href="#2、分布查询" class="headerlink" title="2、分布查询"></a>2、分布查询</h6><p>略</p>
<h2 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h2><h3 id="一级缓存：默认开启"><a href="#一级缓存：默认开启" class="headerlink" title="一级缓存：默认开启"></a>一级缓存：默认开启</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>MyBatis的一级缓存是SqlSession级别的，即通过<strong>同一个SqlSession</strong>查询的数据会被缓存再次使用同一个SqlSession查询同一条数据，会从缓存中获取</p>
<h4 id="一级缓存失效的四种情况："><a href="#一级缓存失效的四种情况：" class="headerlink" title="一级缓存失效的四种情况："></a><strong>一级缓存失效的四种情况</strong>：</h4><ul>
<li><p>不同的SqlSession对应不同的一级缓存</p>
</li>
<li><p>同一个SqlSession但是查询条件不同</p>
</li>
<li><p>同一个SqlSession两次查询期间执行了任何一次增删改操作</p>
</li>
<li><p>同一个SqlSession两次查询期间手动清空了缓存</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line"><span class="type">CacheMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CacheMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> mapper1.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp1);</span><br><span class="line"></span><br><span class="line">sqlSession1.clearCache();<span class="comment">//清除缓存</span></span><br><span class="line"></span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> mapper1.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp2);</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line"><span class="type">CacheMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(CacheMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> mapper2.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp3);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">不清楚缓存输出结果：</span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">17</span>:<span class="number">29</span>:<span class="number">47</span>,<span class="number">551</span> ==&gt;  Preparing: select * from t_emp <span class="type">where</span> <span class="variable">emp_id</span> <span class="operator">=</span> ?  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">17</span>:<span class="number">29</span>:<span class="number">47</span>,<span class="number">581</span> ==&gt; Parameters: <span class="number">1</span>(Integer)  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">17</span>:<span class="number">29</span>:<span class="number">47</span>,<span class="number">607</span> &lt;==      Total: <span class="number">1</span>  (BaseJdbcLogger.java:<span class="number">137</span>)</span><br><span class="line"></span><br><span class="line">Emp&#123;empId=<span class="literal">null</span>, empName=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">10</span>, gender=<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">Emp&#123;empId=<span class="literal">null</span>, empName=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">10</span>, gender=<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">17</span>:<span class="number">29</span>:<span class="number">47</span>,<span class="number">656</span> ==&gt;  Preparing: select * from t_emp <span class="type">where</span> <span class="variable">emp_id</span> <span class="operator">=</span> ?  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">17</span>:<span class="number">29</span>:<span class="number">47</span>,<span class="number">656</span> ==&gt; Parameters: <span class="number">1</span>(Integer)  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">17</span>:<span class="number">29</span>:<span class="number">47</span>,<span class="number">659</span> &lt;==      Total: <span class="number">1</span>  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line"></span><br><span class="line">Emp&#123;empId=<span class="literal">null</span>, empName=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">10</span>, gender=<span class="string">&#x27;男&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">清除缓存输出结果：</span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">12</span>:<span class="number">13</span>:<span class="number">00</span>,<span class="number">782</span> ==&gt;  Preparing: select * from t_emp <span class="type">where</span> <span class="variable">emp_id</span> <span class="operator">=</span> ?  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">12</span>:<span class="number">13</span>:<span class="number">00</span>,<span class="number">814</span> ==&gt; Parameters: <span class="number">1</span>(Integer)  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">12</span>:<span class="number">13</span>:<span class="number">00</span>,<span class="number">842</span> &lt;==      Total: <span class="number">1</span>  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line"></span><br><span class="line">Emp&#123;empId=<span class="literal">null</span>, empName=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">10</span>, gender=<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">12</span>:<span class="number">13</span>:<span class="number">00</span>,<span class="number">844</span> ==&gt;  Preparing: select * from t_emp <span class="type">where</span> <span class="variable">emp_id</span> <span class="operator">=</span> ?  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">12</span>:<span class="number">13</span>:<span class="number">00</span>,<span class="number">845</span> ==&gt; Parameters: <span class="number">1</span>(Integer)  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">12</span>:<span class="number">13</span>:<span class="number">00</span>,<span class="number">846</span> &lt;==      Total: <span class="number">1</span>  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line"></span><br><span class="line">Emp&#123;empId=<span class="literal">null</span>, empName=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">10</span>, gender=<span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">12</span>:<span class="number">13</span>:<span class="number">00</span>,<span class="number">892</span> ==&gt;  Preparing: select * from t_emp <span class="type">where</span> <span class="variable">emp_id</span> <span class="operator">=</span> ?  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">12</span>:<span class="number">13</span>:<span class="number">00</span>,<span class="number">892</span> ==&gt; Parameters: <span class="number">1</span>(Integer)  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">02</span>-09 <span class="number">12</span>:<span class="number">13</span>:<span class="number">00</span>,<span class="number">895</span> &lt;==      Total: <span class="number">1</span>  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line"></span><br><span class="line">Emp&#123;empId=<span class="literal">null</span>, empName=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">10</span>, gender=<span class="string">&#x27;男&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><h4 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h4><p>二级缓存是SqlSessionFactory级别，通过<strong>同一个SqlSessionFactory</strong>创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p>
<h4 id="使二级缓存失效的情况"><a href="#使二级缓存失效的情况" class="headerlink" title="使二级缓存失效的情况"></a>使二级缓存失效的情况</h4><p>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>
<h4 id="使用条件："><a href="#使用条件：" class="headerlink" title="使用条件："></a>使用条件：</h4><ol>
<li>在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</li>
<li>在映射文件中设置标签**<cache/>**</li>
<li>二级缓存必须在<strong>SqlSession关闭或提交之后有效</strong></li>
<li>查询的数据所转换的实体类类型必须实现序列化的接口</li>
</ol>
<h5 id="解释：为什么要实现序列化接口"><a href="#解释：为什么要实现序列化接口" class="headerlink" title="解释：为什么要实现序列化接口"></a>解释：为什么要实现序列化接口</h5><p>如果不进行序列化接口会报错</p>
<p style="color: red">org.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: com.sxx.mybatis.pojo.Emp</p>

<p>如何序列化接口？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> build.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> build.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">CacheMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CacheMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> mapper1.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp1);</span><br><span class="line">sqlSession1.close();</span><br><span class="line"><span class="type">CacheMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(CacheMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> mapper2.getEmpById(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp2);</span><br><span class="line">sqlSession2.close();</span><br></pre></td></tr></table></figure>

<p style="color: red">Cache Hit Ratio不为0则是使用了缓存，例如第一行第八行</p>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEBUG 02-09 17:52:41,087 Cache Hit Ratio [com.sxx.mybatis.mapper.CacheMapper]: 0.0  (LoggingCache.java:60) </span><br><span class="line">DEBUG 02-09 17:52:43,223 ==&gt;  Preparing: select * from t_emp where emp_id = ?  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 02-09 17:52:43,255 ==&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:137) </span><br><span class="line">DEBUG 02-09 17:52:43,282 &lt;==      Total: 1  (BaseJdbcLogger.java:137)</span><br><span class="line"></span><br><span class="line">Emp&#123;empId=null, empName=&#x27;null&#x27;, age=10, gender=&#x27;男&#x27;&#125;</span><br><span class="line"></span><br><span class="line">WARN  02-09 17:52:43,286 As you are using functionality that deserializes object streams, it is recommended to define the JEP-290 serial filter. Please refer to https://docs.oracle.com/pls/topic/lookup?ctx=javase15&amp;id=GUID-8296D8E8-2B93-4B9A-856E-0A65AF9B8C66  (SerialFilterChecker.java:46) </span><br><span class="line">DEBUG 02-09 17:52:43,288 Cache Hit Ratio [com.sxx.mybatis.mapper.CacheMapper]: 0.5  (LoggingCache.java:60) </span><br><span class="line"></span><br><span class="line">Emp&#123;empId=null, empName=&#x27;null&#x27;, age=10, gender=&#x27;男&#x27;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h3><ol>
<li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</li>
<li>如果二级缓存没有命中，再查询一级缓存</li>
<li>如果一级缓存也没有命中，则查询数据库</li>
<li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li>
</ol>
<h3 id="整合第三方缓存EHCache-lt-—针对于二级缓存"><a href="#整合第三方缓存EHCache-lt-—针对于二级缓存" class="headerlink" title="整合第三方缓存EHCache&lt;—针对于二级缓存"></a>整合第三方缓存EHCache&lt;—针对于二级缓存</h3><h4 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、创建EHCache的配置文件ehcache-xml"><a href="#2、创建EHCache的配置文件ehcache-xml" class="headerlink" title="2、创建EHCache的配置文件ehcache.xml"></a>2、创建EHCache的配置文件ehcache.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">		<span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、设置二级缓存的类型"><a href="#3、设置二级缓存的类型" class="headerlink" title="3、设置二级缓存的类型"></a>3、设置二级缓存的类型</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、加入logback日志"><a href="#4、加入logback日志" class="headerlink" title="4、加入logback日志"></a>4、加入logback日志</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 按照顺序分别是： 时间、日志级别、线程名称、打印日志的类、日志主体内容、换行--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger][%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是： DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis逆向工程—针对于单表查询"><a href="#MyBatis逆向工程—针对于单表查询" class="headerlink" title="MyBatis逆向工程—针对于单表查询"></a>MyBatis逆向工程—针对于单表查询</h2><blockquote>
<p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源（Java实体类、Mapper接口、Mapper映射文件）</p>
</blockquote>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="1、添加依赖插件"><a href="#1、添加依赖插件" class="headerlink" title="1、添加依赖插件"></a>1、添加依赖插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-mbg-demo06<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、创建MyBatis的核心配置文件"><a href="#2、创建MyBatis的核心配置文件" class="headerlink" title="2、创建MyBatis的核心配置文件"></a>2、创建MyBatis的核心配置文件</h4><p>略</p>
<h4 id="3、创建逆向工程的配置文件"><a href="#3、创建逆向工程的配置文件" class="headerlink" title="3、创建逆向工程的配置文件"></a>3、创建逆向工程的配置文件</h4><p style="color: red">配置文件名必须为generatorConfig.xml</p>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">                    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">                    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;。。。&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.sxx.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span><span class="comment">&lt;!--是否可以使用子包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.sxx.mybatis.mapper&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.sxx.mybatis.mapper&quot;</span>  <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4、执行MBG插件的generate目标"><a href="#4、执行MBG插件的generate目标" class="headerlink" title="4、执行MBG插件的generate目标"></a>4、执行MBG插件的generate目标</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-11_16-49-32.jpg"
                     
                ></p>
<h3 id="奢华尊享版使用说明"><a href="#奢华尊享版使用说明" class="headerlink" title="奢华尊享版使用说明"></a>奢华尊享版使用说明</h3><h4 id="常用单词说明"><a href="#常用单词说明" class="headerlink" title="常用单词说明"></a>常用单词说明</h4><table>
<thead>
<tr>
<th>单词</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ByPrimaryKey</td>
<td>根据主键</td>
</tr>
<tr>
<td>ByExample</td>
<td>通过条件</td>
</tr>
<tr>
<td>Selective</td>
<td>选择性</td>
</tr>
</tbody></table>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><h5 id="根据ID查询数据"><a href="#根据ID查询数据" class="headerlink" title="根据ID查询数据"></a>根据ID查询数据</h5><p>也成为根据主键查询数据所以使用的方法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapper.selectByPrimaryKey(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h5 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapper.selectByExample(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<p>具体含义为：select emp_id, emp_name, age, gender, dept_id from t_emp也就是没有条件</p>
<h5 id="根据条件查询数据"><a href="#根据条件查询数据" class="headerlink" title="根据条件查询数据"></a>根据条件查询数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">EmpExample</span> <span class="variable">empExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();<span class="comment">//需要new一个条件对象</span></span><br><span class="line">empExample.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);<span class="comment">//and</span></span><br><span class="line">empExample.or().andGenderEqualTo(<span class="string">&quot;男&quot;</span>);<span class="comment">//使用or时需要单独empExample.or()</span></span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(empExample);</span><br><span class="line">emps.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出结果日志：</span></span><br><span class="line"><span class="comment">//	只使用and</span></span><br><span class="line">Preparing: select emp_id, emp_name, age, gender, dept_id from t_emp <span class="title function_">WHERE</span> <span class="params">( emp_name = ? and age &gt;= ? )</span></span><br><span class="line"><span class="comment">//	使用and和or</span></span><br><span class="line">select emp_id, emp_name, age, gender, dept_id from t_emp <span class="title function_">WHERE</span> <span class="params">( emp_name = ? and age &gt;= ? )</span> or( gender = ? )</span><br></pre></td></tr></table></figure>

<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>原数据：<img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-11_17-15-17.jpg"
                     
                ></p>
<h5 id="普通修改"><a href="#普通修改" class="headerlink" title="普通修改"></a>普通修改</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">1</span>,<span class="string">&quot;小黑&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">mapper.updateByPrimaryKey(emp);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出</span></span><br><span class="line">Preparing: update t_emp <span class="type">set</span> <span class="variable">emp_name</span> <span class="operator">=</span> ?, age = ?, gender = ?, dept_id = ? <span class="type">where</span> <span class="variable">emp_id</span> <span class="operator">=</span> ?</span><br><span class="line">Parameters: 小黑(String), <span class="literal">null</span>, 女(String), <span class="literal">null</span>, <span class="number">1</span>(Integer)</span><br></pre></td></tr></table></figure>

<p>更新后数据：<img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-11_17-17-48.jpg"
                     
                ></p>
<h5 id="选择性修改"><a href="#选择性修改" class="headerlink" title="选择性修改"></a>选择性修改</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapper.updateByPrimaryKeySelective(emp);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出</span></span><br><span class="line">Preparing: update t_emp <span class="type">SET</span> <span class="variable">emp_name</span> <span class="operator">=</span> ?, gender = ? <span class="type">where</span> <span class="variable">emp_id</span> <span class="operator">=</span> ?</span><br><span class="line">Parameters: 小黑(String), 女(String), <span class="number">1</span>(Integer)</span><br></pre></td></tr></table></figure>

<p>更新后数据<img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-11_17-17-48.jpg"
                     
                ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>使用Selective选择性代表手动输入SQL语句中为null的条件系统直接忽略，而不使用Selective则为将数据改为null</p>
<h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="1、添加依赖-1"><a href="#1、添加依赖-1" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、在MyBatis核心配置文件配置分页插件"><a href="#2、在MyBatis核心配置文件配置分页插件" class="headerlink" title="2、在MyBatis核心配置文件配置分页插件"></a>2、在MyBatis核心配置文件配置分页插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置分页插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="comment">//查询功能之前开启分页功能</span></span><br><span class="line">Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//查询功能之后可以获取分页相关的所有数据</span></span><br><span class="line">PageInfo&lt;Emp&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);<span class="comment">//导航页页码数本页的前两页加本页的后两页</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<ul>
<li><p>在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能</p>
<blockquote>
<p>pageNum：当前页的页码<br>pageSize：每页显示的条数</p>
</blockquote>
</li>
<li><p>在查询获取list集合之后，使用PageInfo<T> pageInfo &#x3D; new PageInfo&lt;&gt;(List<T> list, int<br>navigatePages)获取分页相关数据</p>
<blockquote>
<p>list：分页之后的数据<br>navigatePages：导航分页的页码数</p>
</blockquote>
</li>
<li><p>分页相关数据</p>
<blockquote>
<p>PageInfo{<br>pageNum&#x3D;8, pageSize&#x3D;4, size&#x3D;2, startRow&#x3D;29, endRow&#x3D;30, total&#x3D;30, pages&#x3D;8,<br>list&#x3D;Page{count&#x3D;true, pageNum&#x3D;8, pageSize&#x3D;4, startRow&#x3D;28, endRow&#x3D;32, total&#x3D;30,<br>pages&#x3D;8, reasonable&#x3D;false, pageSizeZero&#x3D;false},<br>prePage&#x3D;7, nextPage&#x3D;0, isFirstPage&#x3D;false, isLastPage&#x3D;true, hasPreviousPage&#x3D;true,<br>hasNextPage&#x3D;false, navigatePages&#x3D;5, navigateFirstPage4, navigateLastPage8,<br>navigatepageNums&#x3D;[4, 5, 6, 7, 8]<br>}</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th>数据</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>pageNum</td>
<td>当前页的页码</td>
</tr>
<tr>
<td>pageSize</td>
<td>每页显示的条数</td>
</tr>
<tr>
<td>size</td>
<td>当前页显示的真实条数</td>
</tr>
<tr>
<td>total</td>
<td>总记录数</td>
</tr>
<tr>
<td>pages</td>
<td>总页数</td>
</tr>
<tr>
<td>prePage</td>
<td>上一页的页码</td>
</tr>
<tr>
<td>nextPage</td>
<td>下一页的页码</td>
</tr>
<tr>
<td>isFirstPage&#x2F;isLastPage</td>
<td>是否为第一页&#x2F;最后一页</td>
</tr>
<tr>
<td>hasPreviousPage&#x2F;hasNextPage</td>
<td>是否存在上一页&#x2F;下一页</td>
</tr>
<tr>
<td>navigatePages</td>
<td>导航分页的页码数</td>
</tr>
<tr>
<td>navigatepageNums</td>
<td>导航分页的页码，[1,2,3,4,5]</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>后端学习的记录</tag>
        <tag>MyBaits</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习笔记-运维篇</title>
    <url>/2023/03/15/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E8%BF%90%E7%BB%B4%E7%AF%87/</url>
    <content><![CDATA[<h1 id="SpringBoot学习笔记–运维篇"><a href="#SpringBoot学习笔记–运维篇" class="headerlink" title="SpringBoot学习笔记–运维篇"></a>SpringBoot学习笔记–运维篇</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="配置文件的分类"><a href="#配置文件的分类" class="headerlink" title="配置文件的分类"></a>配置文件的分类</h3><h4 id="SpringBoot中4级配置文件"><a href="#SpringBoot中4级配置文件" class="headerlink" title="SpringBoot中4级配置文件"></a>SpringBoot中4级配置文件</h4><p>1级： file ：config&#x2F;application.yml</p>
<p>2级： file ：application.yml</p>
<p>3级：classpath：config&#x2F;application.yml</p>
<p>4级：classpath：application.yml<br><strong>由高到低</strong></p>
<h3 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h3><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-03_19-31-51.jpg"
                     
                ></p>
<p>如上图，SpringBoot默认的配置文件名为application.properties ,如果改了后缀SpringBoot仍然能够识别出来。但如果改了后缀就需要声明一些</p>
<h4 id="改了配置文件的前缀"><a href="#改了配置文件的前缀" class="headerlink" title="改了配置文件的前缀"></a>改了配置文件的前缀</h4><h5 id="第一种方式：告诉前缀名字"><a href="#第一种方式：告诉前缀名字" class="headerlink" title="第一种方式：告诉前缀名字"></a>第一种方式：告诉前缀名字</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-03_19-36-11.jpg"
                     
                ></p>
<p>在启动配置添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--spring.config.name=ebank</span><br></pre></td></tr></table></figure>

<h5 id="第二种方式：告诉配置文件位置"><a href="#第二种方式：告诉配置文件位置" class="headerlink" title="第二种方式：告诉配置文件位置"></a>第二种方式：告诉配置文件位置</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-03_19-36-39.jpg"
                     
                ></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--spring.config.location=classpath:/ebank.yml</span><br></pre></td></tr></table></figure>

<h4 id="多个配置文件"><a href="#多个配置文件" class="headerlink" title="多个配置文件"></a>多个配置文件</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-03_19-36-49.jpg"
                     
                ></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--spring.config.location=classpath:/ebank.yml,classpath:/ebank-service.yml</span><br></pre></td></tr></table></figure>

<p>位置靠后的配置文件等级高于位置在前的</p>
<h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><h3 id="YAML版"><a href="#YAML版" class="headerlink" title="YAML版"></a>YAML版</h3><h4 id="原版"><a href="#原版" class="headerlink" title="原版"></a>原版</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用环境</span></span><br><span class="line"><span class="comment"># 公共配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境</span></span><br><span class="line"><span class="string">---</span> <span class="comment"># 各个环境的分割线	生产环境</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="string">---</span> <span class="comment"># 开发环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"></span><br><span class="line"><span class="string">---</span> <span class="comment"># 测试环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>分别建不同的配置文件储存不同环境的配置信息，在主配置文件即application.yml中写使用哪个配置文件</p>
<h5 id="多环境配置文件"><a href="#多环境配置文件" class="headerlink" title="多环境配置文件"></a>多环境配置文件</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-dev.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-pro.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-test.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<h5 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<h3 id="properties版"><a href="#properties版" class="headerlink" title="properties版"></a>properties版</h3><p style="color:red">properties文件多环境配置仅支持多文件格式</p>

<h4 id="多环境配置文件-1"><a href="#多环境配置文件-1" class="headerlink" title="多环境配置文件"></a>多环境配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application-dev.properties</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">9081</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application-dev.properties</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">9082</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application-test.properties</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">9083</span></span><br></pre></td></tr></table></figure>

<h4 id="主配置文件-1"><a href="#主配置文件-1" class="headerlink" title="主配置文件"></a>主配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.properties</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>

<h3 id="多环境开发技巧"><a href="#多环境开发技巧" class="headerlink" title="多环境开发技巧"></a>多环境开发技巧</h3><p>对不同类型的配置文件进行分类，如MyBatis数据库的配置文件、Redis的配置文件、MVC的配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-dev</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-devDB</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-devMVC</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<h4 id="主配置文件-2"><a href="#主配置文件-2" class="headerlink" title="主配置文件"></a>主配置文件</h4><p style="color:red">include中位置靠后的相同信息配置文件覆盖位置靠前的配置文件</p>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">include:</span> <span class="string">devDB,devMVC</span></span><br></pre></td></tr></table></figure>

<h4 id="改进-1"><a href="#改进-1" class="headerlink" title="改进"></a>改进</h4><p>分成不同的组</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">&quot;dev&quot;:</span> <span class="string">devDB,devMVC</span></span><br><span class="line">      <span class="attr">&quot;pro&quot;:</span> <span class="string">proDB,proMVC</span></span><br></pre></td></tr></table></figure>

<h3 id="多环境开发控制"><a href="#多环境开发控制" class="headerlink" title="多环境开发控制"></a>多环境开发控制</h3><p>Maven与SpringBoot多环境冲突现象解决方案</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置多环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用哪个环境就使activeByDefault变为true--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@profile.active@</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">&quot;dev&quot;:</span> <span class="string">devDB,devMVC</span></span><br><span class="line">      <span class="attr">&quot;pro&quot;:</span> <span class="string">proDB,proMVC</span></span><br></pre></td></tr></table></figure>

<h2 id="日志操作"><a href="#日志操作" class="headerlink" title="日志操作"></a>日志操作</h2><h3 id="日志基础"><a href="#日志基础" class="headerlink" title="日志基础"></a>日志基础</h3><h4 id="如何设置日志"><a href="#如何设置日志" class="headerlink" title="如何设置日志"></a>如何设置日志</h4><h5 id="1-在需要用日志的类中创建一个日志对象"><a href="#1-在需要用日志的类中创建一个日志对象" class="headerlink" title="1 在需要用日志的类中创建一个日志对象"></a>1 在需要用日志的类中创建一个日志对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">Log</span> <span class="operator">=</span> LoggerFactory.getLogger(BookController.class);</span><br></pre></td></tr></table></figure>

<h5 id="2-直接调用"><a href="#2-直接调用" class="headerlink" title="2 直接调用"></a>2 直接调用</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log.debug(<span class="string">&quot;debug...&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;info...&quot;</span>);</span><br><span class="line">log.warn(<span class="string">&quot;warn...&quot;</span>);</span><br><span class="line">log.error(<span class="string">&quot;error...&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="关于日志的配置"><a href="#关于日志的配置" class="headerlink" title="关于日志的配置"></a>关于日志的配置</h4><h5 id="设置日志的输出level"><a href="#设置日志的输出level" class="headerlink" title="设置日志的输出level"></a>设置日志的输出level</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此方法不推荐</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span>		<span class="string">info:true</span> <span class="comment">#SpringBoot默认的日志level为info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐方法</span></span><br><span class="line"><span class="comment"># root表示根节点，即整体应用日志级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独对某个包设置日志级别，例如对controller包（不推荐，累死）</span></span><br><span class="line">	<span class="attr">com.sxx.controller:</span> <span class="string">debug</span></span><br><span class="line">	<span class="attr">ebank:</span> <span class="string">warn</span></span><br><span class="line"><span class="comment"># 分组进行level管理（实际开发方式）</span></span><br><span class="line">  <span class="comment"># 设置分组，对某个组设置日志级别</span></span><br><span class="line">  <span class="attr">group:</span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">com.sxx.controller,com.sxx.service,com.sxx.dao</span></span><br><span class="line">    <span class="attr">iservice:</span> <span class="string">com.alibaba</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h4 id="日志对象创建问题"><a href="#日志对象创建问题" class="headerlink" title="日志对象创建问题"></a>日志对象创建问题</h4><p>如果要自定义日志要在每个类中创建log对象，有什么方法可以减少一点工作量呢？</p>
<h5 id="法一-继承一个以及new过log对象的类"><a href="#法一-继承一个以及new过log对象的类" class="headerlink" title="法一 继承一个以及new过log对象的类"></a>法一 继承一个以及new过log对象的类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class clazz ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseClass</span><span class="params">()</span>&#123;</span><br><span class="line">        clazz = <span class="built_in">this</span>.getClass();</span><br><span class="line">        log = LoggerFactory.getLogger(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="法二使用lombok的-slf4j注解该对象就叫log"><a href="#法二使用lombok的-slf4j注解该对象就叫log" class="headerlink" title="法二使用lombok的@slf4j注解该对象就叫log"></a>法二使用lombok的@slf4j注解该对象就叫log</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;springboot is running...&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;debug...&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;info...&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;warn...&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot is running...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日志输出格式控制"><a href="#日志输出格式控制" class="headerlink" title="日志输出格式控制"></a>日志输出格式控制</h3><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-15_20-03-46.jpg"
                     
                ></p>
<p><strong>PID：进程ID，用于表明当前操作所处的进程，当多服务同时记录日志时，该值可用于协助程序员调试程序</strong></p>
<p><strong>所属类&#x2F;接口名：当前显示信息为SpringBoot重写后的信息，名称过长时，简化包名书写为首字母，甚至直接删除</strong></p>
<h4 id="日志中各种信息的表示"><a href="#日志中各种信息的表示" class="headerlink" title="日志中各种信息的表示"></a>日志中各种信息的表示</h4><table>
<thead>
<tr>
<th align="center">格式</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%d</td>
<td align="left">日期</td>
</tr>
<tr>
<td align="center">%m</td>
<td align="left">消息</td>
</tr>
<tr>
<td align="center">%n</td>
<td align="left">换行</td>
</tr>
<tr>
<td align="center">%clr()</td>
<td align="left">日志信息颜色六个颜色</td>
</tr>
<tr>
<td align="center">%p</td>
<td align="left">日志level</td>
</tr>
<tr>
<td align="center">%t</td>
<td align="left">线程</td>
</tr>
<tr>
<td align="center">%c</td>
<td align="left">所属类</td>
</tr>
<tr>
<td align="center">%字母{cyan}</td>
<td align="left">{}中的内容为颜色</td>
</tr>
<tr>
<td align="center">%正负号数字.小数 字母</td>
<td align="left">正负号代表右左对齐默认右对齐，数字代表所占总宽度，小数代表内容的截取</td>
</tr>
</tbody></table>
<h4 id="设置日志格式"><a href="#设置日志格式" class="headerlink" title="设置日志格式"></a>设置日志格式</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">  	<span class="attr">consle:</span> <span class="string">&quot;日志格式&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><h4 id="日志文件的名字"><a href="#日志文件的名字" class="headerlink" title="日志文件的名字"></a>日志文件的名字</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">  	<span class="attr">name:</span> <span class="string">sever.log</span></span><br></pre></td></tr></table></figure>

<h4 id="滚动记录日志"><a href="#滚动记录日志" class="headerlink" title="滚动记录日志"></a>滚动记录日志</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">  	<span class="attr">name:</span> <span class="string">sever.log</span></span><br><span class="line">  <span class="attr">logback:</span></span><br><span class="line">    <span class="comment"># 日志文件大小，超出该值自动开一个新的文件</span></span><br><span class="line">    <span class="attr">rollingpolicy:</span></span><br><span class="line">      <span class="comment"># 日志文件大小，超出该值自动开一个新的文件</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">4KB</span></span><br><span class="line">      <span class="comment"># 日志文件格式server.2023-03-15.0.log</span></span><br><span class="line">      <span class="attr">file-name-pattern:</span> <span class="string">server.%d&#123;yyyy-mm-dd&#125;.%i.log</span>	</span><br></pre></td></tr></table></figure>

<h3 id="总配置"><a href="#总配置" class="headerlink" title="总配置"></a>总配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="comment"># 设置分组，对某个组设置日志级别</span></span><br><span class="line">  <span class="attr">group:</span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">com.sxx.controller,com.sxx.service,com.sxx.dao</span></span><br><span class="line">    <span class="attr">iservice:</span> <span class="string">com.alibaba</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="comment"># 设置某个包的日志级别</span></span><br><span class="line"><span class="comment">#    com.sxx.controller: debug</span></span><br><span class="line">    <span class="attr">ebank:</span> <span class="string">warn</span></span><br><span class="line">  <span class="comment"># 设置日志的模板格式</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%clr(%d) %clr(%5p) --- %clr([%16t]) %clr(%-40.40c)&#123;cyan&#125; : %clr(%m) %n&quot;</span></span><br><span class="line">    <span class="comment">#    console: &quot;%d - %m%n&quot;</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sever.log</span></span><br><span class="line">  <span class="attr">logback:</span></span><br><span class="line">    <span class="comment"># 日志文件大小，超出该值自动开一个新的文件</span></span><br><span class="line">    <span class="attr">rollingpolicy:</span></span><br><span class="line">      <span class="comment"># 日志文件大小，超出该值自动开一个新的文件</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">4KB</span></span><br><span class="line">      <span class="comment"># 日志文件格式server.2023-03-15.0.log</span></span><br><span class="line">      <span class="attr">file-name-pattern:</span> <span class="string">server.%d&#123;yyyy-mm-dd&#125;.%i.log</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>后端学习的记录</tag>
        <tag>SpringBoot2</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习笔记-基础篇</title>
    <url>/2023/02/27/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="SpringBoot学习笔记-基础篇"><a href="#SpringBoot学习笔记-基础篇" class="headerlink" title="SpringBoot学习笔记-基础篇"></a>SpringBoot学习笔记-基础篇</h1><h2 id="配置文件的使用"><a href="#配置文件的使用" class="headerlink" title="配置文件的使用"></a>配置文件的使用</h2><h3 id="配置文件的类型"><a href="#配置文件的类型" class="headerlink" title="配置文件的类型"></a>配置文件的类型</h3><h4 id="properties-传统格式-x2F-默认格式"><a href="#properties-传统格式-x2F-默认格式" class="headerlink" title="properties(传统格式&#x2F;默认格式)"></a>properties(传统格式&#x2F;默认格式)</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务器端口配置</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br><span class="line"><span class="comment"># 修改banner</span></span><br><span class="line"><span class="attr">spring.main.banner-mode</span>=<span class="string">off</span></span><br><span class="line"><span class="attr">spring.banner.image.location</span>=<span class="string">logo.png</span></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.com.itheima</span>=<span class="string">warn</span></span><br></pre></td></tr></table></figure>

<h4 id="yaml-主流格式-x2F-常用"><a href="#yaml-主流格式-x2F-常用" class="headerlink" title="yaml(主流格式&#x2F;常用)"></a>yaml(主流格式&#x2F;常用)</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<h4 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<h4 id="SpringBoot配置文件加载顺序"><a href="#SpringBoot配置文件加载顺序" class="headerlink" title="SpringBoot配置文件加载顺序"></a>SpringBoot配置文件加载顺序</h4><p>application.properties &gt; application.yml &gt; application.yaml</p>
<h4 id="yaml语法总结"><a href="#yaml语法总结" class="headerlink" title="yaml语法总结"></a>yaml语法总结</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>YAML（YAML Ain’t Markup Language），一种数据序列化格式YAML</p>
<p>文件扩展名	.yml（主流）	.yaml</p>
<h5 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h5><ul>
<li>大小写敏感</li>
<li>属性层级关系使用多行描述，每行结尾使用冒号结束</li>
<li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li>
<li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li>
<li>星号*表示注释</li>
<li><strong>核心规则：数据前面要加空格与冒号隔开</strong></li>
</ul>
<h6 id="字面值表示方式"><a href="#字面值表示方式" class="headerlink" title="字面值表示方式"></a>字面值表示方式</h6><table>
<thead>
<tr>
<th>属性</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>boolean: TRUE</td>
<td>TRUE,true,True,FALSE,false,False均可</td>
</tr>
<tr>
<td>float: 3.14</td>
<td>6.8523015e+5     支持科学计数法</td>
</tr>
<tr>
<td>int: 123</td>
<td>0b1010_0111_0100_1010_1110    支持二、八、十六进制</td>
</tr>
<tr>
<td>null: ~</td>
<td>使用~表示null</td>
</tr>
<tr>
<td>string: HelloWorld</td>
<td>字符串可以直接书写</td>
</tr>
<tr>
<td>string2: “Hello World”</td>
<td>可以使用双引号包裹特殊字符</td>
</tr>
<tr>
<td>date: 2023-02-22</td>
<td>日期必须使用yyyy-MN-dd格式</td>
</tr>
<tr>
<td>datetime: 2023-02-22T18:09:00+08:00</td>
<td>时间和日期之间使用T连接，最后使用+代表时区</td>
</tr>
</tbody></table>
<h6 id="数组表示方式"><a href="#数组表示方式" class="headerlink" title="数组表示方式"></a>数组表示方式</h6><p>在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">subject:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">	<span class="attr">subject:</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">		<span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">likes:</span> [<span class="string">王者荣耀</span>,<span class="string">刺激战场</span>]	<span class="comment">#数组书写缩略格式</span></span><br><span class="line"></span><br><span class="line"><span class="attr">users:</span> <span class="comment">#对象数组格式一</span></span><br><span class="line">	<span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">	  <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">	<span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">	  <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">users:</span> <span class="comment">#对象数组格式二</span></span><br><span class="line">	<span class="bullet">-</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">	<span class="bullet">-</span></span><br><span class="line">		<span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"><span class="comment">#对象数组缩略格式</span></span><br><span class="line"><span class="attr">users2:</span> [ &#123; <span class="string">name:Tom</span> , <span class="string">age:4</span> &#125; , &#123; <span class="string">name:Jerry</span> , <span class="string">age:5</span> &#125; ]</span><br></pre></td></tr></table></figure>

<h5 id="yaml数据的读取"><a href="#yaml数据的读取" class="headerlink" title="yaml数据的读取"></a>yaml数据的读取</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.yaml中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="attr">country:</span> <span class="string">china</span></span><br><span class="line"></span><br><span class="line"><span class="attr">user1:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">likes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sleep</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">17</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#使用$&#123;属性名&#125;引用数据</span></span><br><span class="line"><span class="attr">tempDir:</span> <span class="string">$&#123;baseDir&#125;\temp</span></span><br><span class="line"><span class="comment">#使用引号包裹的字符串，其中的转义字符可以生效</span></span><br><span class="line"><span class="attr">tempDir2:</span> <span class="string">&quot;$&#123;baseDir&#125;\temp\t1\t2\t3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类，用于封装下面的数据</span></span><br><span class="line"><span class="comment"># 由spring帮我们去加载数据到对象中，一定要告诉spring加载这组信息</span></span><br><span class="line"><span class="comment"># 使用时候从spring中直接获取信息使用</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost/springboot_db</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root666</span></span><br></pre></td></tr></table></figure>

<h6 id="方式一：单个获取单个读取"><a href="#方式一：单个获取单个读取" class="headerlink" title="方式一：单个获取单个读取"></a>方式一：单个获取单个读取</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java读取application.yaml中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;country&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String country1;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user1.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;likes[0]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String likes;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;users[0].name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String users;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;tempDir&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String tempDir;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;tempDir2&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String tempDir2;</span><br></pre></td></tr></table></figure>

<h6 id="方式二：统一获取单个读取"><a href="#方式二：统一获取单个读取" class="headerlink" title="方式二：统一获取单个读取"></a>方式二：统一获取单个读取</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用自动装配将所有的数据封装到一个对象Environment中</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br></pre></td></tr></table></figure>

<h6 id="方式三：放在对象中"><a href="#方式三：放在对象中" class="headerlink" title="方式三：放在对象中"></a>方式三：放在对象中</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.定义为spring管控的bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//3.指定加载的数据，prefix名也要一直</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;datasource&quot;)</span></span><br><span class="line"><span class="comment">//1.定义数据模型封装yaml文件中对应的数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDataSource</span> &#123;</span><br><span class="line">    <span class="comment">//属性要与yaml文件中的属性名一致</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    get()/set()方法	<span class="comment">//必须</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h2><h3 id="整合JUnit"><a href="#整合JUnit" class="headerlink" title="整合JUnit"></a>整合JUnit</h3><p>测试类SpringBoot已经帮忙构建了，只需要</p>
<ol>
<li>注入你要测试的对象</li>
<li>执行要测试的对象对应的方法</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果测试类文件不在<strong>主配置类文件的同级或子级包</strong>如同下图，那么就会报错</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-22_19-00-24.jpg"
                     
                ></p>
<p style="color: red">java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test</p>

<p>因此我们需要手动添加主配置类路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这俩注解任选一个</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = Springboot04JunitApplication.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = Springboot04JunitApplication.class)</span></span><br></pre></td></tr></table></figure>

<p>因为上述报错显示</p>
<p style="color: red">Unable to find a @SpringBootConfiguration</p>

<p>所以在主配置文件的**@SpringBootApplication**注解中可以发现</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-22_19-05-37.jpg"
                     
                ></p>
<h3 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-选择技术集"><a href="#1-选择技术集" class="headerlink" title="1.选择技术集"></a>1.选择技术集</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-23_15-04-47.jpg"
                     
                ></p>
<h5 id="2-设置数据源参数"><a href="#2-设置数据源参数" class="headerlink" title="2.设置数据源参数"></a>2.设置数据源参数</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2.配置相关信息</span></span><br><span class="line"><span class="comment">#application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">666</span></span><br></pre></td></tr></table></figure>

<h5 id="3-定义数据层接口与映射配置"><a href="#3-定义数据层接口与映射配置" class="headerlink" title="3.定义数据层接口与映射配置"></a>3.定义数据层接口与映射配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="整合MyBatis-Plus"><a href="#整合MyBatis-Plus" class="headerlink" title="整合MyBatis-Plus"></a>整合MyBatis-Plus</h3><h4 id="1-选择技术集-1"><a href="#1-选择技术集-1" class="headerlink" title="1.选择技术集"></a>1.选择技术集</h4><p>步骤与整合MyBatis相似,但是</p>
<p style="color:red">在选择技术集时不选择MyBatis Framework</p>

<p>而是手动引入MyBatis-Plus依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-定义数据层接口与映射配置"><a href="#2-定义数据层接口与映射配置" class="headerlink" title="2.定义数据层接口与映射配置"></a>2.定义数据层接口与映射配置</h4><p style="color:red">无需手写接口和映射文件，只需继承BaseMapper<实体类></p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h3><h4 id="1-选择技术集-2"><a href="#1-选择技术集-2" class="headerlink" title="1.选择技术集"></a>1.选择技术集</h4><p>步骤与整合MyBatis一样,选择MyBatis Framework和MySQL Driver</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-定义数据层接口与映射配置-1"><a href="#2-定义数据层接口与映射配置-1" class="headerlink" title="2.定义数据层接口与映射配置"></a>2.定义数据层接口与映射配置</h4><p>与整合MyBatis一样</p>
]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>后端学习的记录</tag>
        <tag>SpringBoot2</tag>
      </tags>
  </entry>
  <entry>
    <title>后端服务器向前端发送JSON数据出现了异常</title>
    <url>/2022/11/25/%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%91%E5%89%8D%E7%AB%AF%E5%8F%91%E9%80%81JSON%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="问题的由来"><a href="#问题的由来" class="headerlink" title="问题的由来"></a>问题的由来</h2><p>今天在做SSM整合时发现后端服务器可以从数据库取出数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部分后端代码</span></span><br><span class="line"><span class="comment">//处理查询，响应ajax</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/queryStudent.do&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">queryStudent</span><span class="params">()</span>&#123;</span><br><span class="line">	List&lt;Student&gt; students = service.findStudents();</span><br><span class="line">    students.forEach(System.out::println);</span><br><span class="line">    <span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时我也打印此数据</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2022-11-25_20-03-06.jpg"
                      alt="数据"
                ></p>
<p>但是前端页面无法数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部分前端代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadStudentData</span>(<span class="params"></span>)&#123;</span><br><span class="line">	$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    	<span class="attr">url</span>:<span class="string">&quot;student/queryStudent.do&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        	$.<span class="title function_">each</span>(data,<span class="keyword">function</span>(<span class="params">i,n</span>)&#123;</span><br><span class="line">            	$(<span class="string">&quot;#info&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span><br><span class="line">                          .<span class="title function_">append</span>(<span class="string">&quot;&lt;td&gt;&quot;</span>+n.<span class="property">id</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">                          .<span class="title function_">append</span>(<span class="string">&quot;&lt;td&gt;&quot;</span>+n.<span class="property">name</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">                          .<span class="title function_">append</span>(<span class="string">&quot;&lt;td&gt;&quot;</span>+n.<span class="property">age</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">                          .<span class="title function_">append</span>(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="问题的对策"><a href="#问题的对策" class="headerlink" title="问题的对策"></a>问题的对策</h2><p>看了一下接口发现一个<i style="color:red">500的服务器内部的报错</i>，主要报错为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No converter found for return value of type: class java.util.ArrayList</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2022-11-25_20-08-40.jpg"
                     
                ></p>
<p>发现在注册注解驱动&lt;mvc:annotation-driven &#x2F;&gt;时候有很多不同类型的注解驱动，我也是截了图保留了下来</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2022-11-25_20-16-43.jpg"
                     
                ></p>
<h2 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h2><p>而我们要使用的是mvc结尾的那一个，最终前端也成功的获取到了JSON数据</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2022-11-25_20-19-55.jpg"
                     
                ></p>
]]></content>
      <tags>
        <tag>JAVA</tag>
        <tag>后端学习的记录</tag>
        <tag>SSM</tag>
        <tag>BUG菇的出现与消亡</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记基础篇</title>
    <url>/2023/03/27/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="Vue学习笔记"><a href="#Vue学习笔记" class="headerlink" title="Vue学习笔记"></a>Vue学习笔记</h1><h2 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h2><h3 id="如何使用Vue？"><a href="#如何使用Vue？" class="headerlink" title="如何使用Vue？"></a>如何使用Vue？</h3><h4 id="1-引入vue"><a href="#1-引入vue" class="headerlink" title="1.引入vue"></a>1.引入vue</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js(Vue所在的目录)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-准备一个容器，为Vue提供模板"><a href="#2-准备一个容器，为Vue提供模板" class="headerlink" title="2.准备一个容器，为Vue提供模板"></a>2.准备一个容器，为Vue提供模板</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一个容器也称为模板，&#123; &#123;&#125; &#125;为插值语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123; &#123;name.toUpperCase()&#125; &#125;,&#123; &#123;address&#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第二个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123; &#123;name&#125; &#125;,&#123; &#123;address&#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-创建Vue实例"><a href="#3-创建Vue实例" class="headerlink" title="3.创建Vue实例"></a>3.创建Vue实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span><span class="comment">//设置为 false 以阻止 vue 在启动时生成生产提示。不好使就去Vue文件中更改</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//创建Vue实例</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root1&#x27;</span>, <span class="comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123; <span class="comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span></span><br><span class="line"><span class="language-javascript">			<span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>:<span class="string">&#x27;上海&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        	&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>, <span class="comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123; <span class="comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span></span><br><span class="line"><span class="language-javascript">          	<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>:<span class="string">&#x27;北京昌平&#x27;</span></span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li><p>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</p>
</li>
<li><p>root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；</p>
</li>
<li><p>root容器里的代码被称为【Vue模板】；</p>
</li>
<li><p>Vue实例和容器是一一对应的；</p>
</li>
<li><p>真实开发中只有一个Vue实例，并且会配合着组件一起使用；</p>
</li>
<li><p>{ {xxx} }中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</p>
</li>
<li><p>一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</p>
</li>
<li><p>注意区分：js表达式 和 js代码(语句)<br>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：<br>​                    (1). a</p>
<p>​                    (2). a+b</p>
<p>​                    (3). demo(1)</p>
<p>​                    (4). x &#x3D;&#x3D;&#x3D; y ? ‘a’ : ‘b’</p>
<p>​        			js代码(语句)</p>
<p>​                    (1). if(){}</p>
<p>​                    (2). for(){}</p>
</li>
</ol>
<h2 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h2><h3 id="Vue模板语法有2大类："><a href="#Vue模板语法有2大类：" class="headerlink" title="Vue模板语法有2大类："></a>Vue模板语法有2大类：</h3><h4 id="1-插值语法："><a href="#1-插值语法：" class="headerlink" title="1.插值语法："></a>1.插值语法：</h4><p>功能：用于解析标签体内容。</p>
<p>写法：{ {xxx} }，xxx是js表达式，且可以直接读取到data中的所有属性。</p>
<h4 id="2-指令语法："><a href="#2-指令语法：" class="headerlink" title="2.指令语法："></a>2.指令语法：</h4><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。</p>
<p>举例：v-bind:href&#x3D;”xxx” 或  简写为 :href&#x3D;”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</p>
<blockquote>
<p>备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</p>
</blockquote>
<h4 id="插值和指令语法的注意事项"><a href="#插值和指令语法的注意事项" class="headerlink" title="插值和指令语法的注意事项"></a>插值和指令语法的注意事项</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">url.toUpperCase()</span>&quot;&gt;</span>点我去&#123; &#123;name&#125; &#125;学习<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;插值语法&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">school</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;黑马&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>:<span class="string">&#x27;http://www.atguigu.com&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上述代码块展示出来的页面效果为</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-21_16-26-06.jpg"
                     
                ></p>
<p>显然应该为：你好插值语法，点我去黑马学习。因为插值语法和插值语法这两个词都由name代替为了方便使用，所以我们需要使用分层将name的不同含义划分开。</p>
<p>改良代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url.toUpperCase()&quot;</span>&gt;</span>点我去&#123; &#123;school.name&#125; &#125;学习<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;插值语法&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">school</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;黑马&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>:<span class="string">&#x27;http://www.atguigu.com&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><h3 id="什么是数据绑定？"><a href="#什么是数据绑定？" class="headerlink" title="什么是数据绑定？"></a>什么是数据绑定？</h3><p>数据可以由后端数据库传向前端页面，同时在前端页面中输入的数据也可以传输到后端数据库。</p>
<h3 id="数据绑定的种类"><a href="#数据绑定的种类" class="headerlink" title="数据绑定的种类"></a>数据绑定的种类</h3><p>后端代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        单向数据绑定简写：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        双向数据绑定简写：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="单向数据绑定"><a href="#单向数据绑定" class="headerlink" title="单向数据绑定"></a>单向数据绑定</h4><h5 id="修改后端数据时"><a href="#修改后端数据时" class="headerlink" title="修改后端数据时"></a>修改后端数据时</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-22_15-52-41.jpg"
                     
                ></p>
<p>后端数据可以传递到前端页面</p>
<h5 id="修改前端数据时"><a href="#修改前端数据时" class="headerlink" title="修改前端数据时"></a>修改前端数据时</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-22_15-53-05.jpg"
                     
                ></p>
<p>前端页面的数据传递不到后端数据库</p>
<h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><p>无论修改前端数据还是修改后端数据都能传输到自己的前后端</p>
<h3 id="两种数据绑定的使用场合"><a href="#两种数据绑定的使用场合" class="headerlink" title="两种数据绑定的使用场合"></a>两种数据绑定的使用场合</h3><p>单向绑定(v-bind)：数据只能从data流向页面。</p>
<p>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</p>
<p>备注：</p>
<p>​	1.双向绑定一般都应用在表单类元素上（如：input、select等）</p>
<p>​	2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</p>
<h3 id="数据绑定简写"><a href="#数据绑定简写" class="headerlink" title="数据绑定简写"></a>数据绑定简写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">单向数据绑定简写：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">双向数据绑定简写：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="data与el的两种写法"><a href="#data与el的两种写法" class="headerlink" title="data与el的两种写法"></a>data与el的两种写法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="el写法"><a href="#el写法" class="headerlink" title="el写法"></a>el写法</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">		<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">data</span>:&#123;</span><br><span class="line">		<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">v.$mount(<span class="string">&#x27;#root&#x27;</span>);<span class="comment">//第二种写法</span></span><br></pre></td></tr></table></figure>

<h3 id="data写法"><a href="#data写法" class="headerlink" title="data写法"></a>data写法</h3><h4 id="第一种，对象式"><a href="#第一种，对象式" class="headerlink" title="第一种，对象式"></a>第一种，对象式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">	<span class="attr">data</span>:&#123;</span><br><span class="line">		<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="第二种，函数式"><a href="#第二种，函数式" class="headerlink" title="第二种，函数式"></a>第二种，函数式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,      </span><br><span class="line">	<span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span>&#123;</span><br><span class="line">			<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="如何选择data写法？"><a href="#如何选择data写法？" class="headerlink" title="如何选择data写法？"></a>如何选择data写法？</h4><p>目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</p>
<h4 id="一个重要的原则："><a href="#一个重要的原则：" class="headerlink" title="一个重要的原则："></a>一个重要的原则：</h4><p>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</p>
<h2 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h2><p>MVVM模型</p>
<p>​	M：模型(Model) ：data中的数据</p>
<p>​	V：视图(View) ：模板代码</p>
<p>​	VM：视图模型(ViewModel)：Vue实例</p>
<p>观察发现：</p>
<p>​	1.data中所有的属性，最后都出现在了vm身上。</p>
<p>​	2.vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</p>
<h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><h3 id="何为数据代理？"><a href="#何为数据代理？" class="headerlink" title="何为数据代理？"></a>何为数据代理？</h3><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读&#x2F;写）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">	<span class="title function_">get</span>(<span class="params"></span>)&#123;	=<span class="comment">//get:function()&#123;&#125;</span></span><br><span class="line">		<span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        obj.<span class="property">x</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//该方法翻译：给obj2对象添加一个名为x的属性，有getter和setter方法</span></span><br><span class="line"><span class="comment">//getter方法可以为x属性赋值</span></span><br><span class="line"><span class="comment">//setter方法可以代理obj的x为其赋值</span></span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-23_18-42-52.jpg"
                     
                ></p>
<h3 id="JS中Object-defineProperty方法"><a href="#JS中Object-defineProperty方法" class="headerlink" title="JS中Object.defineProperty方法"></a>JS中Object.defineProperty方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: number,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">value</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>,<span class="comment">//控制属性是否可以枚举，默认值是false</span></span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>,<span class="comment">//控制属性是否可以被修改，默认值是false</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span> <span class="comment">//控制属性是否可以被删除，默认值是false</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;<span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> number;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;<span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>, value)</span><br><span class="line">      number = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123; &#123;address&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">address</span>:<span class="string">&#x27;宏福科技园&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/SolveTheProblem/master/Snipaste_2023-02-23_19-36-16.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/%E6%97%A0%E6%A0%87%E9%A2%98.png"
                     
                ></p>
<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>实际上底层使用的就是Object.defineProperty()方法</p>
<p>Vue中的数据代理：<br>            通过vm对象来代理data对象中属性的操作（读&#x2F;写）</p>
<p>Vue中数据代理的好处：<br>            更加方便的操作data中的数据</p>
<p>基本原理：<br>通过Object.defineProperty()把data对象中所有属性添加到vm上。为每一个添加到vm上的属性，都指定一个getter&#x2F;setter。在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性。</p>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><h4 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h4><p>JS事件，就是用户或浏览器本身的某种行为，一般是用户对页面的一些动作引起的，例如，单击某个链接或按钮、在文本框中输入文本、按下键盘上的某个按键、移动鼠标等等。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            	<span class="title function_">alert</span>(<span class="string">&#x27;同学你好&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="事件的基本使用-1"><a href="#事件的基本使用-1" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h4><ol>
<li>使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</li>
<li>事件的回调需要配置在methods对象中，最终会在vm上；</li>
<li>methods中配置的函数，不要用箭头函数！否则this就不是vm了；</li>
<li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</li>
<li>@click&#x3D;”demo” 和 @click&#x3D;”demo($event)” 效果一致，但后者可以传参；</li>
</ol>
<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//e.preventDefault(); === @click.prevent</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// e.stopPropagation(); === @click.stop</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;点我提示信息&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showMsg</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;累坏了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p style="color:red">修饰符可以连续写</p>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="prevent：阻止默认事件（常用）"><a href="#prevent：阻止默认事件（常用）" class="headerlink" title="prevent：阻止默认事件（常用）"></a>prevent：阻止默认事件（常用）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不加@click.prevent点击此超链接会先弹出提示框如何跳转百度</p>
<p>加了@click.prevent不会跳转</p>
<h4 id="stop：阻止事件冒泡（常用）"><a href="#stop：阻止事件冒泡（常用）" class="headerlink" title="stop：阻止事件冒泡（常用）"></a>stop：阻止事件冒泡（常用）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不加@click.stop会弹两次提示框因为div上也有点击事件</p>
<h4 id="once：事件只触发一次（常用）"><a href="#once：事件只触发一次（常用）" class="headerlink" title="once：事件只触发一次（常用）"></a>once：事件只触发一次（常用）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认点无n次按钮会弹出n次对话框如果加了 @click.once只会在第一次点击按钮时会弹出对话框</p>
<h4 id="capture：使用事件的捕获模式"><a href="#capture：使用事件的捕获模式" class="headerlink" title="capture：使用事件的捕获模式"></a>capture：使用事件的捕获模式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class="line">	div1</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class="line">		div2</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认当点击了box1时只会console box1的内容，当点击了box2时先consloe box2再console box1内容</p>
<p>加上@click.capture会定向先显示@click.capture在的box</p>
<h4 id="self：只有event-target是当前操作的元素时才触发事件"><a href="#self：只有event-target是当前操作的元素时才触发事件" class="headerlink" title="self：只有event.target是当前操作的元素时才触发事件"></a>self：只有event.target是当前操作的元素时才触发事件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>与@click.stop相似</p>
<h4 id="passive：事件的默认行为立即执行，无需等待事件回调执行完毕；"><a href="#passive：事件的默认行为立即执行，无需等待事件回调执行完毕；" class="headerlink" title="passive：事件的默认行为立即执行，无需等待事件回调执行完毕；"></a>passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； </span></span><br><span class="line"><span class="comment">	scroll 滚动条滚动</span></span><br><span class="line"><span class="comment">	wheel 滚轮滚动</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">background-color</span>: peru;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">overflow</span>: auto;<span class="comment">/*溢出自动加滚动条*/</span></span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认先进行完循环再进行滚轮操作，加上@wheel.passive先进性事件</p>
<h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123; &#123;name&#125; &#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">/* if (e.keyCode == 13) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    console.log(e.target.value)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    console.log(e.keyCode)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125; */</span> <span class="comment">// === @keyup.enter</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">key</span>,e.<span class="property">keyCode</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="两种事件"><a href="#两种事件" class="headerlink" title="两种事件"></a>两种事件</h4><h5 id="keyup，需要进行完整点击"><a href="#keyup，需要进行完整点击" class="headerlink" title="keyup，需要进行完整点击"></a>keyup，需要进行完整点击</h5><h5 id="keydown，键盘按键只需按下去"><a href="#keydown，键盘按键只需按下去" class="headerlink" title="keydown，键盘按键只需按下去"></a>keydown，键盘按键只需按下去</h5><h4 id="系统修饰键用法"><a href="#系统修饰键用法" class="headerlink" title="系统修饰键用法"></a>系统修饰键用法</h4><h5 id="系统修饰键：ctrl、alt、shift、meta和Tab"><a href="#系统修饰键：ctrl、alt、shift、meta和Tab" class="headerlink" title="系统修饰键：ctrl、alt、shift、meta和Tab"></a>系统修饰键：ctrl、alt、shift、meta和Tab</h5><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ol>
<li><p>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。即<strong>ctrl+r</strong>……</p>
</li>
<li><p>配合keydown使用：正常触发事件。即**@keyup.ctrl**……</p>
</li>
<li><p>定义只能使用ctrl+y才能console内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keyup.ctrl.y</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="常用按键别名"><a href="#常用按键别名" class="headerlink" title="常用按键别名"></a>常用按键别名</h4><table>
<thead>
<tr>
<th>按键</th>
<th>别名</th>
</tr>
</thead>
<tbody><tr>
<td>回车</td>
<td>enter</td>
</tr>
<tr>
<td>删除</td>
<td>delete(捕获“删除”和“退格”键)</td>
</tr>
<tr>
<td>退出</td>
<td>esc</td>
</tr>
<tr>
<td>空格</td>
<td>space</td>
</tr>
<tr>
<td>换行</td>
<td>tab</td>
</tr>
<tr>
<td>上</td>
<td>up</td>
</tr>
<tr>
<td>下</td>
<td>down</td>
</tr>
<tr>
<td>左</td>
<td>left</td>
</tr>
<tr>
<td>右</td>
<td>right</td>
</tr>
</tbody></table>
<h4 id="自定义按键"><a href="#自定义按键" class="headerlink" title="自定义按键"></a>自定义按键</h4><p>使用keyCode去指定具体的按键（不推荐）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (e.keyCode == 13) &#123;</span><br><span class="line">	console.log(e.target.value)</span><br><span class="line">	console.log(e.keyCode)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</p>
<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123; &#123;fullName&#125; &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get被调用&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="string">&quot;-&quot;</span>+<span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">set</span>(<span class="params">fullName</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> arr = fullName.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="什么是计算属性"><a href="#什么是计算属性" class="headerlink" title="什么是计算属性"></a>什么是计算属性</h3><p>定义：要用的属性不存在，要通过已有属性计算得来</p>
<p>举个简单的例子就是姓+名&#x3D;姓名如图，计算嘛就是加减乘除</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-02-27_16-12-50.jpg"
                     
                ></p>
<h3 id="如何使用计算属性"><a href="#如何使用计算属性" class="headerlink" title="如何使用计算属性"></a>如何使用计算属性</h3><h4 id="1-在Vue实例中新建一个computed选项"><a href="#1-在Vue实例中新建一个computed选项" class="headerlink" title="1. 在Vue实例中新建一个computed选项"></a>1. 在Vue实例中新建一个computed选项</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-在computed新建一个不存在的属性"><a href="#2-在computed新建一个不存在的属性" class="headerlink" title="2. 在computed新建一个不存在的属性"></a>2. 在computed新建一个不存在的属性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        computed:&#123;</span><br><span class="line">        	fullName:&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-在属性中新建get-set-方法"><a href="#3-在属性中新建get-set-方法" class="headerlink" title="3. 在属性中新建get()set()方法"></a>3. 在属性中新建get()set()方法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            	<span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get被调用&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="string">&quot;-&quot;</span>+<span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">set</span>(<span class="params">fullName</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> arr = fullName.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="get-set-方法什么时候使用"><a href="#get-set-方法什么时候使用" class="headerlink" title="get()set()方法什么时候使用"></a>get()set()方法什么时候使用</h5><h6 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h6><p>要用的属性不存在，要通过已有属性计算得来</p>
<p>get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</p>
<p>get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</p>
<h6 id="set-一般很少用"><a href="#set-一般很少用" class="headerlink" title="set()一般很少用"></a>set()一般很少用</h6><p>set什么时候调用? 当fullName被修改时。</p>
<h3 id="计算属性简写"><a href="#计算属性简写" class="headerlink" title="计算属性简写"></a>计算属性简写</h3><p style="color:red">当改属性无需被用户修改时可以使用简写，也就是只有get()方法</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123; &#123;info&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 绑定事件的时候：@xxx=&quot;yyy&quot; yyy可以写一些简单的语句 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isHot</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;凉爽&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isHot</span>  = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当用户点击button按钮时会调用changeWeather()方法，原本this.isHot&#x3D;true所以computed计算属性返回炎热，当用户点击后this.isHot&#x3D;false，computed计算属性返回凉爽</p>
<h3 id="监视属性-1"><a href="#监视属性-1" class="headerlink" title="监视属性"></a>监视属性</h3><p style="color: red">Vue不仅可以监视data{}中的数据也可以监视computed中的方法</p>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">	<span class="attr">isHot</span>:&#123;</span><br><span class="line">		<span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">        <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span><br><span class="line">        <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">        	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被改了&quot;</span>,newValue,oldValue);</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="attr">info</span>:&#123;</span><br><span class="line">	<span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">    <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	handler什么时候调用？当isHot发生改变时。</span></span><br><span class="line"><span class="comment">    	newValue和oldValue分别代表改变后的值和改变前的值</span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;info被改了&quot;</span>,newValue,oldValue);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监视属性的另一种写法</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="line">	<span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">	<span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="监视属性watch："><a href="#监视属性watch：" class="headerlink" title="监视属性watch："></a>监视属性watch：</h4><ol>
<li><p>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</p>
</li>
<li><p>监视的属性必须存在，才能进行监视！！监视的两种写法：</p>
<p>(1).new Vue时传入watch配置(一开始就知道要监视谁)</p>
</li>
</ol>
<p>​       (2).通过vm.$watch监视</p>
<h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是:&#123; &#123;numbers.a&#125; &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是:&#123; &#123;numbers.b&#125; &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">	        <span class="attr">isHot</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">numbers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">b</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//监视多级结构中某个属性的变化</span></span></span><br><span class="line"><span class="language-javascript">			<span class="string">&#x27;numbers.a&#x27;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">   	 			<span class="title function_">handler</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a被改变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            			&#125;</span></span><br><span class="line"><span class="language-javascript">            		&#125;,</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//监视多级结构中所有属性的变化</span></span></span><br><span class="line"><span class="language-javascript">			<span class="attr">numbers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers被改变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="为什么要深度监视"><a href="#为什么要深度监视" class="headerlink" title="为什么要深度监视"></a>为什么要深度监视</h4><p>Vue中的watch默认不监测对象<strong>内部所有值</strong>的改变（一层）。</p>
<h4 id="那检测对象内部某个值怎么办"><a href="#那检测对象内部某个值怎么办" class="headerlink" title="那检测对象内部某个值怎么办"></a>那检测对象内部某个值怎么办</h4><p>如案例所示需要<strong>对象.内部某个值</strong>注意此种方法需要使用引号引起来</p>
<h4 id="怎么实现深度监视"><a href="#怎么实现深度监视" class="headerlink" title="怎么实现深度监视"></a>怎么实现深度监视</h4><p>配置deep:true可以监测对象内部值改变（多层）</p>
<h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><ol>
<li>Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</li>
<li>使用watch时根据数据的具体结构，决定是否采用深度监视。</li>
</ol>
<h3 id="深度监视简写"><a href="#深度监视简写" class="headerlink" title="深度监视简写"></a>深度监视简写</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Vue实例内部书写 </span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">	<span class="title function_">isHot</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被改了&quot;</span>,newValue,oldValue);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//单独进行监视</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,<span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>深度监视与计算属性差不多，要进行简写必须满足内部只有handler() 方法，同时不可以使用箭头函数</p>
<h2 id="计算属性与监视属性的区别"><a href="#计算属性与监视属性的区别" class="headerlink" title="计算属性与监视属性的区别"></a>计算属性与监视属性的区别</h2><ol>
<li>computed能完成的功能，watch都可以完成。</li>
<li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</li>
</ol>
<p>两个重要的小原则：</p>
<ol>
<li>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</li>
<li>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，<br>这样this的指向才是vm 或 组件实例对象。</li>
</ol>
<h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><h3 id="绑定class样式"><a href="#绑定class样式" class="headerlink" title="绑定class样式"></a>绑定class样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css样式*/</span></span><br><span class="line"><span class="selector-class">.basic</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.happy</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">4px</span> solid red;;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,yellow,pink,orange,yellow);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sad</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.normal</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.atguigu1</span>&#123;</span><br><span class="line">   <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.atguigu2</span>&#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">   <span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.atguigu3</span>&#123;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="字符串写法"><a href="#字符串写法" class="headerlink" title="字符串写法"></a>字符串写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">           	<span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>适用于：样式的类名不确定，需要动态指定</strong></p>
<h4 id="数组写法"><a href="#数组写法" class="headerlink" title="数组写法"></a>数组写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">           	<span class="attr">classArr</span>:[<span class="string">&#x27;atguigu1&#x27;</span>,<span class="string">&#x27;atguigu2&#x27;</span>,<span class="string">&#x27;atguigu3&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>适用于：要绑定的样式个数不确定、名字也不确定</strong></p>
<h4 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">atguigu1</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">atguigu2</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">atguigu3</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="绑定style样式"><a href="#绑定style样式" class="headerlink" title="绑定style样式"></a>绑定style样式</h3><h4 id="对象写法-1"><a href="#对象写法-1" class="headerlink" title="对象写法"></a>对象写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      	&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数组写法-1"><a href="#数组写法-1" class="headerlink" title="数组写法"></a>数组写法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">styleObj2</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">styleArr</span>:[</span></span><br><span class="line"><span class="language-javascript">			&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">			&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		]</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>class样式</p>
<p>写法:class&#x3D;”xxx” xxx可以是字符串、对象、数组。<br>字符串写法适用于：类名不确定，要动态获取。<br>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。<br>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</p>
<p>style样式<br>:style&#x3D;”{fontSize: xxx}”其中xxx是动态值。<br>:style&#x3D;”[a,b]”其中a、b是样式对象。</p>
<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1. v-if"></a>1. v-if</h3><h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><ol>
<li>v-if&#x3D;”表达式” </li>
<li>v-else-if&#x3D;”表达式”</li>
<li>v-else&#x3D;”表达式”</li>
</ol>
<h4 id="适用于"><a href="#适用于" class="headerlink" title="适用于"></a>适用于</h4><p>切换频率较低的场景</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p><strong>不展示的DOM元素直接被移除。</strong></p>
<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</p>
<p><strong>反例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;n == 1&quot;</span>&gt;</span>Angular-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n == 2&quot;</span>&gt;</span>React-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>@@@<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n == 3&quot;</span>&gt;</span>Vue-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>HHH<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>v-if与template的配合使用，适用于小范围元素包括大范围元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;template v-<span class="keyword">if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span><br><span class="line">	&lt;h2&gt;你好&lt;/h2&gt;</span><br><span class="line">	&lt;h2&gt;尚硅谷&lt;/h2&gt;</span><br><span class="line">	&lt;h2&gt;北京&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-v-show"><a href="#2-v-show" class="headerlink" title="2. v-show"></a>2. v-show</h3><h4 id="写法-1"><a href="#写法-1" class="headerlink" title="写法"></a>写法</h4><p>v-show&#x3D;”表达式”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>欢迎来到&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;1==1&quot;</span>&gt;</span>欢迎来到&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    	<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    		<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        	<span class="attr">a</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        	<span class="attr">n</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    	&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="适用于-1"><a href="#适用于-1" class="headerlink" title="适用于"></a>适用于</h4><p>切换频率较高的场景。</p>
<h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p><strong>不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</strong></p>
<h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="基本列表"><a href="#基本列表" class="headerlink" title="基本列表"></a>基本列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    	<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">car</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">price</span>:<span class="string">&#x27;70万&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">color</span>:<span class="string">&#x27;黑色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">str</span>:<span class="string">&#x27;hello&#x27;</span>    </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">    	&#123; &#123;p.name&#125; &#125; - &#123; &#123;p.age&#125; &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;li v-for=&quot;p,index of persons&quot; :key=&quot;p.id&quot;&gt;</span></span><br><span class="line"><span class="comment">                &#123; &#123;p.name&#125; &#125; - &#123; &#123;p.age&#125; &#125;</span></span><br><span class="line"><span class="comment">            &lt;/li&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">		&#123; &#123;key&#125; &#125; : &#123; &#123;value&#125; &#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="遍历字符串（用得少）"><a href="#遍历字符串（用得少）" class="headerlink" title="遍历字符串（用得少）"></a>遍历字符串（用得少）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) of str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    	&#123; &#123;index&#125; &#125;-&#123; &#123;char&#125; &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="指定次数遍历（用得少）"><a href="#指定次数遍历（用得少）" class="headerlink" title="指定次数遍历（用得少）"></a>指定次数遍历（用得少）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) of 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">		&#123; &#123;index&#125; &#125;-&#123; &#123;number&#125; &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>遍历使用的指令是<strong>v-for&#x3D;”(item, index) in xxx” :key&#x3D;”yyy”</strong></p>
<ul>
<li>in可以使用of替代</li>
<li>每个遍历必须写:key&#x3D;”xxx”,其中xxx在遍历数组代表id，在遍历对象时代表key，在遍历字符串和指定遍历次数时代表index索引</li>
</ul>
<h3 id="key的原理"><a href="#key的原理" class="headerlink" title="key的原理"></a>key的原理</h3><h4 id="原理验证案例"><a href="#原理验证案例" class="headerlink" title="原理验证案例"></a>原理验证案例</h4><p>三条数据同时对应后面有input框将三条数据分别填进去如何再新加一条记录在数据的最前面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        	&#123; &#123;p.name&#125; &#125; - &#123; &#123;p.age&#125; &#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> p = &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-key-index"><a href="#1-key-index" class="headerlink" title="1. :key(index)"></a>1. :key(index)</h5><h6 id="添加数据前"><a href="#添加数据前" class="headerlink" title="添加数据前"></a>添加数据前</h6><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-10_16-05-17.jpg"
                     
                ></p>
<h6 id="添加数据后"><a href="#添加数据后" class="headerlink" title="添加数据后"></a>添加数据后</h6><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-10_16-05-25.jpg"
                     
                ></p>
<h5 id="2-key-p-id"><a href="#2-key-p-id" class="headerlink" title="2. :key(p.id)"></a>2. :key(p.id)</h5><h6 id="添加数据后-1"><a href="#添加数据后-1" class="headerlink" title="添加数据后"></a>添加数据后</h6><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-10_16-16-15.jpg"
                     
                ></p>
<h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><h5 id="面试题：react、vue中的key有什么作用？（key的内部原理）"><a href="#面试题：react、vue中的key有什么作用？（key的内部原理）" class="headerlink" title="面试题：react、vue中的key有什么作用？（key的内部原理）"></a>面试题：react、vue中的key有什么作用？（key的内部原理）</h5><ol>
<li><p>虚拟DOM中key的作用：<br>                         key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】,<br> 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p>
</li>
<li><p>对比规则：<br>                         旧虚拟DOM中找到了与新虚拟DOM相同的key：<br>         ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！<br>         ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。<br> 旧虚拟DOM中未找到与新虚拟DOM相同的key创建新的真实DOM，随后渲染到到页面。</p>
<p> 用index作为key可能会引发的问题：</p>
<ol>
<li>若对数据进行：逆序添加、逆序删除等破坏顺序操作:会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</li>
<li>如果结构中还包含输入类的DOM：会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</li>
<li>开发中如何选择key?:<br>1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。<br>    2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li>
</ol>
</li>
</ol>
<h2 id="列表渲染-理解即可"><a href="#列表渲染-理解即可" class="headerlink" title="列表渲染(理解即可)"></a>列表渲染(理解即可)</h2><h3 id="1-Vue监视数据的原理："><a href="#1-Vue监视数据的原理：" class="headerlink" title="1.Vue监视数据的原理："></a>1.Vue监视数据的原理：</h3><p>vue会监视data中所有层次的数据。</p>
<h3 id="2-如何监测对象中的数据？"><a href="#2-如何监测对象中的数据？" class="headerlink" title="2.如何监测对象中的数据？"></a>2.如何监测对象中的数据？</h3><p>通过setter实现监视，且要在new Vue时就传入要监测的数据。<br>                (1).对象中后追加的属性，Vue默认不做响应式处理<br>                (2).如需给后添加的属性做响应式，请使用如下API：<br>                        Vue.set(target，propertyName&#x2F;index，value) 或<br>                        vm.$set(target，propertyName&#x2F;index，value)</p>
<h3 id="3-如何监测数组中的数据？"><a href="#3-如何监测数组中的数据？" class="headerlink" title="3.如何监测数组中的数据？"></a>3.如何监测数组中的数据？</h3><p>通过包裹数组更新元素的方法实现，本质就是做了两件事：<br>            (1).调用原生对应的方法对数组进行更新。<br>            (2).重新解析模板，进而更新页面。</p>
<h3 id="4。在Vue修改数组中的某个元素一定要用如下方法："><a href="#4。在Vue修改数组中的某个元素一定要用如下方法：" class="headerlink" title="4。在Vue修改数组中的某个元素一定要用如下方法："></a>4。在Vue修改数组中的某个元素一定要用如下方法：</h3><ol>
<li>使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li>
<li>Vue.set() 或 vm.$set()</li>
</ol>
<p>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.age++&quot;</span>&gt;</span>年龄+1岁<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.sex = &#x27;未知&#x27; &quot;</span>&gt;</span>修改性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFirstFriendName&quot;</span>&gt;</span>修改第一个朋友的名字为：张三<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为：开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeSmoke&quot;</span>&gt;</span>过滤掉爱好中的抽烟<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名：&#123; &#123;student.name&#125; &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄：&#123; &#123;student.age&#125; &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123; &#123;student.sex&#125; &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">			&#123; &#123;h&#125; &#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span>&gt;</span>朋友们：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">			&#123; &#123;f.name&#125; &#125;--&#123; &#123;f.age&#125; &#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">friends</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addSex</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addFriend</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateFirstFriendName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">addHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;学习&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updateHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>,<span class="number">0</span>,<span class="string">&#x27;开车&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">removeSmoke</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span> = <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">h</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> h !== <span class="string">&#x27;抽烟&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>账号：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;demo&quot;</span> &gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        性别：</span><br><span class="line">        男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">        女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好：</span><br><span class="line">        学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userInfo.hobby&#x27;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">        打游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userInfo.hobby&#x27;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">        吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userInfo.hobby&#x27;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        所属校区</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        其他信息</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">userInfo</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">hobby</span>:[],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">city</span>:<span class="string">&#x27;beijing&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span><span class="comment">//或者agree:false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="input输入框"><a href="#input输入框" class="headerlink" title="input输入框"></a>input输入框</h3><h4 id="type-x3D-”text”和type-x3D-”password”"><a href="#type-x3D-”text”和type-x3D-”password”" class="headerlink" title="type&#x3D;”text”和type&#x3D;”password”"></a>type&#x3D;”text”和type&#x3D;”password”</h4><p>直接v-model绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="单选框type-x3D-”radio”"><a href="#单选框type-x3D-”radio”" class="headerlink" title="单选框type&#x3D;”radio”"></a>单选框type&#x3D;”radio”</h4><p>v-model绑定后需要加上value属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="多选框type-x3D-”checkbox”"><a href="#多选框type-x3D-”checkbox”" class="headerlink" title="多选框type&#x3D;”checkbox”"></a>多选框type&#x3D;”checkbox”</h4><p>v-model绑定后需要加上value属性，<strong>同时需要将data中的hobby变为空数组</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userInfo.hobby&#x27;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">打游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userInfo.hobby&#x27;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;userInfo.hobby&#x27;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">	hobby:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="textarea文本区域"><a href="#textarea文本区域" class="headerlink" title="textarea文本区域"></a>textarea文本区域</h4><p>直接v-model绑定</p>
<h4 id="阅读并接受的勾选"><a href="#阅读并接受的勾选" class="headerlink" title="阅读并接受的勾选"></a>阅读并接受的勾选</h4><p>与type&#x3D;”checkbox”一样，但<strong>无需变数组加value属性</strong></p>
<h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p>若：<input type="text"/>，则v-model收集的是value值，用户输入的就是value值。</p>
<p>若：<input type="radio"/>，则v-model收集的是value值，且要给标签配置value值。</p>
<p>若：<input type="checkbox"/></p>
<p>​			1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p>
<p>​            2.配置input的value属性:</p>
<p>​            			(1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p>
<p>​                  	  (2)v-model的初始值是数组，那么收集的的就是value组成的数组</p>
<p>​			备注：v-model的三个修饰符</p>
<p>​            			lazy：失去焦点再收集数据</p>
<p>​                 	   number：输入字符串转为有效的数字</p>
<p>​                        trim：输入首尾空格过滤</p>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>简单来说就是对数据进行加工，可以用methods和computed代替</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间&lt;/h2 <span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123; &#123;fmtTime&#125; &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123; &#123;getFmtTime()&#125; &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123; &#123;time | timeFormate&#125; &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器实现（传参） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123; &#123;time | timeFormate(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125; &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123; &#123;msg | mySlice&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">time</span>: <span class="number">1678781582541</span>,<span class="comment">//时间戳</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getFmtTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fmtTime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">timeFormate</span>(<span class="params">value,str=<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(&#x27;@&#x27;,value)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">mySlice</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;hello,atguigu!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>得到一个时间戳将其加工为特定格式的时间</p>
<h4 id="methods方法实现"><a href="#methods方法实现" class="headerlink" title="methods方法实现"></a>methods方法实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">	getFmtTime() &#123;</span><br><span class="line">    	return dayjs(this.time).format(&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="computed计算属性实现"><a href="#computed计算属性实现" class="headerlink" title="computed计算属性实现"></a>computed计算属性实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    fmtTime() &#123;</span><br><span class="line">        return dayjs(this.time).format(&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="filters过滤器实现"><a href="#filters过滤器实现" class="headerlink" title="filters过滤器实现"></a>filters过滤器实现</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">    timeFormate(value,str=&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)&#123;</span><br><span class="line">        // console.log(&#x27;@&#x27;,value)</span><br><span class="line">        return dayjs(value).format(str)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="过滤器分类"><a href="#过滤器分类" class="headerlink" title="过滤器分类"></a>过滤器分类</h3><h4 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h4><p>当创建有很多Vue实例时每个实例都可以调用过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.filter(&#x27;mySlice&#x27;,function(value)&#123;</span><br><span class="line">	return value.slice(0,4)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h4><p>只对该过滤器所在的Vue实例中有效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">    mySlice(value)&#123;</span><br><span class="line">		return value.slice(0,4)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="调用过滤器"><a href="#调用过滤器" class="headerlink" title="调用过滤器"></a>调用过滤器</h3><h4 id="不传参"><a href="#不传参" class="headerlink" title="不传参"></a>不传参</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;现在是：&#123; &#123;time | timeFormate&#125; &#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

<h4 id="传参，同时实现了多层过滤"><a href="#传参，同时实现了多层过滤" class="headerlink" title="传参，同时实现了多层过滤"></a>传参，同时实现了多层过滤</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;现在是：&#123; &#123;time | timeFormate(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125; &#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

<p> timeFormate()中默认第一个参数为管道符前面的那个数据</p>
<h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</p>
<p>语法：</p>
<p>​		1.注册过滤器：Vue.filter(name,callback) 或 new Vue{filters:{} }</p>
<p>​        2.使用过滤器：{ { xxx | 过滤器名} }  或  v-bind:属性 &#x3D; “xxx | 过滤器名”</p>
<p>备注</p>
<p>​		1.过滤器也可以接收额外参数、多个过滤器也可以串</p>
<p>​        2.并没有改变原本的数据, 是产生新的对应的数据</p>
<p>备注改时间格式化引入了dayjs的库<a class="link"   href="https://github.com/iamkun/dayjs" >iamkun&#x2F;dayjs: ⏰ Day.js 2kB immutable date-time library alternative to Moment.js with the same modern API (github.com)<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p>与插值语法一样，但没有插值语法灵活</p>
<p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello,&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面展示效果：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-15_16-38-21.jpg"
                     
                ></p>
<h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><ol>
<li>作用：向其所在的节点中渲染文本内容。</li>
<li>与插值语法的区别：v-text会替换掉节点中的内容，{ {xx} }则不会。</li>
</ol>
<h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>与v-text类似，但是v-html能解析html元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            str:&#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            str2:&#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:location.href</span>=<span class="string">&quot;http://www.baidu.com?&quot;</span>+<span class="attr">document.cookie</span>&gt;</span>兄弟我找到你想要的资源了，快来！<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>页面展示效果：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto/master/Snipaste_2023-03-15_16-41-27.jpg"
                     
                ></p>
<h4 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h4><p>1.作用：向指定节点中渲染包含html结构的内容。</p>
<p>2.与插值语法的区别：</p>
<p>​		(1).v-html会替换掉节点中所有的内容，{ {xx} }则不会。</p>
<p>​		(2).v-html可以识别html结构。</p>
<p>3.严重注意：v-html有安全性问题！！！！</p>
<p>​		(1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</p>
<p>​        (2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</p>
<h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p>1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</p>
<p>2.使用css配合v-cloak可以解决网速慢时页面展示出{ {xxx} }的问题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	js文件未加载时就会出现&lt;h2 v-cloak&gt;，css使&lt;h2&gt;隐藏</span></span><br><span class="line"><span class="comment">	js加载出来后v-cloak自动消失，css也不起作用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">    	<span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123; &#123;name&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><ol>
<li>v-once所在节点在初次动态渲染后，就视为静态内容了。</li>
<li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>初始化的n值是:&#123; &#123;n&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：&#123; &#123;n&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ol>
<li>跳过其所在节点的编译过程。可利用它跳过：</li>
<li>没有使用指令语法、没有使用插值语法的节点，会加快编译。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>Vue其实很简单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123; &#123;n&#125; &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用过的指令总结"><a href="#使用过的指令总结" class="headerlink" title="使用过的指令总结"></a>使用过的指令总结</h3><table>
<thead>
<tr>
<th>指令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>v-bind</td>
<td>单向绑定解析表达式, 可简写为 :xxx</td>
</tr>
<tr>
<td>v-model</td>
<td>双向数据绑定</td>
</tr>
<tr>
<td>v-for</td>
<td>遍历数组&#x2F;对象&#x2F;字符串</td>
</tr>
<tr>
<td>v-on</td>
<td>绑定事件监听, 可简写为@</td>
</tr>
<tr>
<td>v-if</td>
<td>条件渲染（动态控制节点是否存存在）</td>
</tr>
<tr>
<td>v-else</td>
<td>条件渲染（动态控制节点是否存存在）</td>
</tr>
<tr>
<td>v-show</td>
<td>条件渲染 (动态控制节点是否展示)</td>
</tr>
<tr>
<td>v-text</td>
<td>向其所在的节点中渲染文本内容</td>
</tr>
<tr>
<td>v-html</td>
<td>向指定节点中渲染包含html结构的内容</td>
</tr>
<tr>
<td>v-cloak</td>
<td>略</td>
</tr>
<tr>
<td>v-once</td>
<td>初次动态渲染后，就视为静态内容了</td>
</tr>
<tr>
<td>v-pre</td>
<td>跳过其所在节点的编译过程</td>
</tr>
</tbody></table>
<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>略</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="生命周期的种类"><a href="#生命周期的种类" class="headerlink" title="生命周期的种类"></a>生命周期的种类</h3><p>一共有八个四对外加三个</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto2/master/lifecycle2.png"
                     
                ></p>
<h4 id="beforeCreate和created"><a href="#beforeCreate和created" class="headerlink" title="beforeCreate和created"></a>beforeCreate和created</h4><h5 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h5><p>无法通过vm访问到data中的数据、methods中的方法。</p>
<h5 id="created"><a href="#created" class="headerlink" title="created"></a>created</h5><p>可以通过vm访问到data中的数据、methods中配置的方法</p>
<h4 id="beforeMount和mounted"><a href="#beforeMount和mounted" class="headerlink" title="beforeMount和mounted"></a>beforeMount和mounted</h4><h5 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h5><ol>
<li>页面呈现的是未经Vue偏译的DOM结构</li>
<li>所有对DOM的操作，最终都不效。</li>
</ol>
<h5 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h5><ol>
<li>页面中星现的是经过Vue编译的DOM</li>
<li>对DOM的操作均有效（尽可能避换）。至此初始化过程结束，一般在此进行：开启定时器、发送网络请求、订阅消息、绑定自定义事件、等初始化操作。</li>
</ol>
<h4 id="beforeUpdate和updated"><a href="#beforeUpdate和updated" class="headerlink" title="beforeUpdate和updated"></a>beforeUpdate和updated</h4><h5 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h5><p><strong>数据是新的，但页面是旧的</strong>，即：页面尚未和数据保持同步。</p>
<h5 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h5><p><strong>数据是新的，页面也是新的</strong>，即：页面和数据保持同步。</p>
<h4 id="beforeDestroy和destroy"><a href="#beforeDestroy和destroy" class="headerlink" title="beforeDestroy和destroy"></a>beforeDestroy和destroy</h4><h5 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h5><p>vm中所有的：data、methods、指令等等，都处于可用状态，马上要执行销毁过程一般在此阶段：关闭定时器、取消订阅消息解绑自定义事件等收尾操作</p>
<h5 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a>destroy</h5><p>死了</p>
<h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><h4 id="常用的生命周期钩子："><a href="#常用的生命周期钩子：" class="headerlink" title="常用的生命周期钩子："></a>常用的生命周期钩子：</h4><ol>
<li>mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</li>
<li>beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</li>
</ol>
<h4 id="关于销毁Vue实例"><a href="#关于销毁Vue实例" class="headerlink" title="关于销毁Vue实例"></a>关于销毁Vue实例</h4><ol>
<li>销毁后借助Vue开发者工具看不到任何信息。</li>
<li>销毁后自定义事件会失效，但原生DOM事件依然有效。</li>
<li>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</li>
</ol>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><h4 id="如何使用组件"><a href="#如何使用组件" class="headerlink" title="如何使用组件"></a>如何使用组件</h4><h5 id="一、定义组件-创建组件"><a href="#一、定义组件-创建组件" class="headerlink" title="一、定义组件(创建组件)"></a>一、定义组件(创建组件)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 组件名 = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">	<span class="attr">template</span>: <span class="string">`&lt;html语句&gt;&lt;/html语句&gt;`</span>,</span><br><span class="line">	<span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">        	属性:值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//其他的东西和Vue实例中一样</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="二、注册组件"><a href="#二、注册组件" class="headerlink" title="二、注册组件"></a>二、注册组件</h5><h6 id="局部注册-常用"><a href="#局部注册-常用" class="headerlink" title="局部注册(常用)"></a>局部注册(常用)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">	<span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="comment">//第一种注册</span></span><br><span class="line">		组件名(以后的标签名) : 组件名(定义组件时候的名字)</span><br><span class="line">    	<span class="comment">//第二种注册，方便清晰(常用)</span></span><br><span class="line">    	组件名(定义组件时候的名字)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;组件名(以后的标签名)&#x27;</span>,组件名)<span class="comment">//尽量一样，即使一样也要这样写</span></span><br></pre></td></tr></table></figure>

<h5 id="三、使用组件-写组件标签"><a href="#三、使用组件-写组件标签" class="headerlink" title="三、使用组件(写组件标签)"></a>三、使用组件(写组件标签)</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">组件名</span>&gt;</span><span class="tag">&lt;/<span class="name">组件名</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注意点1"><a href="#注意点1" class="headerlink" title="注意点1"></a>注意点1</h4><ol>
<li>组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</li>
<li>template中的内容与以前在body中写的一模一样</li>
</ol>
<h4 id="非单文件实例"><a href="#非单文件实例" class="headerlink" title="非单文件实例"></a>非单文件实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; &#123;msg&#125; &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校名称：&#123; &#123;schoolName&#125; &#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校地址：&#123; &#123;address&#125; &#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">schoolName</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">address</span>: <span class="string">&#x27;北京昌平&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">schoolName</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学生姓名：&#123; &#123;studentName&#125; &#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校年龄：&#123; &#123;age&#125; &#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">studentName</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> hello = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;你好呀！&#123; &#123;name&#125; &#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;hello&#x27;</span>,hello)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;你好呀&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            school,</span></span><br><span class="line"><span class="language-javascript">            student</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注意点2"><a href="#注意点2" class="headerlink" title="注意点2"></a>注意点2</h4><h5 id="1-关于组件名"><a href="#1-关于组件名" class="headerlink" title="1.关于组件名"></a>1.关于组件名</h5><h6 id="一个单词组成"><a href="#一个单词组成" class="headerlink" title="一个单词组成"></a>一个单词组成</h6><ol>
<li>第一种写法(首字母小写)：school</li>
<li>第二种写法(首字母大写)：School。<strong>优点：与开发者工具中的name一样</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const s = Vue.extend(&#123;&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        school: s,</span><br><span class="line">        School: s,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="多个单词组成"><a href="#多个单词组成" class="headerlink" title="多个单词组成"></a>多个单词组成</h6><ol>
<li>第一种写法(kebab-case命名)：my-school**(需要加引号)**</li>
<li>第二种写法(CamelCase命名)：MySchool <strong>(需要Vue脚手架支持)</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const s = Vue.extend(&#123;&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &#x27;#root&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        &#x27;my-school&#x27;: s,</span><br><span class="line">        MySchool : s,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h6 id="备注-1"><a href="#备注-1" class="headerlink" title="备注"></a>备注</h6><ol>
<li>组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</li>
<li>可以使用name配置项指定组件在开发者工具中呈现的名字。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const s = Vue.extend(&#123;</span><br><span class="line">	name: &#x27;atguigu&#x27;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-关于组件标签"><a href="#2-关于组件标签" class="headerlink" title="2.关于组件标签:"></a>2.关于组件标签:</h5><h6 id="第一种写法："><a href="#第一种写法：" class="headerlink" title="第一种写法："></a>第一种写法：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;school&gt;&lt;/school&gt;</span><br></pre></td></tr></table></figure>

<h6 id="第二种写法："><a href="#第二种写法：" class="headerlink" title="第二种写法："></a>第二种写法：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;school/&gt;</span><br></pre></td></tr></table></figure>

<h6 id="备注：-1"><a href="#备注：-1" class="headerlink" title="备注："></a>备注：</h6><p>不用使用脚手架时，<school/>会导致后续组件甚至普通文字、标签都不能渲染。</p>
<h5 id="3-一个简写方式："><a href="#3-一个简写方式：" class="headerlink" title="3.一个简写方式："></a>3.一个简写方式：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//const school = Vue.extend(options) 可简写为：const school = options</span><br><span class="line"></span><br><span class="line">const school = &#123;</span><br><span class="line">    template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123; &#123;name&#125; &#125;&lt;/h2&gt;	</span><br><span class="line">        &lt;h2&gt;学校地址：&#123; &#123;address&#125; &#125;&lt;/h2&gt;	</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &#x27;尚硅谷&#x27;,</span><br><span class="line">            address: &#x27;北京&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h4><p><strong>类似于java实体类中学校中嵌套了学生</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String adress;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="如何嵌套"><a href="#如何嵌套" class="headerlink" title="如何嵌套"></a>如何嵌套</h5><h6 id="先定义一个student组件"><a href="#先定义一个student组件" class="headerlink" title="先定义一个student组件"></a>先定义一个student组件</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const student = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;学生姓名：&#123; &#123;name&#125; &#125;&lt;/h2&gt;	</span><br><span class="line">            &lt;h2&gt;学生年龄：&#123; &#123;age&#125; &#125;&lt;/h2&gt;	</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &#x27;张三&#x27;,</span><br><span class="line">            age: 18</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="再定义一个School组件，在School注册Student组件"><a href="#再定义一个School组件，在School注册Student组件" class="headerlink" title="再定义一个School组件，在School注册Student组件"></a>再定义一个School组件，在School注册Student组件</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const school = Vue.extend(&#123;</span><br><span class="line">        template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123; &#123;name&#125; &#125;&lt;/h2&gt;	</span><br><span class="line">        &lt;h2&gt;学校地址：&#123; &#123;address&#125; &#125;&lt;/h2&gt;	</span><br><span class="line">        &lt;student&gt;&lt;/student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">	data() &#123;</span><br><span class="line">		return &#123;</span><br><span class="line">			name: &#x27;尚硅谷&#x27;,</span><br><span class="line">			address: &#x27;北京&#x27;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    //注册组件（局部）</span><br><span class="line">    components: &#123;</span><br><span class="line">        student</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="再定义一个School同级的组件"><a href="#再定义一个School同级的组件" class="headerlink" title="再定义一个School同级的组件"></a>再定义一个School同级的组件</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const hello = Vue.extend(&#123;</span><br><span class="line">	template: `</span><br><span class="line">    	&lt;h1&gt;&#123; &#123;msg&#125; &#125;&lt;/h1&gt;</span><br><span class="line">    `,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &#x27;欢迎来到电子信息学习&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="定义一个app总组件"><a href="#定义一个app总组件" class="headerlink" title="定义一个app总组件"></a>定义一个app总组件</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const app = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">            &lt;school&gt;&lt;/school&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    components: &#123;</span><br><span class="line">        school,</span><br><span class="line">        hello</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scrip</span>&gt;</span></span><br><span class="line">	new Vue(&#123;</span><br><span class="line">    	template:`</span><br><span class="line">        	<span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">    	`,</span><br><span class="line">    	el: &#x27;#root&#x27;,</span><br><span class="line">    	//注册组件（局部）</span><br><span class="line">    	components: &#123;</span><br><span class="line">        	app</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="组件结构"><a href="#组件结构" class="headerlink" title="组件结构"></a>组件结构</h5><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto2/master/Snipaste_2023-03-20_16-04-40.jpg"
                     
                ></p>
<h5 id="关于VueComponent"><a href="#关于VueComponent" class="headerlink" title="关于VueComponent"></a>关于VueComponent</h5><p>1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p>
<p>2.我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</p>
<p>3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！</p>
<p>4.关于this指向：</p>
<p>​	(1).组件配置中：</p>
<p>​		data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</p>
<p>​	(2).new Vue(options)配置中：</p>
<p>​		data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</p>
<p>5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。Vue的实例对象，以后简称vm。</p>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>前端学习的记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习脚手架篇</title>
    <url>/2023/04/15/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E8%84%9A%E6%89%8B%E6%9E%B6%E7%AF%87/</url>
    <content><![CDATA[<h1 id="Vue学习脚手架篇"><a href="#Vue学习脚手架篇" class="headerlink" title="Vue学习脚手架篇"></a>Vue学习脚手架篇</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面*</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue*</span><br><span class="line">│   │── App.vue: 汇总所有组件*</span><br><span class="line">│   │── main.js: 入口文件*</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure>

<h3 id="index主页面"><a href="#index主页面" class="headerlink" title="index主页面"></a>index主页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 针对IE浏览器的一个特殊配置，含义是让IE浏览器以最高的渲染级别渲染页面 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 开启移动端的理想视口 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置页签图标 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置网页标题 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">		&lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如何浏览器不能使用script输出的内容--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled.</span><br><span class="line">				Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 容器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="main-js入口文件"><a href="#main-js入口文件" class="headerlink" title="main.js入口文件"></a>main.js入口文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  该文件是整个项目的入口文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    关于不同版本的Vue：</span></span><br><span class="line"><span class="comment">        1.vu e.js与vue.runtime.xxx.js的区别：</span></span><br><span class="line"><span class="comment">            (1).vue.js是完整版的Vue，包含：核心功能+模板解析器。</span></span><br><span class="line"><span class="comment">            (2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用</span></span><br><span class="line"><span class="comment">            render函数接收到的createElement函数去指定具体内容。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="关于render"><a href="#关于render" class="headerlink" title="关于render"></a>关于render</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params">createElement</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;你好呀&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">||</span><br><span class="line">\/  </span><br><span class="line"></span><br><span class="line"><span class="attr">render</span>:<span class="function"><span class="params">createElement</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;你好呀&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">||</span><br><span class="line">\/  </span><br><span class="line"></span><br><span class="line"><span class="attr">render</span>:<span class="function"><span class="params">createElement</span>=&gt;</span><span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;你好呀&#x27;</span>)</span><br><span class="line"></span><br><span class="line">||</span><br><span class="line">\/  </span><br><span class="line"></span><br><span class="line"><span class="attr">render</span>:<span class="function"><span class="params">q</span>=&gt;</span><span class="title function_">q</span>(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;你好呀&#x27;</span>)	<span class="comment">//q(&#x27;h1&#x27;,&#x27;你好呀&#x27;)代表元素</span></span><br><span class="line"></span><br><span class="line">||</span><br><span class="line">\/  </span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)	<span class="comment">//h(App)代表组件</span></span><br></pre></td></tr></table></figure>

<h4 id="关于不同版本的Vue："><a href="#关于不同版本的Vue：" class="headerlink" title="关于不同版本的Vue："></a>关于不同版本的Vue：</h4><ol>
<li><p>vue.js与vue.runtime.xxx.js的区别：<br> (1). vue.js是完整版的Vue，包含：核心功能+模板解析器。<br> (2). vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</p>
</li>
<li><p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容。</p>
</li>
</ol>
<h3 id="App-vue-汇总所有组件"><a href="#App-vue-汇总所有组件" class="headerlink" title="App.vue: 汇总所有组件"></a>App.vue: 汇总所有组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;img src=&quot;./assets/logo.png&quot; alt=&quot;logo&quot;&gt;</span><br><span class="line">        &lt;School&gt;&lt;/School&gt;</span><br><span class="line">        &lt;Student&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//引入组件</span><br><span class="line">import School from &#x27;./components/School&#x27;</span><br><span class="line">import Student from &#x27;./components/Student&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;App&#x27;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        School,</span><br><span class="line">        Student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="component-存放组件"><a href="#component-存放组件" class="headerlink" title="component: 存放组件"></a>component: 存放组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 组件的结构 --&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123; &#123; name &#125; &#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123; &#123; address &#125; &#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 组件交互相关的代码(数据、方法等)</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;School&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &quot;尚硅谷&quot;,</span><br><span class="line">            address: &quot;北京昌平&quot;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showName() &#123;</span><br><span class="line">            alert(this.name);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 组件的样式 */</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>被用来给元素或子组件注册引用信息（id的替代者）</p>
<p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 v-text=&quot;msg&quot; ref=&quot;tittle&quot; id=&quot;tittle&quot;&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;button ref=&quot;btn&quot; @click=&quot;showDOM&quot;&gt;点我输出上方的DOM元素&lt;/button&gt;</span><br><span class="line">        &lt;School ref=&quot;sch&quot; id=&quot;sch&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    //引入School组件</span><br><span class="line">    import School from &#x27;./components/School&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;App&#x27;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            School,</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                msg:&#x27;欢迎学习Vue&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showDOM()&#123;</span><br><span class="line">                console.log(&#x27;$refs&#x27;,this.$refs)</span><br><span class="line">                	console.log(&quot;getElementById(&#x27;tittle&#x27;)&quot;,document.getElementById(&#x27;tittle&#x27;))</span><br><span class="line">                console.log(&#x27;$refs.tittle&#x27;,this.$refs.tittle)</span><br><span class="line">                console.log(&#x27;$refs.btn&#x27;,this.$refs.btn)</span><br><span class="line">                console.log(&quot;getElementById(&#x27;sch&#x27;)&quot;,document.getElementById(&#x27;sch&#x27;))</span><br><span class="line">                console.log(&#x27;$refs.sch&#x27;,this.$refs.sch)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto2/master/Snipaste_2023-03-21_17-52-52.jpg"
                     
                ></p>
<h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><h3 id="为什么要用props？"><a href="#为什么要用props？" class="headerlink" title="为什么要用props？"></a>为什么要用props？</h3><p>该组件可能会被多次征用，同时里面的属性名不一样</p>
<p><strong>父组件给子组件传值</strong></p>
<h4 id="反例"><a href="#反例" class="headerlink" title="反例"></a>反例</h4><h5 id="student组件"><a href="#student组件" class="headerlink" title="student组件"></a>student组件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 组件的结构 --&gt;</span><br><span class="line">    &lt;div class=&quot;school&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123; &#123; msg &#125; &#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123; &#123; name &#125; &#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生性别：&#123; &#123; sex &#125; &#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生年龄：&#123; &#123; age &#125; &#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 组件交互相关的代码(数据、方法等)</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &#x27;我是一个学生&#x27;,</span><br><span class="line">            name: &#x27;张三&#x27;</span><br><span class="line">            sex: &#x27;男&#x27;</span><br><span class="line">            age: 18</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="App组件调用"><a href="#App组件调用" class="headerlink" title="App组件调用"></a>App组件调用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Student/&gt;</span><br><span class="line">        &lt;Student/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    import Student from &#x27;./components/Student&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;App&#x27;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Student,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="显示结果为："><a href="#显示结果为：" class="headerlink" title="显示结果为："></a>显示结果为：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我是一个学生</span><br><span class="line">学生姓名：张三</span><br><span class="line">学生性别：男</span><br><span class="line">学生年龄：18</span><br><span class="line">我是一个学生</span><br><span class="line">学生姓名：张三</span><br><span class="line">学生性别：男</span><br><span class="line">学生年龄：18</span><br></pre></td></tr></table></figure>

<p>​	我希望的是两个组件显式的内容不一样，所以就要有props</p>
<h3 id="怎么用-data中就不用写这些属性了"><a href="#怎么用-data中就不用写这些属性了" class="headerlink" title="怎么用(data中就不用写这些属性了)"></a>怎么用(data中就不用写这些属性了)</h3><h5 id="Student组件"><a href="#Student组件" class="headerlink" title="Student组件"></a>Student组件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 组件的结构 --&gt;</span><br><span class="line">    &lt;div class=&quot;school&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123; &#123; msg &#125; &#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123; &#123; name &#125; &#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生性别：&#123; &#123; sex &#125; &#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生年龄：&#123; &#123; myAge +1 &#125; &#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;updateAge&quot;&gt;尝试修改收到的年龄&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 组件交互相关的代码(数据、方法等)</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &#x27;我是一个学生&#x27;,</span><br><span class="line">            myAge: this.age</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        updateAge()&#123;</span><br><span class="line">            this.myAge = 22</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="App组件"><a href="#App组件" class="headerlink" title="App组件"></a>App组件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Student name=&quot;张三&quot; sex=&quot;男&quot; :age=&quot;18&quot;/&gt;</span><br><span class="line">        &lt;Student name=&quot;李四&quot; sex=&quot;女&quot; age=&quot;18&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    //引入School组件</span><br><span class="line">    import Student from &#x27;./components/Student&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;App&#x27;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            Student,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="第一种简单接收"><a href="#第一种简单接收" class="headerlink" title="第一种简单接收"></a>第一种简单接收</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props:[&#x27;name&#x27;,&#x27;sex&#x27;,&#x27;age&#x27;],</span><br></pre></td></tr></table></figure>



<h4 id="第二种接收的同时对数据进行类型限制"><a href="#第二种接收的同时对数据进行类型限制" class="headerlink" title="第二种接收的同时对数据进行类型限制"></a>第二种接收的同时对数据进行类型限制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">	name:String,</span><br><span class="line">	age:Number,</span><br><span class="line">	sex:String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第三种接收的同时对数据进行类型限制-默认值的指定-x2F-必要性的限制"><a href="#第三种接收的同时对数据进行类型限制-默认值的指定-x2F-必要性的限制" class="headerlink" title="第三种接收的同时对数据进行类型限制,默认值的指定&#x2F;必要性的限制"></a>第三种接收的同时对数据进行类型限制,默认值的指定&#x2F;必要性的限制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">	name:&#123;</span><br><span class="line">		type:String,</span><br><span class="line">		required:true</span><br><span class="line">	&#125;,</span><br><span class="line">	age:&#123;</span><br><span class="line">		type:Number,</span><br><span class="line">		default:99</span><br><span class="line">	&#125;,</span><br><span class="line">	sex:&#123;</span><br><span class="line">		type:String,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何赋值？"><a href="#如何赋值？" class="headerlink" title="如何赋值？"></a>如何赋值？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--age默认输入的是字符串，子组件只会拼接--&gt;</span><br><span class="line">&lt;Student name=&quot;李四&quot; sex=&quot;女&quot; age=&quot;18&quot;/&gt;</span><br><span class="line">&lt;!--:age -&gt; v-bind:age调用的是表达式--&gt;</span><br><span class="line">&lt;Student name=&quot;李四&quot; sex=&quot;女&quot; :age=&quot;18&quot;/&gt;</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>default和required不会同时出现</li>
<li>props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</li>
<li>02条底层是因为student组件先调用props中的age再将this.age赋值给myAge，所以就不是修改age</li>
<li>type：属性的类型</li>
<li>required：属性的内容是否为必要的</li>
<li>default：属性的默认值</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 组件的结构 --&gt;</span><br><span class="line">    &lt;div class=&quot;school&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学生年龄：&#123; &#123; myAge +1 &#125; &#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;updateAge&quot;&gt;尝试修改收到的年龄&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 组件交互相关的代码(数据、方法等)</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Student&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        console.log(this)</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &#x27;我是一个学生&#x27;,</span><br><span class="line">            myAge: this.age</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    //简单接收</span><br><span class="line">    props:[&#x27;name&#x27;,&#x27;sex&#x27;,&#x27;age&#x27;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        updateAge()&#123;</span><br><span class="line">            this.myAge++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="mixin-混入-x2F-混合"><a href="#mixin-混入-x2F-混合" class="headerlink" title="mixin(混入&#x2F;混合)"></a>mixin(混入&#x2F;混合)</h2><h3 id="为什么要用混合？"><a href="#为什么要用混合？" class="headerlink" title="为什么要用混合？"></a>为什么要用混合？</h3><p>可以把多个组件共用的配置提取成一个混入对象，减少代码量</p>
<h3 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h3><h4 id="第一步：定义混合"><a href="#第一步：定义混合" class="headerlink" title="第一步：定义混合"></a>第一步：定义混合</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hunhe = &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="attr">return</span>: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">methods</span>: &#123;  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二步：使用混入"><a href="#第二步：使用混入" class="headerlink" title="第二步：使用混入"></a>第二步：使用混入</h4><h5 id="局部混合"><a href="#局部混合" class="headerlink" title="局部混合"></a>局部混合</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">//引入一个混合</span><br><span class="line">import &#123; hunhe, hunhe2 &#125; from &#x27;../mixin&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Student&#x27;,</span><br><span class="line">    </span><br><span class="line">    mixins: [hunhe, hunhe2],</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="全局混合"><a href="#全局混合" class="headerlink" title="全局混合"></a>全局混合</h5><p>在main.js中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hunhe,hunhe2 &#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(hunhe)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(hunhe2)</span><br></pre></td></tr></table></figure>

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>如果混合中的<strong>方法或数据</strong>与组件中的重复了，Vue会默认调用<strong>自己组件中的数据或方法</strong></p>
</li>
<li><p>如果是挂载，则Vue都会调用，且混合中的挂载先调用</p>
</li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>用于增强Vue</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p>
<h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><h4 id="定义插件"><a href="#定义插件" class="headerlink" title="定义插件"></a>定义插件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抛出去</span></span><br><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugins,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>用法跟以前一样</p>
<h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol>
<li>作用：让样式在局部生效，防止冲突。</li>
<li>写法：<code>&lt;style scoped&gt;</code></li>
</ol>
<h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol>
<li><p>组件化编码流程：</p>
<p> ​	(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p>
<p> ​	(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p>
<p> ​			1).一个组件在用：放在组件自身即可。</p>
<p> ​			2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p>
<p> ​	(3).实现交互：从绑定事件开始。</p>
</li>
<li><p>props适用于：</p>
<p> ​	(1).父组件 &#x3D;&#x3D;&gt; 子组件 通信</p>
<p> ​	(2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p>
</li>
<li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p>
</li>
<li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p>
</li>
</ol>
<h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol>
<li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p>
</li>
<li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p>
</li>
<li><p>相关API：</p>
<ol>
<li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p>
</li>
<li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p>
<pre><code>     该方法接受一个键名作为参数，返回键名对应的值。
</code></pre>
</li>
<li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p>
<pre><code>     该方法接受一个键名作为参数，并把该键名从存储中删除。
</code></pre>
</li>
<li><p><code> xxxxxStorage.clear()</code></p>
<pre><code>     该方法会清空存储中的所有数据。
</code></pre>
</li>
</ol>
</li>
<li><p>备注：</p>
<ol>
<li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li>
<li>LocalStorage存储的内容，需要手动清除才会消失。</li>
<li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li>
<li><code>JSON.parse(null)</code>的结果依然是null。</li>
</ol>
</li>
</ol>
<h2 id="组件自定义事件"><a href="#组件自定义事件" class="headerlink" title="组件自定义事件"></a>组件自定义事件</h2><h3 id="啥叫组件自定义事件"><a href="#啥叫组件自定义事件" class="headerlink" title="啥叫组件自定义事件"></a>啥叫组件自定义事件</h3><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="绑定自定义事件"><a href="#绑定自定义事件" class="headerlink" title="绑定自定义事件"></a>绑定自定义事件</h4><h5 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h5><ol>
<li><p>第一种写法，使用@或v-on</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> @<span class="attr">atguigu</span>=<span class="string">&quot;父组件的方法名&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">v-on:atguigu.once</span>=<span class="string">&quot;getStduentName&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种写法，使用ref</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h5><ol>
<li><p>法一 使用@或v-on的定义方法<br> 直接在methods中定义<code>getStduentName</code>方法</p>
</li>
<li><p>法二 使用ref方式绑定的</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此方式需要在methods中定义方法</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>, <span class="variable language_">this</span>.<span class="property">getStduentName</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此方式不需要在methods中定义方法，但要写箭头函数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App收到了学生名&#x27;</span>, name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">studentName</span> = name</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="子元素中触发事件"><a href="#子元素中触发事件" class="headerlink" title="子元素中触发事件"></a>子元素中触发事件</h5><p>直接在方法中使用即可</p>
<p><code>this.$emit(&#39;父组件的自定义事件名&#39;, 属性)</code></p>
<p><strong>属性可有可无</strong></p>
<h5 id="子元素中解绑自定义事件"><a href="#子元素中解绑自定义事件" class="headerlink" title="子元素中解绑自定义事件"></a>子元素中解绑自定义事件</h5><h6 id="解绑单个"><a href="#解绑单个" class="headerlink" title="解绑单个"></a>解绑单个</h6><p><code>this.$off(&#39;自定义事件名&#39;)</code></p>
<h6 id="解绑多个"><a href="#解绑多个" class="headerlink" title="解绑多个"></a>解绑多个</h6><p> <code>this.$off([&#39;atguigu&#39;, &#39;demo&#39;])</code></p>
<h6 id="解绑所有"><a href="#解绑所有" class="headerlink" title="解绑所有"></a>解绑所有</h6><p><code>this.$off()</code></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>如果销毁了子组件的实例，销毁后所有子组件实例的事件全都不奏效。</li>
<li>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</li>
</ol>
<h2 id="全局事件总线-vue常用"><a href="#全局事件总线-vue常用" class="headerlink" title="全局事件总线-vue常用"></a>全局事件总线-vue常用</h2><h3 id="为什么要用全局事件总线"><a href="#为什么要用全局事件总线" class="headerlink" title="为什么要用全局事件总线?"></a>为什么要用全局事件总线?</h3><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p>
<h3 id="怎么使用它"><a href="#怎么使用它" class="headerlink" title="怎么使用它"></a>怎么使用它</h3><ol>
<li><p>创建一个傀儡组件目的使所有的组件能看见他，所以这里使用vm实例</p>
</li>
<li><p>注意时间！必须在vm创造之前安装全局事件总线</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">//安装全局事件总线，bus另一个含义-&gt;总线</span></span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用事件总线</p>
<ol>
<li><p>接收数据，谁要接收数据谁就要绑定自定义事件，事件的<span style="color:red">回调自身</span></p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是School组件，收到了数据&#x27;</span>,data);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送数据<code>this.$bus.$emit(&#39;接收数据的自定义事件名&#39;,数据)</code></p>
</li>
</ol>
</li>
<li><p>最好在绑定自定义事件的组件中的beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。因为绑定的是傀儡的自定义事件如果不解绑资源浪费</p>
</li>
</ol>
<h2 id="消息订阅与发布-pubsub库-vue不常用"><a href="#消息订阅与发布-pubsub库-vue不常用" class="headerlink" title="消息订阅与发布(pubsub库)-vue不常用"></a>消息订阅与发布(pubsub库)-vue不常用</h2><h3 id="为什么使用消息订阅与发布？"><a href="#为什么使用消息订阅与发布？" class="headerlink" title="为什么使用消息订阅与发布？"></a>为什么使用消息订阅与发布？</h3><p>组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p>
<h3 id="怎么用？-1"><a href="#怎么用？-1" class="headerlink" title="怎么用？"></a>怎么用？</h3><ol>
<li><p><code>npm i pubsub-js</code>安装pubsub</p>
</li>
<li><p>在要使用消息订阅与发布的组件中导入<code>import pubsub from &#39;pubsub-js&#39;</code></p>
</li>
<li><p>发布数据<code>pubsub.publish(&#39;消息名称&#39;,数据)</code></p>
</li>
<li><p>订阅消息(两种写法)</p>
<ol>
<li><p>法一直接回调</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">pubId</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;消息名&#x27;</span>,<span class="function">(<span class="params">messageName,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人发布了hello消息，hello消息的回调执行了&quot;</span>, messageName,data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>法二间接调方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">pubId</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">messageName, data</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人发布了hello消息，hello消息的回调执行了&quot;</span>, messageName, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>取消订阅，在订阅组件中创建</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//根据id取消订阅与总线不同</span></span><br><span class="line">	pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pubId</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol>
<li>语法：<code>this.$nextTick(回调函数)</code></li>
<li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li>
<li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li>
</ol>
<h2 id="配置代理服务器"><a href="#配置代理服务器" class="headerlink" title="配置代理服务器"></a>配置代理服务器</h2><h3 id="为什么要用代理服务器？"><a href="#为什么要用代理服务器？" class="headerlink" title="为什么要用代理服务器？"></a>为什么要用代理服务器？</h3><p>资源的请求要遵循同源原则</p>
<blockquote>
<p>同源策略：协议名，主机名，端口号一致</p>
</blockquote>
<h3 id="如何代理？"><a href="#如何代理？" class="headerlink" title="如何代理？"></a>如何代理？</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	前端服务器也是8080默认请求的是public目录下的资源</span></span><br><span class="line"><span class="comment">	如果public目录中有students则就不会像后端发请求</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8080/students&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">	<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, response.<span class="property">data</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">   	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><ol>
<li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li>
<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li>
<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li>
</ol>
<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/sxx&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配所有以sxx开头的字符串把它变为空</span></span><br><span class="line">        <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/sxx&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认true用于支持websocket</span></span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认true，用于控制请求头中的host值</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;/tjdz&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/tjdz&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	用sxx做标识了即使前端有也是向后端发请求</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8080/sxx/students&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">	<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功了&#x27;</span>, response.<span class="property">data</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败了&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">   	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h5 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h5><table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>pathRewrite</td>
<td>利用正则表达替换字符</td>
</tr>
<tr>
<td>ws</td>
<td>用于支持websocket(默认true)</td>
</tr>
<tr>
<td>changeOrigin</td>
<td>用于控制请求头中的host值(默认true)</td>
</tr>
</tbody></table>
<h2 id="GitHub搜索案例"><a href="#GitHub搜索案例" class="headerlink" title="GitHub搜索案例"></a>GitHub搜索案例</h2><p>api<code>https://api.github.com/search/users?q=$&#123;this.keyWord&#125;</code></p>
<h3 id="axois版"><a href="#axois版" class="headerlink" title="axois版"></a>axois版</h3><h3 id="vue-resource版"><a href="#vue-resource版" class="headerlink" title="vue-resource版"></a>vue-resource版</h3><h2 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h2><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p>
<h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><p>父组件使用子组件用双标签<code>&lt;组件名&gt;内容&lt;/组件名&gt;</code></p>
<p>子组件中要使用内容的地方加<code>&lt;slot&gt;&lt;/slot&gt;</code></p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;Category title=&quot;美食&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;https://s3.ax1x.com/2021/01/16/srJlq0.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Category from &quot;./components/Category&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &#x27;App&#x27;,</span><br><span class="line">        components: &#123; Category &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">			return &#123;</span><br><span class="line">				foods:[&#x27;火锅&#x27;,&#x27;烧烤&#x27;,&#x27;小龙虾&#x27;,&#x27;牛排&#x27;],</span><br><span class="line">				games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;],</span><br><span class="line">				films:[&#x27;《教父》&#x27;,&#x27;《拆弹专家》&#x27;,&#x27;《你好，李焕英》&#x27;,&#x27;《尚硅谷》&#x27;]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">        &lt;h3&gt;&#123; &#123;title&#125; &#125;分类&lt;/h3&gt;</span><br><span class="line">        &lt;!-- 定义一个插槽定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span><br><span class="line">        &lt;slot&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Category&#x27;,</span><br><span class="line">        props:[&#x27;listData&#x27;,&#x27;title&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>见名思意当有多个插槽时，对插槽赋名让标签对应各自的位置</p>
<h4 id="两种写法"><a href="#两种写法" class="headerlink" title="两种写法"></a>两种写法</h4><ol>
<li><code>slot=&quot;插槽名&quot;</code></li>
<li><code>v-slot:插槽名</code></li>
</ol>
<h4 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>我是一些默认值，当使用者没有传递具体结构时，我会出现1<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>我是一些默认值，当使用者没有传递具体结构时，我会出现2<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;电影&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">controls</span> <span class="attr">src</span>=<span class="string">&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>经典<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>热门<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>欢迎前来观影<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><h4 id="什么是作用域插槽"><a href="#什么是作用域插槽" class="headerlink" title="什么是作用域插槽"></a>什么是作用域插槽</h4><p><span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p>
<h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><ol>
<li>子组件中<code>&lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</code></li>
<li>父组件中<ol>
<li><code>&lt;template scope=&quot;名字自定义&quot;&gt;&#123; &#123;名字自定义.games&#125; &#125;&lt;/template&gt;</code></li>
<li><code>&lt;template scope=&quot;&#123;games&#125;&quot;&gt;&#123; &#123;games&#125; &#125;&lt;/template&gt;</code>ES6语法</li>
<li><code>&lt;template slot-scope=&quot;名字自定义&quot;&gt;&#123; &#123;名字自定义.games&#125; &#125;&lt;/template&gt;</code></li>
</ol>
</li>
</ol>
<h4 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h4><p>子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">        &lt;h3&gt;&#123; &#123; title &#125; &#125;分类&lt;/h3&gt;</span><br><span class="line">        &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Category&quot;,</span><br><span class="line">    props: [&quot;listData&quot;, &quot;title&quot;],</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            games: [&quot;红色警戒&quot;, &quot;穿越火线&quot;, &quot;劲舞团&quot;, &quot;超级玛丽&quot;],</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">            &lt;template scope=&quot;atguigu&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;(g, index) in atguigu.games&quot; :key=&quot;index&quot;&gt;&#123; &#123; g &#125; &#125;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">        &lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">            &lt;template scope=&quot;&#123;games&#125;&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li style=&quot;color: red;&quot; v-for=&quot;(g, index) in games&quot; :key=&quot;index&quot;&gt;&#123; &#123; g &#125; &#125;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">        &lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">            &lt;template slot-scope=&quot;atguigu&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;(g, index) in atguigu.games&quot; :key=&quot;index&quot;&gt;&#123; &#123; g &#125; &#125;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Category from &quot;./components/Category&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;App&quot;,</span><br><span class="line">    components: &#123; Category &#125;,</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto2/master/vuex.png"
                     
                ></p>
<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>
<h4 id="何时使用？"><a href="#何时使用？" class="headerlink" title="何时使用？"></a>何时使用？</h4><p>多个组件需要共享数据时</p>
<h3 id="2-搭建vuex环境"><a href="#2-搭建vuex环境" class="headerlink" title="2.搭建vuex环境"></a>2.搭建vuex环境</h3><ol>
<li><p>安装Vuex<code>npm i vuex@3</code>对应的vue2</p>
</li>
<li><p>在src下创建文件store&#x2F;index.js</p>
<ol>
<li><p>引入Vue和Vuex</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用vuex插件<code>Vue.use(Vuex)</code></p>
</li>
<li><p>准备actions - 用于响应组件中的动作<code>const actions = &#123;&#125;</code></p>
</li>
<li><p>准备mutations - 用于操作数据(state)<code>const mutations = &#123;&#125;</code></p>
</li>
<li><p>准备state - 用于存储数据<code>const state = &#123;&#125;</code></p>
</li>
<li><p>准备getters - 用于将state中的数据进行加工</p>
</li>
<li><p>创建&amp;暴露store</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,	<span class="comment">//actions:actions</span></span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>在main.js中创建vm时引入并传入store配置项</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">	<span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-案例-求和"><a href="#3-案例-求和" class="headerlink" title="3.案例-求和"></a>3.案例-求和</h3><h4 id="纯Vue版"><a href="#纯Vue版" class="headerlink" title="纯Vue版"></a>纯Vue版</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;当前求和为：&#123; &#123; sum &#125; &#125;&lt;/h1&gt;</span><br><span class="line">        &lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">            &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Count&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            //当前的和</span><br><span class="line">            sum: 0,</span><br><span class="line">            // 用户选择的数字</span><br><span class="line">            n: 1,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        increment() &#123;</span><br><span class="line">            this.sum += this.n</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement() &#123;</span><br><span class="line">            this.sum -= this.n</span><br><span class="line">        &#125;,</span><br><span class="line">        incrementOdd() &#123;</span><br><span class="line">            if (this.sum % 2) &#123;</span><br><span class="line">                this.sum += this.n</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        incrementWait() &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                this.sum += this.n</span><br><span class="line">            &#125;, 500)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Vuex版"><a href="#Vuex版" class="headerlink" title="Vuex版"></a>Vuex版</h4><p>子组件的script</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Count&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            // 用户选择的数字</span><br><span class="line">            n: 1,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        console.log(&#x27;Count&#x27;,this);</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        increment() &#123;</span><br><span class="line">            this.$store.commit(&#x27;JIA&#x27;,this.n)</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement() &#123;</span><br><span class="line">            this.$store.commit(&#x27;JIAN&#x27;,this.n)</span><br><span class="line">        &#125;,</span><br><span class="line">        incrementOdd() &#123;</span><br><span class="line">            this.$store.dispatch(&#x27;jiaOdd&#x27;,this.n)</span><br><span class="line">        &#125;,</span><br><span class="line">        incrementWait() &#123;</span><br><span class="line">            this.$store.dispatch(&#x27;jiaWait&#x27;,this.n)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>store</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">// jia(context,value)&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&quot;actions中的加被调用了&quot;,context,value);</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;JIA&#x27;,value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// jian(context,value)&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&quot;actions中的加被调用了&quot;);</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;JIAN&#x27;,value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="title function_">jiaOdd</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">jiaWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">        &#125;, <span class="number">500</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mutations中的加被调用了&quot;</span>,state,value);</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">JIAN</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mutations中的加被调用了&quot;</span>);</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="comment">//当前的和</span></span><br><span class="line">    <span class="attr">sum</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><ol>
<li><p>普通加和普通减不需要进行逻辑处理所以可以不用经过<code>actions</code>直接进入<code>mutations</code>所以就需要调用<code>this.$store.commit</code></p>
</li>
<li><p>需要逻辑处理的最好放在<code>actions</code>中,经过<code>actions</code>加工所以需要调用<code>this.$store.dispatch</code></p>
</li>
<li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p>
</li>
<li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p>
<blockquote>
<p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p>
</blockquote>
</li>
</ol>
<h3 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h3><h4 id="啥是getters？"><a href="#啥是getters？" class="headerlink" title="啥是getters？"></a>啥是getters？</h4><p>当state中的数据需要经过加工后再使用时，可以使用getters加工。</p>
<h4 id="如何使用？-1"><a href="#如何使用？-1" class="headerlink" title="如何使用？"></a>如何使用？</h4><ol>
<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">	<span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组件中读取数据：<code>$store.getters.bigSum</code></p>
</li>
</ol>
<h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><blockquote>
<p>vuex中的state相当于vue实例中的data</p>
<p>getters相当于vue实例中的computed</p>
</blockquote>
<h3 id="mapState和mapGetters"><a href="#mapState和mapGetters" class="headerlink" title="mapState和mapGetters"></a>mapState和mapGetters</h3><h4 id="为什么要使用mapState和mapGetters？"><a href="#为什么要使用mapState和mapGetters？" class="headerlink" title="为什么要使用mapState和mapGetters？"></a>为什么要使用mapState和mapGetters？</h4><p>因为官方建议插值语法中的表达式尽量简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;当前求和为：&#123; &#123; $store.state.sum &#125; &#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h3&gt;当前求和放大10倍为：&#123; &#123; $store.getters.bigSum &#125; &#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;我在&#123; &#123; $store.state.school &#125; &#125;，学习&#123; &#123; $store.state.subject &#125; &#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>,当然可以把表达式写在computed中如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">	<span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">sum</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">school</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">school</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">subject</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">subject</span></span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="title function_">bigSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">bigSum</span></span><br><span class="line">    &#125;, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但也要重复写</p>
<h4 id="怎么用？-2"><a href="#怎么用？-2" class="headerlink" title="怎么用？"></a>怎么用？</h4><ol>
<li>在组件中引入<code>import &#123; mapState, mapGetters &#125; from &#39;vuex&#39;;</code></li>
<li>生成计算属性<ol>
<li>对象写法<ol>
<li>state中的数据<code>...mapState(&#123;&#39;he&#39;:&#39;sum&#39;,&#39;xuexiao&#39;:&#39;school&#39;,&#39;xueke&#39;:&#39;subject&#39;,&#125;),</code></li>
<li>getters中的数据<code>...mapGetters(&#123;bigSum:&#39;bigSum&#39;&#125;)</code></li>
</ol>
</li>
<li>数组写法(个人感觉常用)<ol>
<li>state中的数据<code>...mapState([&#39;sum&#39;, &#39;school&#39;, &#39;subject&#39;]),</code></li>
<li>getters中的数据<code>...mapGetters([&#39;bigSum&#39;])</code></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="mapMutations-直接传值-和mapActions-逻辑处理"><a href="#mapMutations-直接传值-和mapActions-逻辑处理" class="headerlink" title="mapMutations(直接传值)和mapActions(逻辑处理)"></a>mapMutations(直接传值)和mapActions(逻辑处理)</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li>引入<code>import &#123;mapMutations, mapActions &#125; from &#39;vuex&#39;;</code></li>
<li>生产方法<ol>
<li>对象写法(常用)<ol>
<li>直接操作mutations:<code>...mapMutations(&#123; increment: &#39;JIA&#39;, decrement: &#39;JIAN&#39; &#125;),</code></li>
<li>操作actions:<code>...mapActions(&#123; incrementOdd: &#39;jiaOdd&#39;, incrementWait: &#39;jiaWait&#39; &#125;),</code></li>
</ol>
</li>
<li>数组写法<ol>
<li>直接操作mutations:<code>...mapMutations([&#39;JIA&#39;,&#39;JIAN&#39;]),</code></li>
<li>操作actions:<code>...mapActions([&#39;jiaOdd&#39;,&#39;jiaWait&#39;])</code></li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>调用的使用要传值，如果不传值默认为event即鼠标事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment(n)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement(n)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementOdd(n)&quot;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementWait(n)&quot;</span>&gt;</span>等一等再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h3><ol>
<li><p>目的：让代码更好维护，让多种数据分类更加明确。</p>
</li>
<li><p>修改<code>store.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启命名空间后，组件中读取state数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启命名空间后，组件中读取getters数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启命名空间后，组件中调用dispatch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启命名空间后，组件中调用commit</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="路由！！！"><a href="#路由！！！" class="headerlink" title="路由！！！"></a>路由！！！</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><h5 id="第一步-安装vue-router"><a href="#第一步-安装vue-router" class="headerlink" title="第一步:安装vue-router"></a>第一步:安装vue-router</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i vue-router@<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>如果使用npm i vue-router命令默认安装的是vue-router4,但vue-router4不能再vue2上使用</p>
<h5 id="第二步在src目录下创建router文件夹"><a href="#第二步在src目录下创建router文件夹" class="headerlink" title="第二步在src目录下创建router文件夹"></a>第二步在src目录下创建router文件夹</h5><h6 id="创建index-js文件"><a href="#创建index-js文件" class="headerlink" title="创建index.js文件"></a>创建index.js文件</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一步:创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步:引入组件</span></span><br><span class="line"><span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">&#x27;vue组件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步:创建并暴露一个路由器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">	   &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="第三步在main-js中使用vue-router插件"><a href="#第三步在main-js中使用vue-router插件" class="headerlink" title="第三步在main.js中使用vue-router插件"></a>第三步在main.js中使用vue-router插件</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入vue-router插件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入路由器</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用vue-router插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="attr">router</span>:router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="第四步使用"><a href="#第四步使用" class="headerlink" title="第四步使用"></a>第四步使用</h5><h6 id="原生html页面跳转"><a href="#原生html页面跳转" class="headerlink" title="原生html页面跳转"></a>原生html页面跳转</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>active伪类选择器,当鼠标滑到这两个a标签两个标签活跃</p>
<h6 id="使用vue-router跳转"><a href="#使用vue-router跳转" class="headerlink" title="使用vue-router跳转"></a>使用vue-router跳转</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue-router替代方案:在需要活跃的标签上加入active-class&#x3D;”…”</p>
<h6 id="跳转之后如何展示"><a href="#跳转之后如何展示" class="headerlink" title="跳转之后如何展示"></a>跳转之后如何展示</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ol>
<li>main.js不光要引插件还要引配置的路由器，index.js只需引插件创对象</li>
<li>用<router-link>标签替代<a>标签—-&gt;最终还是编译为<a>标签，所有如果需要按钮图片…跳转则需要编程式路由</li>
<li>用to属性代替href属性，属性中写在路由器中配置的path</li>
<li>用active-class&#x3D;”(选择器名)active”代替active</li>
</ol>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol>
<li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li>
<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>
<li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li>
<li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li>
</ol>
<h3 id="多级-嵌套-路由"><a href="#多级-嵌套-路由" class="headerlink" title="多级(嵌套)路由"></a>多级(嵌套)路由</h3><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">   	&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">         <span class="attr">children</span>:[</span><br><span class="line">         	&#123;</span><br><span class="line">             	<span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><ol>
<li>通过children配置子级路由</li>
<li>子级路由的path不需要加&#x2F;，但<code>&lt;router-link&gt;</code>的to中的子级路由需要加&#x2F;</li>
</ol>
<h3 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h3><ol>
<li>传递参数</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">				</span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">	:to=&quot;&#123;</span><br><span class="line">		path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">		query:&#123;</span><br><span class="line">		   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接收参数：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure>

<h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><h4 id="为什么要用它？"><a href="#为什么要用它？" class="headerlink" title="为什么要用它？"></a>为什么要用它？</h4><p>像多级路由和带参路由要写一大堆的路由path所以需要简化它</p>
<h4 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h4><h5 id="第一步在路由上加个name属性"><a href="#第一步在路由上加个name属性" class="headerlink" title="第一步在路由上加个name属性"></a>第一步在路由上加个name属性</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="第二步传递参数"><a href="#第二步传递参数" class="headerlink" title="第二步传递参数"></a>第二步传递参数</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    name:&#x27;xiangqing&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">        id:m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">        title:m.title</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123; &#123;m.title&#125; &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="第三步接收参数"><a href="#第三步接收参数" class="headerlink" title="第三步接收参数"></a>第三步接收参数</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h4><p><strong>如果使用了name使用路由时候必须写成对象形式</strong></p>
<h3 id="路由的params参数-RESTful格式"><a href="#路由的params参数-RESTful格式" class="headerlink" title="路由的params参数(RESTful格式)"></a>路由的params参数(RESTful格式)</h3><h4 id="如何使用-2"><a href="#如何使用-2" class="headerlink" title="如何使用"></a>如何使用</h4><h5 id="第一步在路由器中占位"><a href="#第一步在路由器中占位" class="headerlink" title="第一步在路由器中占位"></a>第一步在路由器中占位</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:title&#x27;</span>,<span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="第二步传递参数-1"><a href="#第二步传递参数-1" class="headerlink" title="第二步传递参数"></a>第二步传递参数</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;/home/message/detail/666/你好&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">				</span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">		name:&#x27;xiangqing&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">		params:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">		   id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">            title:&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">		&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">	&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="第三步接收参数-1"><a href="#第三步接收参数-1" class="headerlink" title="第三步接收参数"></a>第三步接收参数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure>

<h4 id="注意-4"><a href="#注意-4" class="headerlink" title="注意"></a>注意</h4><p><strong>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</strong></p>
<h3 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h3><h4 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h4><p>方便接收参数进行处理</p>
<h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a>怎么使用？</h4><h5 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h5><p>跟不用query和params一样</p>
<h5 id="在路由器中进行处理"><a href="#在路由器中进行处理" class="headerlink" title="在路由器中进行处理"></a>在路由器中进行处理</h5><h6 id="第一种写法-不用，只能传递静态数据-："><a href="#第一种写法-不用，只能传递静态数据-：" class="headerlink" title="第一种写法(不用，只能传递静态数据)："></a>第一种写法(不用，只能传递静态数据)：</h6><p>props值为对象，该对象中的所有key-value都会以props的形式传给Detail组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="attr">props</span>:&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h6 id="第二种写法-只能传输params参数"><a href="#第二种写法-只能传输params参数" class="headerlink" title="第二种写法(只能传输params参数)"></a>第二种写法(只能传输params参数)</h6><p>props值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给Detail组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">，</span><br><span class="line">            <span class="attr">props</span>:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h6 id="第三种写法-最常用-亲身实践"><a href="#第三种写法-最常用-亲身实践" class="headerlink" title="第三种写法(最常用)(亲身实践)"></a>第三种写法(最常用)(亲身实践)</h6><p>props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件，功能强大<strong>在路由中使用$route.params无论是不是ruestful格式的数据都能获取到,需要占位！！！</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="title function_">props</span>(<span class="params">$route</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">id</span>: $route.<span class="property">params</span>.<span class="property">id</span>,</span><br><span class="line">                    <span class="attr">title</span>: $route.<span class="property">params</span>.<span class="property">title</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//法一</span></span><br><span class="line">&lt;li&gt;&#123; &#123; <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span> &#125; &#125;&lt;/li&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123; &#123; this.$route.params.title &#125; &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="comment">//法二</span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123; &#123; id &#125; &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123; &#123; title &#125; &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="lt-router-link-gt-的replace属性"><a href="#lt-router-link-gt-的replace属性" class="headerlink" title="&lt;router-link&gt;的replace属性"></a><code>&lt;router-link&gt;</code>的replace属性</h3><ol>
<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>
<li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li>
<li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li>
</ol>
<h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><h4 id="编程式路由导航啥意思"><a href="#编程式路由导航啥意思" class="headerlink" title="编程式路由导航啥意思"></a>编程式路由导航啥意思</h4><p>不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p>
<h4 id="怎么使用？-1"><a href="#怎么使用？-1" class="headerlink" title="怎么使用？"></a>怎么使用？</h4><p>直接在methods方法中使用方法中的内容方法中的内容与<code>&lt;router-link :to&gt;</code>中的内容一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;pushShow(m)&quot;&gt;push查看&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;replaceShow(m)&quot;&gt;replace查看&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        pushShow(m)&#123;</span><br><span class="line">            this.$router.push(&#123;</span><br><span class="line">                name: &#x27;xiangqing&#x27;,</span><br><span class="line">                params: &#123;</span><br><span class="line">                    id: m.id,</span><br><span class="line">                    title: m.title</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        replaceShow(m)&#123;</span><br><span class="line">            // console.log(this.$router);</span><br><span class="line">            this.$router.replace(&#123;</span><br><span class="line">                name: &#x27;xiangqing&#x27;,</span><br><span class="line">                params: &#123;</span><br><span class="line">                    id: m.id,</span><br><span class="line">                    title: m.title</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;back&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;forward&quot;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span>&gt;</span>测试go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">	<span class="title function_">back</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">forward</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">2</span>)</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="总结五个方法"><a href="#总结五个方法" class="headerlink" title="总结五个方法"></a>总结五个方法</h4><h5 id="push和replace方法"><a href="#push和replace方法" class="headerlink" title="push和replace方法"></a>push和replace方法</h5><p>这俩方法后面要跟发送的path或name</p>
<h5 id="back、forward和go方法"><a href="#back、forward和go方法" class="headerlink" title="back、forward和go方法"></a>back、forward和go方法</h5><ol>
<li>back：浏览器中后退的按钮</li>
<li>forward：浏览器中前进的按钮</li>
<li>go(数字number)：<ol>
<li>number&gt;0前进number步</li>
<li>number&lt;0后退number步</li>
</ol>
</li>
</ol>
<h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><ol>
<li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p>
</li>
<li><p>具体编码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h3><ol>
<li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li>
<li>具体名字：<ol>
<li><code>activated</code>路由组件被激活时触发。与mounted相比较</li>
<li><code>deactivated</code>路由组件失活时触发。与destroy相比较</li>
</ol>
</li>
</ol>
<h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><ol>
<li>作用：对路由进行权限控制</li>
<li>分类：全局守卫、独享守卫、组件内守卫</li>
</ol>
<h4 id="全局路由"><a href="#全局路由" class="headerlink" title="全局路由"></a>全局路由</h4><h5 id="前置路由用法"><a href="#前置路由用法" class="headerlink" title="前置路由用法"></a>前置路由用法</h5><h6 id="1-创建并暴露一个路由-写法不同"><a href="#1-创建并暴露一个路由-写法不同" class="headerlink" title="1. 创建并暴露一个路由(写法不同)"></a>1. 创建并暴露一个路由(写法不同)</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h6 id="2-在暴露之前定义一个全局前置路由守卫"><a href="#2-在暴露之前定义一个全局前置路由守卫" class="headerlink" title="2. 在暴露之前定义一个全局前置路由守卫"></a>2. 在暴露之前定义一个全局前置路由守卫</h6><ol>
<li>作用：初始化的时候被调用、每次路由切换之前被调用</li>
<li>如何使用？</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="三个参数"><a href="#三个参数" class="headerlink" title="三个参数"></a>三个参数</h5><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>to</td>
<td>要去哪个路由组件</td>
</tr>
<tr>
<td>from</td>
<td>来自哪个路由组件</td>
</tr>
<tr>
<td>next</td>
<td>next()调用它才能有权限继续访问</td>
</tr>
</tbody></table>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://raw.githubusercontent.com/HRYX02/LearnPhoto2/master/Snipaste_2023-03-27_16-35-54.jpg"
                     
                ></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">代码解释：</span></span><br><span class="line"><span class="comment">	第一个if判断是否是进入news或xiaoxi路由组件</span></span><br><span class="line"><span class="comment">	如果不进入则可以显示组件路由</span></span><br><span class="line"><span class="comment">	如果进入的话</span></span><br><span class="line"><span class="comment">		进行判断school是否为atguigu</span></span><br><span class="line"><span class="comment">		如果是则可以显示news或xiaoxi路由组件</span></span><br><span class="line"><span class="comment">		如果不是就弹框</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/home/news&#x27;</span> || to.<span class="property">name</span> === <span class="string">&#x27;xiaoxi&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="关于to-path的改进"><a href="#关于to-path的改进" class="headerlink" title="关于to.path的改进"></a>关于to.path的改进</h5><p>如果有无数个组件路由需要鉴权是否进入该路由怎么办<code>to.path = = = &#39;/home/news&#39; || to.name  = = = &#39;xiaoxi&#39;</code>难道要写无数次？</p>
<p>不需要由上图可知<code>this.$route</code>中由一个<code>meta</code>属性该属性就可以作为标志</p>
<h6 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h6><ol>
<li><p>在需要进行判断的路由中添加一个meta</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">	<span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">	<span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">	<span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">isAuth</span>: <span class="literal">true</span> &#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>改进判断语句，调用isAuth判断是否需要鉴权</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前置路由守卫:to&#x27;</span>, to, <span class="string">&#x27;from&#x27;</span>, <span class="keyword">from</span>);</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;<span class="comment">//如果isAuth===true则就需要被鉴权</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="关于meta"><a href="#关于meta" class="headerlink" title="关于meta"></a>关于meta</h5><ol>
<li>是一个对象<code>&#123;&#125;</code>里面用key-value存储常用的就是<code>isAuth: true</code>如果为true则就需要被鉴权，反之不用</li>
<li>如果该路由不需要鉴权可以<code>meta&#123;isAuth: false&#125;</code>也可以不用写<code>meta</code>那样if判断时候调用就会显示undefined为false</li>
</ol>
<h5 id="后置路由用法"><a href="#后置路由用法" class="headerlink" title="后置路由用法"></a>后置路由用法</h5><p>全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</p>
<h6 id="用法-4"><a href="#用法-4" class="headerlink" title="用法"></a>用法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">    <span class="attr">meta</span>:&#123;</span><br><span class="line">        <span class="attr">isAuth</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">代码解释：</span></span><br><span class="line"><span class="comment">	当进入该路由后将该路由的标签名显示为自定义内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后置路由守卫:to&#x27;</span>, to, <span class="string">&#x27;from&#x27;</span>, <span class="keyword">from</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;硅谷系统&#x27;</span> <span class="comment">//如果由title就用如果没有就用||后面的</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="注意-5"><a href="#注意-5" class="headerlink" title="注意"></a>注意</h6><p><strong>后置路由没有<code>next</code>属性</strong></p>
<h4 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h4><p><strong>只有前置没有后置</strong></p>
<h5 id="用法-5"><a href="#用法-5" class="headerlink" title="用法"></a>用法</h5><ol>
<li>在该路由中调用<code>beforeEnter: (to, from, next)=&gt;&#123;&#125;)</code>函数</li>
<li>里面的用法与全局路由一样</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">isAuth</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;消息&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">next</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件内部路由守卫"><a href="#组件内部路由守卫" class="headerlink" title="组件内部路由守卫"></a>组件内部路由守卫</h4><h5 id="进入守卫beforeRouteEnter"><a href="#进入守卫beforeRouteEnter" class="headerlink" title="进入守卫beforeRouteEnter"></a>进入守卫beforeRouteEnter</h5><p><strong>通过路由规则，进入该组件时被调用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="离开守卫beforeRouteLeave"><a href="#离开守卫beforeRouteLeave" class="headerlink" title="离开守卫beforeRouteLeave"></a>离开守卫beforeRouteLeave</h5><p><strong>通过路由规则，离开该组件时被调用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="history模式与hash模式"><a href="#history模式与hash模式" class="headerlink" title="history模式与hash模式"></a>history模式与hash模式</h4><ol>
<li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li>
<li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li>
<li>hash模式：<ol>
<li>地址中永远带着#号，不美观 。</li>
<li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li>
<li>兼容性较好。</li>
</ol>
</li>
<li>history模式：<ol>
<li>地址干净，美观 。</li>
<li>兼容性和hash模式相比略差。</li>
<li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>前端学习的记录</tag>
      </tags>
  </entry>
</search>
